[Script Info]
; Script generated by Aegisub 3.1.3
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
Last Style Storage: Default
Aegisub Scroll Position: 0
Aegisub Active Line: 8
Aegisub Video Zoom Percent: 1.000000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: yin,冬青黑体简体中文 W3,20,&H00FFFFFF,&HF0000000,&H00000000,&H32000000,0,0,0,0,100,100,0,0,1,1,0,2,5,5,5,134

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:05.04,0:00:06.35,yin,,0,0,0,,斯坦福大学\N{\fs12}Stanford University.
Dialogue: 0,0:00:08.59,0:00:10.90,yin,,0,0,0,,欢迎来到2013至2014秋季学期\N{\fs12}Well, welcome everyone to lecture number seven
Dialogue: 0,0:00:10.90,0:00:14.64,yin,,0,0,0,,CS193P第七讲\N{\fs12}of CS1973P fall of 2013-14.
Dialogue: 0,0:00:14.97,0:00:17.83,yin,,0,0,0,,今天我们会讲一下输入输出\N{\fs12}Today we are going to talk about input and output.
Dialogue: 0,0:00:17.98,0:00:19.97,yin,,0,0,0,,涉及到屏幕上\N{\fs12}Okay? It's about views
Dialogue: 0,0:00:19.98,0:00:22.67,yin,,0,0,0,,矩形区域的视图\N{\fs12}which you're rectangular areas on the screen
Dialogue: 0,0:00:22.68,0:00:25.94,yin,,0,0,0,,可以在其中绘制自定义内容\N{\fs12}that you can use both to draw custom stuff
Dialogue: 0,0:00:26.09,0:00:28.06,yin,,0,0,0,,以及从用户触控手势 多点触控中\N{\fs12}and to get gestures in
Dialogue: 0,0:00:28.68,0:00:30.95,yin,,0,0,0,,获取手势\N{\fs12}from user touch gestures, multi-touch.
Dialogue: 0,0:00:31.63,0:00:34.17,yin,,0,0,0,,我会用一个示例演示这些内容\N{\fs12}I'm going to have a demo that's going to show you all that.
Dialogue: 0,0:00:34.19,0:00:35.43,yin,,0,0,0,,我们会创建一个自定义视图\N{\fs12}We're going to build a custom view,
Dialogue: 0,0:00:35.44,0:00:39.20,yin,,0,0,0,,它有自己的自定义手势等等\N{\fs12}it's going to have its own custom gestures and all that stuff.
Dialogue: 0,0:00:39.21,0:00:42.74,yin,,0,0,0,,基本上 它会绘制...\N{\fs12}It's basically going to draw the--
Dialogue: 0,0:00:42.75,0:00:44.92,yin,,0,0,0,,我们在Machismo中使用的卡牌\N{\fs12}you know, the cards that we used in Machismo
Dialogue: 0,0:00:44.93,0:00:47.19,yin,,0,0,0,,都不太好看 比如梅花A\N{\fs12}were just really bad, like A clubs.
Dialogue: 0,0:00:47.19,0:00:48.34,yin,,0,0,0,,看起来并不像扑克牌\N{\fs12}They didn't look like cards,
Dialogue: 0,0:00:48.36,0:00:51.07,yin,,0,0,0,,所以我们会创建一个自定义视图\N{\fs12}so we're going to actually have a custom view
Dialogue: 0,0:00:51.24,0:00:54.18,yin,,0,0,0,,顶角有数字和花色 还有人头牌\N{\fs12}Right? Has the things in the corner, and face cards,
Dialogue: 0,0:00:54.20,0:00:55.79,yin,,0,0,0,,这些全套的东西\N{\fs12}all that-- that whole business.
Dialogue: 0,0:00:57.44,0:01:00.98,yin,,0,0,0,,视图是iOS中至关重要的一部分\N{\fs12}All right, so a view is of critical importance in iOS.
Dialogue: 0,0:01:00.98,0:01:03.50,yin,,0,0,0,,它是所有绘制操作的核心\N{\fs12}It's right at the heart of all the drawing we do.
Dialogue: 0,0:01:03.61,0:01:05.57,yin,,0,0,0,,大家已经用过非常多的视图了\N{\fs12}You've used a ton of views already.
Dialogue: 0,0:01:05.58,0:01:06.42,yin,,0,0,0,,按钮是视图\N{\fs12}Buttons are views.
Dialogue: 0,0:01:06.43,0:01:07.89,yin,,0,0,0,,标签是视图\N{\fs12}Labels are views. Okay?
Dialogue: 0,0:01:08.80,0:01:12.32,yin,,0,0,0,,基本上 它是构造块\N{\fs12}It's basically the building block
Dialogue: 0,0:01:12.32,0:01:14.98,yin,,0,0,0,,代表屏幕上的一块矩形区域\N{\fs12}that represents a rectangular area on screen.
Dialogue: 0,0:01:14.98,0:01:16.89,yin,,0,0,0,,定义了一个坐标空间\N{\fs12}It defines a coordinate space.
Dialogue: 0,0:01:17.06,0:01:18.58,yin,,0,0,0,,在这个坐标空间中 你可以进行绘制\N{\fs12}Okay? A coordinate space you can draw in.
Dialogue: 0,0:01:18.59,0:01:20.56,yin,,0,0,0,,可以在其中添加触控事件\N{\fs12}And a coordinate space that you can get touch events in
Dialogue: 0,0:01:20.56,0:01:22.01,yin,,0,0,0,,掌握它们的位置\N{\fs12}and understand where they are.
Dialogue: 0,0:01:23.36,0:01:24.96,yin,,0,0,0,,它是分层级的\N{\fs12}It's hierarchical.
Dialogue: 0,0:01:25.09,0:01:26.95,yin,,0,0,0,,可以在视图中嵌套视图\N{\fs12}Right? So you can have view inside views,
Dialogue: 0,0:01:26.97,0:01:28.97,yin,,0,0,0,,层层嵌套 明白吗\N{\fs12}inside views, all right?
Dialogue: 0,0:01:29.94,0:01:32.34,yin,,0,0,0,,每个视图只有一个父视图\N{\fs12}Every view only has one superview.
Dialogue: 0,0:01:32.63,0:01:35.53,yin,,0,0,0,,但是一个特定视图可以有很多子视图\N{\fs12}But a given view could have many subviews
Dialogue: 0,0:01:35.55,0:01:36.96,yin,,0,0,0,,而这些子视图就是一个个矩形\N{\fs12}and those sub view are just rectangles.
Dialogue: 0,0:01:36.97,0:01:38.94,yin,,0,0,0,,相互之间可以重叠等等\N{\fs12}They can overlap, whatever.
Dialogue: 0,0:01:39.72,0:01:43.20,yin,,0,0,0,,不要求它们平铺或相互独立\N{\fs12}You know they're not required to somehow be tiled or separate.
Dialogue: 0,0:01:43.21,0:01:46.89,yin,,0,0,0,,特定视图的子视图是完全自由的\N{\fs12}They're complete free form subviews of a given view.
Dialogue: 0,0:01:48.06,0:01:51.46,yin,,0,0,0,,一个视图可以有任意多个子视图\N{\fs12}You can have any number of subview you want for a given view.
Dialogue: 0,0:01:51.74,0:01:53.63,yin,,0,0,0,,子视图的顺序很重要\N{\fs12}The order of the subviews does matter,
Dialogue: 0,0:01:53.63,0:01:55.13,yin,,0,0,0,,因为它们可以是透明的\N{\fs12}because they can be transparent.
Dialogue: 0,0:01:55.14,0:01:56.13,yin,,0,0,0,,我们会讲到这部分\N{\fs12}We'll talk about that.
Dialogue: 0,0:01:56.44,0:01:59.41,yin,,0,0,0,,还有一点有时会令人困惑就是\N{\fs12}And one thing that's sometimes a little confusing is
Dialogue: 0,0:01:59.86,0:02:01.86,yin,,0,0,0,,视图是这个矩形区域\N{\fs12}you have this rectangular area that you're view,
Dialogue: 0,0:02:01.86,0:02:04.27,yin,,0,0,0,,但其实可以在区域外进行绘制\N{\fs12}but you can actually draw outside that area.
Dialogue: 0,0:02:04.31,0:02:05.40,yin,,0,0,0,,完全合法\N{\fs12}Perfectly legal.
Dialogue: 0,0:02:05.89,0:02:08.16,yin,,0,0,0,,Xcode中有一个开关\N{\fs12}There is a little switch you can turn on in Xcode
Dialogue: 0,0:02:08.17,0:02:11.01,yin,,0,0,0,,或者说是UIView的一个属性\N{\fs12}or obviously a property in UIView
Dialogue: 0,0:02:11.02,0:02:12.48,yin,,0,0,0,,代表"裁剪子视图"\N{\fs12}that says "Clips my subviews."
Dialogue: 0,0:02:12.48,0:02:15.22,yin,,0,0,0,,换句话说就是不要让我的子视图\N{\fs12}In other words, don't let my subviews go outside my
Dialogue: 0,0:02:15.94,0:02:17.18,yin,,0,0,0,,超出视图边界\N{\fs12}my view's bound. Right?
Dialogue: 0,0:02:17.19,0:02:19.41,yin,,0,0,0,,可以按照自己意愿将绘制内容控制在一定范围内\N{\fs12}So you can kind of keep things contained if you want, but...
Dialogue: 0,0:02:20.46,0:02:22.69,yin,,0,0,0,,通常这并不是默认值 我们一般也不需要\N{\fs12}General that's not the default and generally we don't.
Dialogue: 0,0:02:23.34,0:02:25.43,yin,,0,0,0,,有一个UIWindow类\N{\fs12}There is a UIWindow class.
Dialogue: 0,0:02:25.61,0:02:27.16,yin,,0,0,0,,在iOS中并不重要\N{\fs12}Very unimportant in iOS.
Dialogue: 0,0:02:27.16,0:02:29.33,yin,,0,0,0,,如果要学习Mac UIWindow就很重要了\N{\fs12}If we're on the Mac, UIWindow would matter.
Dialogue: 0,0:02:29.33,0:02:31.73,yin,,0,0,0,,可以在桌面上放置多个窗口\N{\fs12}You got a lot of windows on a desktop.
Dialogue: 0,0:02:31.95,0:02:33.54,yin,,0,0,0,,但在iOS中 视图就是主要内容了\N{\fs12}But in iOS, it's all about views.
Dialogue: 0,0:02:33.55,0:02:34.92,yin,,0,0,0,,只有一个UIWindow\N{\fs12}There's only one UIWindow.
Dialogue: 0,0:02:34.93,0:02:37.56,yin,,0,0,0,,它包括了当前出现在屏幕上的\N{\fs12}It's the one that's containing all the views
Dialogue: 0,0:02:37.57,0:02:38.56,yin,,0,0,0,,全部视图\N{\fs12}that are currently on screen.
Dialogue: 0,0:02:38.57,0:02:40.89,yin,,0,0,0,,这也就是为什么在上一个示例中 我可以说\N{\fs12}That's why in the last demo I was able to say
Dialogue: 0,0:02:41.02,0:02:44.24,yin,,0,0,0,,如果self.view.window不为空 我就知道我正显示在屏幕上\N{\fs12}if self.View.Window, then I knew I was on screen.
Dialogue: 0,0:02:44.25,0:02:45.97,yin,,0,0,0,,因为只有这一个窗口\N{\fs12}Right? Because that's the only window there is
Dialogue: 0,0:02:45.98,0:02:48.60,yin,,0,0,0,,如果我在窗口中 那么我就是在屏幕上\N{\fs12}and so if I am in it then I'm on screen.
Dialogue: 0,0:02:48.89,0:02:50.68,yin,,0,0,0,,所以UIWindow无关紧要\N{\fs12}So UIWindow very unimportant,
Dialogue: 0,0:02:51.23,0:02:52.26,yin,,0,0,0,,你甚至用不着\N{\fs12}you don't even aver had to
Dialogue: 0,0:02:52.27,0:02:54.04,yin,,0,0,0,,查看UIWindow的文档\N{\fs12}look at the documentation for UIWindow.
Dialogue: 0,0:02:54.80,0:02:56.33,yin,,0,0,0,,UIView就是我们需要的全部内容\N{\fs12}UIViews are what it's all about.
Dialogue: 0,0:02:57.29,0:02:58.82,yin,,0,0,0,,视图的这种层级结构\N{\fs12}So this hierarchy of views.
Dialogue: 0,0:02:58.82,0:03:02.26,yin,,0,0,0,,视图嵌套视图 通常是在Xcode中完成的\N{\fs12}View inside views is most often built in Xcode,
Dialogue: 0,0:03:02.27,0:03:03.77,yin,,0,0,0,,只要将视图拖入即可\N{\fs12}just by dragging views in.
Dialogue: 0,0:03:03.78,0:03:05.42,yin,,0,0,0,,我们目前还没有做过很多\N{\fs12}Now we haven't done a lot of
Dialogue: 0,0:03:05.43,0:03:07.12,yin,,0,0,0,,将视图拖拽到另一个视图中的操作\N{\fs12}dragging views inside other views,
Dialogue: 0,0:03:07.13,0:03:08.52,yin,,0,0,0,,但是这样做是完全合法的\N{\fs12}but it's perfectly legal to do that
Dialogue: 0,0:03:08.53,0:03:10.14,yin,,0,0,0,,你有时会在Xcode中遇到这种情况\N{\fs12}and you'll see in Xcode sometimes
Dialogue: 0,0:03:10.15,0:03:12.47,yin,,0,0,0,,当你拖拽时 系统会想要将它放到另一个视图中\N{\fs12}when you drag, it try to drop it in another view.
Dialogue: 0,0:03:12.47,0:03:14.61,yin,,0,0,0,,你也许并不想这样做 但是系统会尝试这样做\N{\fs12}You might even don't want it to, but it tries to.
Dialogue: 0,0:03:15.62,0:03:17.15,yin,,0,0,0,,所以很多情况下都会用图形化的方式来创建\N{\fs12}So a lot of it would build graphically.
Dialogue: 0,0:03:17.16,0:03:19.03,yin,,0,0,0,,我们还可以通过代码创建\N{\fs12}However, we could also build it in code
Dialogue: 0,0:03:19.05,0:03:20.17,yin,,0,0,0,,当我们使用代码\N{\fs12}and when we build it in code,
Dialogue: 0,0:03:20.36,0:03:22.64,yin,,0,0,0,,创建和拆解这个新的层级结构时\N{\fs12}build and tear down this new hierarchy in code
Dialogue: 0,0:03:22.65,0:03:24.63,yin,,0,0,0,,需要这两个方法 addSubView\N{\fs12}with these two methods, addSubView.
Dialogue: 0,0:03:25.19,0:03:26.33,yin,,0,0,0,,和大家想的完全一样\N{\fs12}Exactly what you would think.
Dialogue: 0,0:03:26.34,0:03:27.45,yin,,0,0,0,,它得到一个视图\N{\fs12}It just takes a view
Dialogue: 0,0:03:27.46,0:03:29.44,yin,,0,0,0,,将它作为子视图添加到另一个视图上\N{\fs12}and adds it as a subview of some other view.
Dialogue: 0,0:03:29.44,0:03:31.41,yin,,0,0,0,,将这个方法发送给\N{\fs12}You send that to the view
Dialogue: 0,0:03:31.54,0:03:33.33,yin,,0,0,0,,目标父视图\N{\fs12}that you want to be the parent view, right.
Dialogue: 0,0:03:33.68,0:03:36.40,yin,,0,0,0,,也就是你想要向其添加子视图的那个视图\N{\fs12}That's the view to which you are adding the subview.
Dialogue: 0,0:03:37.16,0:03:38.24,yin,,0,0,0,,相反的操作\N{\fs12}On the opposite side,
Dialogue: 0,0:03:38.24,0:03:40.33,yin,,0,0,0,,如果想要将视图从视图层级中移除\N{\fs12}to get a view out of the view hierarchy
Dialogue: 0,0:03:40.34,0:03:44.35,yin,,0,0,0,,就要向想要移除的那个视图发送removeFromSuperview\N{\fs12}you send removeFromSuperview to the view you want to remove.
Dialogue: 0,0:03:44.67,0:03:45.86,yin,,0,0,0,,而不是发送给它的父视图\N{\fs12}Not to it's parent.
Dialogue: 0,0:03:46.00,0:03:49.35,yin,,0,0,0,,所以不能用removeFromSuperview:view\N{\fs12}So you don't say removeFromSuperview:view.
Dialogue: 0,0:03:49.36,0:03:51.49,yin,,0,0,0,,只需要对你想要移除的那个视图说\N{\fs12}You just say to a view that you want out of there,
Dialogue: 0,0:03:51.54,0:03:53.10,yin,,0,0,0,,从父视图中移除你自己\N{\fs12}remove yourself from superview.
Dialogue: 0,0:03:53.72,0:03:55.78,yin,,0,0,0,,所以添加和移除操作中发送方法的对象\N{\fs12}Okay, so it's a little different adding and removing
Dialogue: 0,0:03:55.78,0:03:57.96,yin,,0,0,0,,不太一样\N{\fs12}who you ask to do it.
Dialogue: 0,0:03:59.17,0:04:02.31,yin,,0,0,0,,这是MVC 所有肯定有视图\N{\fs12}You're MVCs, of course have a view.
Dialogue: 0,0:04:02.67,0:04:06.47,yin,,0,0,0,,而MVC的视图层级结构中\N{\fs12}And that top level view that contains all the views
Dialogue: 0,0:04:06.47,0:04:08.72,yin,,0,0,0,,包含全部视图的那个顶级视图\N{\fs12}in the view hierarchy for your MVC
Dialogue: 0,0:04:09.02,0:04:12.67,yin,,0,0,0,,就是视图控制器中的view视图属性\N{\fs12}is the property view in view controller.
Dialogue: 0,0:04:13.07,0:04:14.73,yin,,0,0,0,,所以如果你查看UIViewController\N{\fs12}So if you look in UIViewController,
Dialogue: 0,0:04:14.74,0:04:15.77,yin,,0,0,0,,它有一个属性叫做view\N{\fs12}there's a property called view.
Dialogue: 0,0:04:15.77,0:04:16.94,yin,,0,0,0,,它是UIView\N{\fs12}It's a UIView.
Dialogue: 0,0:04:17.48,0:04:21.68,yin,,0,0,0,,如果你打开Xcode 在控制器上单击右键\N{\fs12}And if you go in Xcode and right click on your controller
Dialogue: 0,0:04:21.68,0:04:24.73,yin,,0,0,0,,或者在MVC的视图背景上单击右键\N{\fs12}or right click on the background of your MVC's view,
Dialogue: 0,0:04:24.85,0:04:27.04,yin,,0,0,0,,你会看到一个输出口\N{\fs12}you'll see an outlet basically.
Dialogue: 0,0:04:27.04,0:04:29.80,yin,,0,0,0,,因为这个view属性确实就是个输出口\N{\fs12}Because it's really is an outlet, this view property.
Dialogue: 0,0:04:30.02,0:04:32.36,yin,,0,0,0,,输出口指向顶级视图\N{\fs12}And it points to that top level view.
Dialogue: 0,0:04:32.64,0:04:34.20,yin,,0,0,0,,所以如果你想用代码\N{\fs12}So that's a good place to start
Dialogue: 0,0:04:34.21,0:04:37.03,yin,,0,0,0,,向视图层级结构中添加视图\N{\fs12}if you want to start adding views in code
Dialogue: 0,0:04:37.30,0:04:38.07,yin,,0,0,0,,这是一个很好的出发点\N{\fs12}to your view hierarchy.
Dialogue: 0,0:04:38.07,0:04:40.02,yin,,0,0,0,,当然 当你在Xcode中拖出它们时\N{\fs12}And of course when you drag them out in Xcode
Dialogue: 0,0:04:40.03,0:04:40.64,yin,,0,0,0,,你就是这样做的\N{\fs12}that's what you're doing.
Dialogue: 0,0:04:40.64,0:04:41.65,yin,,0,0,0,,是将它们放在了...\N{\fs12}You're dropping them in--
Dialogue: 0,0:04:42.27,0:04:44.22,yin,,0,0,0,,除非你是将它们拖拽到另一个视图上\N{\fs12}Unless you're dropping them in on top of another view,
Dialogue: 0,0:04:44.23,0:04:46.79,yin,,0,0,0,,否则你就是将视图放到了背景中 self.view中\N{\fs12}you're dropping into that background, the self.view.
Dialogue: 0,0:04:47.02,0:04:47.93,yin,,0,0,0,,self.view\N{\fs12}Okay, self.View.
Dialogue: 0,0:04:47.94,0:04:50.32,yin,,0,0,0,,我们用self.view来表示 将视图放在self.view中\N{\fs12}We use that phrase self.view, it puts in self.view.
Dialogue: 0,0:04:50.55,0:04:55.85,yin,,0,0,0,,self.view是UIViewController的顶级UIView\N{\fs12}Self.View is that top level UIView in UIViewController.
Dialogue: 0,0:04:55.86,0:04:57.17,yin,,0,0,0,,它只是一个普通的UIView\N{\fs12}It's just a plain UIView.
Dialogue: 0,0:04:57.18,0:04:58.12,yin,,0,0,0,,并不是子类\N{\fs12}It's not a subclass version.
Dialogue: 0,0:04:58.13,0:04:59.59,yin,,0,0,0,,我们永远都不会子类化这个视图\N{\fs12}You never subclass that view.
Dialogue: 0,0:04:59.59,0:05:01.34,yin,,0,0,0,,它就像是一个大的容器视图\N{\fs12}It's just kind of a big container view.
Dialogue: 0,0:05:01.56,0:05:02.98,yin,,0,0,0,,这是另外一件需要知道的关于视图的事情\N{\fs12}And that's another thing to know about views,
Dialogue: 0,0:05:03.00,0:05:05.90,yin,,0,0,0,,绘制或处理触控事件时并不经常需要对其进行子类化\N{\fs12}you don't always subclass them to draw or do touch events.
Dialogue: 0,0:05:05.92,0:05:07.86,yin,,0,0,0,,有时它们只是边界\N{\fs12}Sometimes they're just boundaries. Right?
Dialogue: 0,0:05:07.87,0:05:09.97,yin,,0,0,0,,只是用来定义一个坐标空间\N{\fs12}Just a view you want to define a coordinate space
Dialogue: 0,0:05:09.98,0:05:11.59,yin,,0,0,0,,在其中增加其他视图\N{\fs12}and you want to put some other views inside of it.
Dialogue: 0,0:05:11.94,0:05:13.65,yin,,0,0,0,,完全没问题 可以这样做\N{\fs12}Perfectly fine, we do that.
Dialogue: 0,0:05:15.60,0:05:17.60,yin,,0,0,0,,初始化UIView\N{\fs12}So initializing a UIView.
Dialogue: 0,0:05:17.75,0:05:20.84,yin,,0,0,0,,更常见的是\N{\fs12}A little more common to want to
Dialogue: 0,0:05:20.90,0:05:23.68,yin,,0,0,0,,在子类中 重写UIView的\N{\fs12}override the designated initializer of a UIView
Dialogue: 0,0:05:23.69,0:05:24.37,yin,,0,0,0,,指定初始化方法\N{\fs12}in a subclass.
Dialogue: 0,0:05:24.37,0:05:26.95,yin,,0,0,0,,还记得吗 在UIViewController中我们说\N{\fs12}Remember in UIViewController we kind of said,
Dialogue: 0,0:05:27.07,0:05:28.45,yin,,0,0,0,,我们几乎从来不会这样做\N{\fs12}we almost never do that
Dialogue: 0,0:05:28.46,0:05:31.34,yin,,0,0,0,,因为UIViewController通常都会从storyboard中创建\N{\fs12}because UIViewController are almost always coming out of storyboards.
Dialogue: 0,0:05:31.53,0:05:34.42,yin,,0,0,0,,所以指定初始化方法永远都不会被调用\N{\fs12}So the designated initializer never gets called in anyway.
Dialogue: 0,0:05:34.61,0:05:36.16,yin,,0,0,0,,我们只要用awakeFromNib方法\N{\fs12}So we just do awakeFromNib.
Dialogue: 0,0:05:36.68,0:05:40.58,yin,,0,0,0,,而不用initWithNibName bundle\N{\fs12}Okay? And we never do that initWithNibName bundle thing.
Dialogue: 0,0:05:41.16,0:05:42.52,yin,,0,0,0,,UIView中并不是这样的\N{\fs12}That's not true in UIView.
Dialogue: 0,0:05:42.53,0:05:46.95,yin,,0,0,0,,在UIView中 你不仅需要\N{\fs12}In UIView you do more often both need to do something
Dialogue: 0,0:05:46.95,0:05:50.78,yin,,0,0,0,,在初始化方法中做些操作\N{\fs12}in your initializer and just want to, you know,
Dialogue: 0,0:05:50.79,0:05:53.76,yin,,0,0,0,,需要初始化方法 并在其中添加代码\N{\fs12}have your initializer around and code in there.
Dialogue: 0,0:05:54.05,0:05:57.96,yin,,0,0,0,,但当你这样做时 你仍需要awakeFromNib\N{\fs12}So but when you do it, you want to also do awakeFromNib.
Dialogue: 0,0:05:58.51,0:06:03.09,yin,,0,0,0,,因为创建UIView的两种方法是同等的\N{\fs12}Okay? That's because UIViews are equally created--
Dialogue: 0,0:06:03.09,0:06:05.96,yin,,0,0,0,,也不是完全同等 但至少是两种常用的方法\N{\fs12}well, not equally, but at least they're commonly created
Dialogue: 0,0:06:05.99,0:06:08.74,yin,,0,0,0,,一种是将它们拖进storyboard中\N{\fs12}both by dragging them into a storyboard,
Dialogue: 0,0:06:08.76,0:06:11.32,yin,,0,0,0,,对应的就是awakeFromNib初始化\N{\fs12}so that would be the awakeFromNib initialization
Dialogue: 0,0:06:11.47,0:06:13.34,yin,,0,0,0,,另外一种是向它们发送alloc/init\N{\fs12}and by sending alloc and init to them.
Dialogue: 0,0:06:13.70,0:06:15.97,yin,,0,0,0,,也就是说在代码中创建一个视图\N{\fs12}In other words, in your code creating a view.
Dialogue: 0,0:06:15.98,0:06:18.04,yin,,0,0,0,,比如 在作业中\N{\fs12}So for example, in your homework you're going to
Dialogue: 0,0:06:18.05,0:06:21.21,yin,,0,0,0,,大家需要实现设置卡牌和真正的扑克牌\N{\fs12}have to do set cards and playing cards for real,
Dialogue: 0,0:06:21.27,0:06:23.24,yin,,0,0,0,,不再是按钮 而是真正地绘制出来\N{\fs12}not as buttons, but actually drawing them
Dialogue: 0,0:06:23.44,0:06:27.17,yin,,0,0,0,,几乎可以肯定 你会用allco/init来初始化这些视图\N{\fs12}and you will almost certainly be allocating those views
Dialogue: 0,0:06:27.29,0:06:30.26,yin,,0,0,0,,因为视图数量不确定\N{\fs12}because there can be-- there's not a fixed number of them
Dialogue: 0,0:06:30.26,0:06:31.81,yin,,0,0,0,,所以你并不能完全用在Xcode中拖出来实现\N{\fs12}so you can't really drag them out in Xcode
Dialogue: 0,0:06:31.81,0:06:33.15,yin,,0,0,0,,因为它们需要出现和消失\N{\fs12}because they have to come and go.
Dialogue: 0,0:06:33.96,0:06:34.70,yin,,0,0,0,,大家要实现这部分内容\N{\fs12}So you'll be doing that.
Dialogue: 0,0:06:34.70,0:06:37.48,yin,,0,0,0,,这和我们对UIViewController做过的操作类似\N{\fs12}So we do the same kind of thing we did with UIViewController.
Dialogue: 0,0:06:37.48,0:06:39.35,yin,,0,0,0,,添加一个setup方法\N{\fs12}Right? Where we have some kind of setup method.
Dialogue: 0,0:06:39.35,0:06:41.21,yin,,0,0,0,,方法名可以是setup或者其他的\N{\fs12}You can call it setup thing or whatever you want.
Dialogue: 0,0:06:41.43,0:06:43.21,yin,,0,0,0,,然后在awakeFromNib中调用它\N{\fs12}And then you call it from awakeFromNib
Dialogue: 0,0:06:43.31,0:06:47.70,yin,,0,0,0,,还要从UIView的指定初始化方法中调用它\N{\fs12}and then you also call it from UIView's designated initializer
Dialogue: 0,0:06:47.70,0:06:49.54,yin,,0,0,0,,指定初始化方法叫做initWithFrame\N{\fs12}which is called initWithFrame.
Dialogue: 0,0:06:49.98,0:06:52.54,yin,,0,0,0,,Frame框架指定了该视图\N{\fs12}And that frame specifies where this view is
Dialogue: 0,0:06:52.55,0:06:54.54,yin,,0,0,0,,在其父视图坐标系中的位置\N{\fs12}in its superview's coordinate system.
Dialogue: 0,0:06:54.70,0:06:56.85,yin,,0,0,0,,是该视图的位置信息\N{\fs12}It's the positioning of this view.
Dialogue: 0,0:06:57.46,0:07:00.41,yin,,0,0,0,,代码就是这个样子的\N{\fs12}Okay? So that's what the code would look like.
Dialogue: 0,0:07:00.43,0:07:01.00,yin,,0,0,0,,就像这样\N{\fs12}Just like that.
Dialogue: 0,0:07:01.11,0:07:02.87,yin,,0,0,0,,加上初始化代码\N{\fs12}Put your initialization codes inside.
Dialogue: 0,0:07:02.88,0:07:04.76,yin,,0,0,0,,我们会在示例中进行演示\N{\fs12}And we'll do that in the demo just so you see that.
Dialogue: 0,0:07:05.10,0:07:07.33,yin,,0,0,0,,在继续讲解UIView的\N{\fs12}Now before I can talk more about UIView
Dialogue: 0,0:07:07.34,0:07:09.22,yin,,0,0,0,,绘制和获取事件之前\N{\fs12}and drawing there and getting events,
Dialogue: 0,0:07:09.23,0:07:11.51,yin,,0,0,0,,我们需要先定义几个类型\N{\fs12}we got to define a few types here.
Dialogue: 0,0:07:11.64,0:07:13.03,yin,,0,0,0,,一个是CGFloat\N{\fs12}One is CGFloat.
Dialogue: 0,0:07:13.08,0:07:14.56,yin,,0,0,0,,它是一个浮点数\N{\fs12}It's a floating point number.
Dialogue: 0,0:07:14.97,0:07:17.48,yin,,0,0,0,,在屏幕上绘制图形 获取触控事件等\N{\fs12}All floating point numbers that have to do with
Dialogue: 0,0:07:17.49,0:07:20.10,yin,,0,0,0,,所用到的全部浮点数\N{\fs12}drawing on the screen or getting touch events or whatever
Dialogue: 0,0:07:20.38,0:07:21.58,yin,,0,0,0,,都是CGFloat\N{\fs12}are CGFloats.
Dialogue: 0,0:07:21.77,0:07:23.47,yin,,0,0,0,,它可能是一个double类型\N{\fs12}This might be a double.
Dialogue: 0,0:07:23.47,0:07:25.37,yin,,0,0,0,,可能只是一个普通的浮点数\N{\fs12}It might be just a regular floating point number.
Dialogue: 0,0:07:25.37,0:07:27.52,yin,,0,0,0,,可能是32位 64位\N{\fs12}It might be 32 bits, 64 bits.
Dialogue: 0,0:07:27.52,0:07:29.03,yin,,0,0,0,,我们不知道 也不在意\N{\fs12}You don't know and you don't care
Dialogue: 0,0:07:29.10,0:07:30.94,yin,,0,0,0,,但你始终需要使用CGFloat\N{\fs12}but you always have to use CGFloat.
Dialogue: 0,0:07:31.06,0:07:34.85,yin,,0,0,0,,不只是用CGFloat来指定屏幕上的位置等\N{\fs12}Not only using CGFloat to specify positions on screen and all the things
Dialogue: 0,0:07:35.01,0:07:37.97,yin,,0,0,0,,如果你要对屏幕上的数字\N{\fs12}but if you're going to be multiplying or adding numbers
Dialogue: 0,0:07:37.98,0:07:39.73,yin,,0,0,0,,做乘法或加法\N{\fs12}to things that are on screen
Dialogue: 0,0:07:39.90,0:07:42.61,yin,,0,0,0,,重新计算得到新值\N{\fs12}to recalculate new things, all--
Dialogue: 0,0:07:42.61,0:07:45.14,yin,,0,0,0,,这些都要用CGFloat\N{\fs12}you want to do all that in the CGFloat domain.
Dialogue: 0,0:07:45.15,0:07:45.98,yin,,0,0,0,,所以处理屏幕事件时\N{\fs12}So you're going to have a lot of
Dialogue: 0,0:07:46.02,0:07:48.91,yin,,0,0,0,,很多属性和局部变量\N{\fs12}properties and local variables that are CGFloats
Dialogue: 0,0:07:48.98,0:07:50.76,yin,,0,0,0,,都是CGFloat类型\N{\fs12}when you're doing screen stuff. Okay?
Dialogue: 0,0:07:51.37,0:07:53.85,yin,,0,0,0,,还有一个C结构体叫做CGPoint\N{\fs12}Then there's a c-struct called CGPoint.
Dialogue: 0,0:07:54.00,0:07:56.18,yin,,0,0,0,,其中有两个元素 x和y\N{\fs12}That has just got two elements in it. X and y.
Dialogue: 0,0:07:56.19,0:07:57.60,yin,,0,0,0,,分别代表X轴和Y轴的位置\N{\fs12}That's an X and Y position.
Dialogue: 0,0:07:57.82,0:07:59.70,yin,,0,0,0,,在绘制范围内\N{\fs12}Okay? In the drawing world.
Dialogue: 0,0:08:00.00,0:08:02.50,yin,,0,0,0,,还有一个结构体叫做CGSize\N{\fs12}And there's CGSize which is just a struct
Dialogue: 0,0:08:02.51,0:08:05.46,yin,,0,0,0,,包含宽度和高度 也都是CGFloat\N{\fs12}with width and height which are both CGFloats also.
Dialogue: 0,0:08:05.47,0:08:07.56,yin,,0,0,0,,指定了宽度和高度\N{\fs12}And that's just specifying a width and height.
Dialogue: 0,0:08:07.79,0:08:09.21,yin,,0,0,0,,还有CGRect\N{\fs12}And then there's CGRect
Dialogue: 0,0:08:09.32,0:08:13.39,yin,,0,0,0,,这个C结构体包含了另外两个CG结构体\N{\fs12}which is c-struct with those other two CG structs in them.
Dialogue: 0,0:08:13.40,0:08:14.65,yin,,0,0,0,,CGPoint和CGSize\N{\fs12}CGPoint and CGSize.
Dialogue: 0,0:08:14.65,0:08:16.56,yin,,0,0,0,,指定了一个矩形的原点\N{\fs12}That specifies an origin
Dialogue: 0,0:08:16.75,0:08:18.68,yin,,0,0,0,,以及宽度和高度\N{\fs12}and a width and height for a rectangle.
Dialogue: 0,0:08:18.94,0:08:20.35,yin,,0,0,0,,大家要知道这四个结构体\N{\fs12}Okay? So you've got to know these four.
Dialogue: 0,0:08:20.49,0:08:22.30,yin,,0,0,0,,当我们在屏幕上进行绘制时\N{\fs12}I'm going to refer these left, right and center
Dialogue: 0,0:08:22.37,0:08:23.65,yin,,0,0,0,,我会用到左 右 中间\N{\fs12}whenever we're drawing on screen,
Dialogue: 0,0:08:23.68,0:08:24.71,yin,,0,0,0,,说的就是这些结构体\N{\fs12}this is what we're talking about.
Dialogue: 0,0:08:25.70,0:08:29.08,yin,,0,0,0,,绘制或处理事件所用的视图坐标系中\N{\fs12}Okay? The origin of a views coordinate system
Dialogue: 0,0:08:29.09,0:08:32.80,yin,,0,0,0,,原点是左上角\N{\fs12}for drawing or for handling events is upper left.
Dialogue: 0,0:08:33.11,0:08:33.98,yin,,0,0,0,,不是左下角\N{\fs12}Now lower left.
Dialogue: 0,0:08:34.00,0:08:35.59,yin,,0,0,0,,与笛卡儿坐标系不同\N{\fs12}Not like Cartesian coordinates. Okay?
Dialogue: 0,0:08:35.61,0:08:38.26,yin,,0,0,0,,这里是从左上角开始绘制\N{\fs12}This is drawing from the upper left.
Dialogue: 0,0:08:38.27,0:08:41.28,yin,,0,0,0,,所以Y值越大 屏幕上的位置越靠下\N{\fs12}So positive Y values are down the screen.
Dialogue: 0,0:08:42.02,0:08:45.84,yin,,0,0,0,,大家可以看到 我在那里放的那个点是(400,35)\N{\fs12}Okay? So you can see I put that point up there 400,35.
Dialogue: 0,0:08:45.84,0:08:50.05,yin,,0,0,0,,就是X和Y轴的值 X是向右400\N{\fs12}That's X and Y. X is 400 way over to the right
Dialogue: 0,0:08:50.33,0:08:52.71,yin,,0,0,0,,Y是正数35\N{\fs12}and 35 is Y and positive
Dialogue: 0,0:08:52.72,0:08:55.79,yin,,0,0,0,,所以是从左上角原点向下\N{\fs12}so it's down from that origin on the upper left. Okay?
Dialogue: 0,0:08:56.94,0:09:01.18,yin,,0,0,0,,绘制的单位都是点 而非像素点\N{\fs12}The units in all this drawing are points, not pixels.
Dialogue: 0,0:09:01.85,0:09:05.05,yin,,0,0,0,,原因可能大家已经明白了\N{\fs12}Okay? Probably you already understand why this is，
Dialogue: 0,0:09:05.06,0:09:07.89,yin,,0,0,0,,因为有些设备的像素很高\N{\fs12}because some devices have lots of pixels.
Dialogue: 0,0:09:07.90,0:09:10.79,yin,,0,0,0,,像素点排列非常密集\N{\fs12}Right? I mean it's very high density pixeled
Dialogue: 0,0:09:10.79,0:09:12.05,yin,,0,0,0,,比如Retina显示屏\N{\fs12}like these retina displays.
Dialogue: 0,0:09:12.24,0:09:15.67,yin,,0,0,0,,而有些设备 比如iPad和旧款的iPhone\N{\fs12}Other ones like some of the iPads, older iPhones,
Dialogue: 0,0:09:15.96,0:09:18.19,yin,,0,0,0,,它们的像素点没有那么多和密集\N{\fs12}they don't have as many-- they're not as dense of pixels.
Dialogue: 0,0:09:18.20,0:09:21.19,yin,,0,0,0,,如果不用点来作为单位 而是用像素点\N{\fs12}Well if we didn't use points, if we used pixels
Dialogue: 0,0:09:21.20,0:09:23.53,yin,,0,0,0,,那么像素点小的时候\N{\fs12}then things we drew would be really small
Dialogue: 0,0:09:23.54,0:09:24.55,yin,,0,0,0,,我们绘制的内容就会很小\N{\fs12}if the pixels were small
Dialogue: 0,0:09:24.56,0:09:25.98,yin,,0,0,0,,如果像素点大 绘制的内容就会很大\N{\fs12}and really big if the pixels were big.
Dialogue: 0,0:09:25.99,0:09:28.66,yin,,0,0,0,,所以我们简化一下 使用点来作为绘制单位\N{\fs12}So we abstract that away by using points.
Dialogue: 0,0:09:28.82,0:09:31.95,yin,,0,0,0,,要知道你的视图所在的显示器上\N{\fs12}Okay? How many pixels per point are
Dialogue: 0,0:09:31.96,0:09:33.84,yin,,0,0,0,,每个点中有多少像素点\N{\fs12}on the display that your view is in.
Dialogue: 0,0:09:33.92,0:09:37.13,yin,,0,0,0,,可以通过UIView的这个属性\N{\fs12}You can find out by using this UIView property
Dialogue: 0,0:09:37.14,0:09:38.41,yin,,0,0,0,,contentScaleFactor来获得\N{\fs12}contentScaleFactor.
Dialogue: 0,0:09:38.42,0:09:40.92,yin,,0,0,0,,如果是Retina显示屏 返回值为2\N{\fs12}So it returned two for example on a retina display
Dialogue: 0,0:09:40.93,0:09:43.18,yin,,0,0,0,,因为Retina显示屏上每点包括两个像素点\N{\fs12}because there are two pixels per point on a retina display.
Dialogue: 0,0:09:43.19,0:09:46.23,yin,,0,0,0,,而在非Retina屏的iPad上则返回1\N{\fs12}One on a non-retina iPad for example.
Dialogue: 0,0:09:48.38,0:09:50.87,yin,,0,0,0,,在我们这门课上 这个学期中\N{\fs12}You know, probably not going to need to use that property
Dialogue: 0,0:09:50.87,0:09:52.50,yin,,0,0,0,,我们可能用不到这个属性\N{\fs12}in this class, this quarter.
Dialogue: 0,0:09:52.71,0:09:54.27,yin,,0,0,0,,上个学期我们用到了它\N{\fs12}Previous quarter we played around with it,
Dialogue: 0,0:09:54.28,0:09:55.00,yin,,0,0,0,,但是这个学期不需要了\N{\fs12}but not this quarter.
Dialogue: 0,0:09:55.78,0:09:57.74,yin,,0,0,0,,更重要的是 这些属性\N{\fs12}But more importantly, there are these properties
Dialogue: 0,0:09:57.75,0:10:02.56,yin,,0,0,0,,说明了绘制系统的位置和范围\N{\fs12}that talk about the position and extent of your drawing system.
Dialogue: 0,0:10:02.72,0:10:03.05,yin,,0,0,0,,明白吗\N{\fs12}Okay?
Dialogue: 0,0:10:03.26,0:10:04.97,yin,,0,0,0,,理解这些属性间的不同\N{\fs12}It's really important to understand the difference
Dialogue: 0,0:10:04.98,0:10:06.13,yin,,0,0,0,,是非常重要的\N{\fs12}between these properties.
Dialogue: 0,0:10:06.42,0:10:09.32,yin,,0,0,0,,首先是这个CGRect属性bounds\N{\fs12}First you have this CGRect property bounds.
Dialogue: 0,0:10:09.60,0:10:13.99,yin,,0,0,0,,这是你的坐标系中绘制区域的原点\N{\fs12}That is the origin and width and height of the drawing area
Dialogue: 0,0:10:14.20,0:10:16.02,yin,,0,0,0,,以及宽度和高度\N{\fs12}in your own coordinate system.
Dialogue: 0,0:10:17.05,0:10:18.08,yin,,0,0,0,,你自己的坐标系\N{\fs12}Your own coordinate system.
Dialogue: 0,0:10:18.08,0:10:21.06,yin,,0,0,0,,在其中绘制和处理触控事件\N{\fs12}A system you are drawing in and handling touch events in.
Dialogue: 0,0:10:21.34,0:10:24.93,yin,,0,0,0,,底下的CGRect frame\N{\fs12}Okay? CGRect frame at the bottom there,
Dialogue: 0,0:10:25.21,0:10:28.88,yin,,0,0,0,,指的是你的父视图坐标系中的一个矩形\N{\fs12}that is a rectangle that completely contains you
Dialogue: 0,0:10:29.01,0:10:30.88,yin,,0,0,0,,这个矩形完全包含了你的绘制区域\N{\fs12}in your superview's coordinate system.
Dialogue: 0,0:10:31.61,0:10:33.47,yin,,0,0,0,,可以看到它是如何定位你的\N{\fs12}So you can see how that positions you.
Dialogue: 0,0:10:33.85,0:10:35.87,yin,,0,0,0,,因为它在你的父视图坐标系中\N{\fs12}Right? Because that's in your superview's coordinate system.
Dialogue: 0,0:10:35.87,0:10:37.06,yin,,0,0,0,,也就是你所在的位置\N{\fs12}That's where you are.
Dialogue: 0,0:10:37.45,0:10:40.40,yin,,0,0,0,,center代表你在父视图坐标系中\N{\fs12}Okay? Center is just the center of where you are
Dialogue: 0,0:10:40.59,0:10:42.18,yin,,0,0,0,,所在位置的中心\N{\fs12}in your superview's coordinate system.
Dialogue: 0,0:10:42.21,0:10:44.37,yin,,0,0,0,,没有属性能够得到\N{\fs12}There's no property to get your center
Dialogue: 0,0:10:44.38,0:10:45.50,yin,,0,0,0,,你在自己的坐标系中的中心位置\N{\fs12}in your own coordinate system.
Dialogue: 0,0:10:45.50,0:10:46.71,yin,,0,0,0,,只要得到bounds\N{\fs12}You just take your bounds out
Dialogue: 0,0:10:46.71,0:10:48.71,yin,,0,0,0,,宽度和高度分别除以二\N{\fs12}width divide it by two and height divide it by two
Dialogue: 0,0:10:48.71,0:10:49.98,yin,,0,0,0,,就可以得到中心位置了\N{\fs12}and boom you're in the middle.
Dialogue: 0,0:10:50.53,0:10:53.55,yin,,0,0,0,,你可能会认为frame和bounds\N{\fs12}Okay? Now you might think frame and bounds
Dialogue: 0,0:10:53.56,0:10:55.37,yin,,0,0,0,,是完全一样的\N{\fs12}are going to be exactly the same,
Dialogue: 0,0:10:55.39,0:10:57.37,yin,,0,0,0,,除了一点不同\N{\fs12}except for that the frame is going to be
Dialogue: 0,0:10:57.38,0:10:58.71,yin,,0,0,0,,frame是在父视图坐标系中的\N{\fs12}in the superview's coordinate system,
Dialogue: 0,0:10:58.71,0:11:00.09,yin,,0,0,0,,所以二者的原点可能不同\N{\fs12}so the origins might be different.
Dialogue: 0,0:11:00.29,0:11:01.24,yin,,0,0,0,,但并不是这样的\N{\fs12}But that's not true.
Dialogue: 0,0:11:01.37,0:11:05.51,yin,,0,0,0,,因为视图可以旋转\N{\fs12}Okay? And the reason for that is that views can be rotated.
Dialogue: 0,0:11:06.39,0:11:09.86,yin,,0,0,0,,视图旋转后 可以看到\N{\fs12}Okay? And if a view is rotated you can see that
Dialogue: 0,0:11:09.86,0:11:12.62,yin,,0,0,0,,包含它的那个矩形会变大很多\N{\fs12}the rectangle that contains it might be much bigger.
Dialogue: 0,0:11:13.04,0:11:15.61,yin,,0,0,0,,因为要包含的是一个菱形\N{\fs12}Right? Because it's a diamond shape that it has to contain.
Dialogue: 0,0:11:16.44,0:11:19.80,yin,,0,0,0,,幻灯片中这里还有些具体数据\N{\fs12}Okay? So there's details on here in this slide.
Dialogue: 0,0:11:19.80,0:11:21.03,yin,,0,0,0,,大家有空可以看一下\N{\fs12}You can look at them at your leisure,
Dialogue: 0,0:11:21.04,0:11:22.74,yin,,0,0,0,,但是至少要理解\N{\fs12}but bottom line is understand
Dialogue: 0,0:11:22.74,0:11:25.15,yin,,0,0,0,,frame是在你的父视图坐标系中\N{\fs12}that frame is a rectangle containing you
Dialogue: 0,0:11:25.17,0:11:26.71,yin,,0,0,0,,包含你的一个矩形\N{\fs12}in your superview's coordinate system,
Dialogue: 0,0:11:26.90,0:11:29.97,yin,,0,0,0,,bounds是你在自己的视图中\N{\fs12}bounds is the rectangle you use to draw
Dialogue: 0,0:11:29.98,0:11:32.43,yin,,0,0,0,,用自己的代码进行绘制时使用的矩形\N{\fs12}when you're drawing in your own code in your view.
Dialogue: 0,0:11:32.54,0:11:33.57,yin,,0,0,0,,是在你自己的坐标系中\N{\fs12}It's your coordinate system.
Dialogue: 0,0:11:33.71,0:11:34.01,yin,,0,0,0,,请讲\N{\fs12}Yeah?
Dialogue: 0,0:11:34.34,0:11:37.95,yin,,0,0,0,,bounds的原点何时不为(0,0)呢\N{\fs12}When would the origins of bounds not be zero zero?
Dialogue: 0,0:11:38.27,0:11:40.47,yin,,0,0,0,,bounds的原点什么时候不是(0,0)呢\N{\fs12}When did the origins of bounds not be zero zero?
Dialogue: 0,0:11:40.47,0:11:41.67,yin,,0,0,0,,非常棒的问题\N{\fs12}That's an excellent question.
Dialogue: 0,0:11:41.75,0:11:43.05,yin,,0,0,0,,因为是你自己的坐标系\N{\fs12}The origin of the bounds,
Dialogue: 0,0:11:43.05,0:11:44.69,yin,,0,0,0,,所以bounds的原点\N{\fs12}since it's your own coordinate system
Dialogue: 0,0:11:44.70,0:11:46.47,yin,,0,0,0,,取决于你的解释\N{\fs12}is up to your own interpretation.
Dialogue: 0,0:11:46.95,0:11:50.11,yin,,0,0,0,,比如滚动视图中的原点\N{\fs12}So for example scroll view uses the origin to say
Dialogue: 0,0:11:50.11,0:11:52.93,yin,,0,0,0,,代表滚动目标的位置\N{\fs12}where am I looking in the thing I'm scrolling on?
Dialogue: 0,0:11:53.09,0:11:54.95,yin,,0,0,0,,它就是这样定义原点的\N{\fs12}That's just the way it defines origin.
Dialogue: 0,0:11:55.14,0:11:58.24,yin,,0,0,0,,你可以根据需要 定义原点的含义\N{\fs12}You can define what you want origin to mean.
Dialogue: 0,0:11:58.53,0:12:01.00,yin,,0,0,0,,因为要求你进行绘制\N{\fs12}Okay? Because you're going to be asked to draw
Dialogue: 0,0:12:01.01,0:12:02.60,yin,,0,0,0,,而你知道自己的坐标系\N{\fs12}and you know your own coordinate systems.
Dialogue: 0,0:12:02.60,0:12:04.92,yin,,0,0,0,,无论要求你绘制什么 你都要绘制出来\N{\fs12}You're gonna draw whatever you're asked to draw.
Dialogue: 0,0:12:05.31,0:12:06.44,yin,,0,0,0,,所以基本取决于你\N{\fs12}So it's kind of up to you.
Dialogue: 0,0:12:06.45,0:12:09.04,yin,,0,0,0,,99%的情况下 原点都是(0,0)\N{\fs12}99% of the time, your origin is zero zero.
Dialogue: 0,0:12:09.21,0:12:10.55,yin,,0,0,0,,因为它对你来说没有什么意义\N{\fs12}Because it doesn't mean anything for you.
Dialogue: 0,0:12:10.55,0:12:12.03,yin,,0,0,0,,宽度和高度才是重要的\N{\fs12}It's just the width and height that matter.
Dialogue: 0,0:12:12.16,0:12:13.19,yin,,0,0,0,,这个问题非常好\N{\fs12}But that's a great question.
Dialogue: 0,0:12:14.18,0:12:18.11,yin,,0,0,0,,大家可以再看看幻灯片 获取细节内容\N{\fs12}Okay? So again, you can look at the slide for more detail
Dialogue: 0,0:12:18.11,0:12:20.23,yin,,0,0,0,,但是一定要理解frame和bounds\N{\fs12}but frame and bounds just make sure you understand that.
Dialogue: 0,0:12:21.64,0:12:25.16,yin,,0,0,0,,创建视图的方法\N{\fs12}So most often you create views
Dialogue: 0,0:12:25.17,0:12:27.36,yin,,0,0,0,,通常是从Xcode的面板中拖出\N{\fs12}by dragging them out of the palette in Xcode
Dialogue: 0,0:12:27.37,0:12:29.45,yin,,0,0,0,,方法和拖出标签\N{\fs12}and that's like when you're dragging out labels,
Dialogue: 0,0:12:29.47,0:12:32.14,yin,,0,0,0,,按钮 滚动视图和文本视图一样\N{\fs12}and buttons, and scroll views, and text views.
Dialogue: 0,0:12:32.14,0:12:33.10,yin,,0,0,0,,它们都是视图\N{\fs12}Those are all views.
Dialogue: 0,0:12:33.10,0:12:34.56,yin,,0,0,0,,直接拖出它们就可以进行创建\N{\fs12}So you just create them by dragging out
Dialogue: 0,0:12:34.65,0:12:37.49,yin,,0,0,0,,甚至还可以拖出你的自定义视图\N{\fs12}and you could even drag out your own custom views.
Dialogue: 0,0:12:37.50,0:12:40.65,yin,,0,0,0,,但是方法是先拖出一个通用视图\N{\fs12}But the way you do that is you drag out a generic view,
Dialogue: 0,0:12:40.79,0:12:44.06,yin,,0,0,0,,然后转到标识符检查器 修改它的类\N{\fs12}and then go to the identity inspector and change its class.
Dialogue: 0,0:12:44.07,0:12:46.99,yin,,0,0,0,,和拖出视图控制器的方法一样\N{\fs12}Exactly like how we drag out a view controller.
Dialogue: 0,0:12:47.11,0:12:50.35,yin,,0,0,0,,我们需要把它的类修改为某个自定义类\N{\fs12}We have to go change its class to be one of our custom classes. Right?
Dialogue: 0,0:12:50.49,0:12:53.46,yin,,0,0,0,,因为Xcode显然不知道我们的自定义类\N{\fs12}Because Xcode obviously doesn't know our custom classes.
Dialogue: 0,0:12:53.73,0:12:56.05,yin,,0,0,0,,至少在storyboard中运行时\N{\fs12}At least doesn't know in the kind of runtime way
Dialogue: 0,0:12:56.06,0:12:57.40,yin,,0,0,0,,它不知道\N{\fs12}that's happening in the storyboard,
Dialogue: 0,0:12:57.77,0:12:59.34,yin,,0,0,0,,所以我们需要手动设置\N{\fs12}so we have to set the things.
Dialogue: 0,0:12:59.35,0:13:02.05,yin,,0,0,0,,和设置视图控制器是完全一样的\N{\fs12}It works exactly the same as setting view controllers.
Dialogue: 0,0:13:03.53,0:13:04.85,yin,,0,0,0,,在代码中创建视图\N{\fs12}Creating a view in code,
Dialogue: 0,0:13:04.85,0:13:07.62,yin,,0,0,0,,也就是说不直接将其拖至storyboard中\N{\fs12}in other words not dragging it in to a storyboard.
Dialogue: 0,0:13:07.63,0:13:10.42,yin,,0,0,0,,可以直接用alloc/initWithFrame 或者alloc/init\N{\fs12}You just use alloc and initWithFrame or just alloc and init.
Dialogue: 0,0:13:10.44,0:13:11.63,yin,,0,0,0,,如果用alloc/init\N{\fs12}It you do alloc and init,
Dialogue: 0,0:13:11.67,0:13:15.32,yin,,0,0,0,,等同于alloc initWithFrame: CGRectZero\N{\fs12}that's the same as alloc and initWithFrame CGRectZero,
Dialogue: 0,0:13:15.33,0:13:17.13,yin,,0,0,0,,CGRectZero是一个原点为0\N{\fs12}which is a rectangle with origin zero,
Dialogue: 0,0:13:17.24,0:13:19.56,yin,,0,0,0,,宽度和高度为0的矩形\N{\fs12}width and height of zero. Okay?
Dialogue: 0,0:13:20.03,0:13:21.30,yin,,0,0,0,,可以任选其一\N{\fs12}So you can do either one.
Dialogue: 0,0:13:21.41,0:13:22.72,yin,,0,0,0,,如果要用alloc/init\N{\fs12}If you do alloc and init
Dialogue: 0,0:13:23.20,0:13:25.88,yin,,0,0,0,,最好为frame赋值\N{\fs12}presumably you better set the frame to something
Dialogue: 0,0:13:25.89,0:13:27.19,yin,,0,0,0,,这样当它被放入父视图中时\N{\fs12}so that it knows where to be
Dialogue: 0,0:13:27.20,0:13:29.32,yin,,0,0,0,,才能知道自己要出现在哪里\N{\fs12}when it's put into its superview.
Dialogue: 0,0:13:31.31,0:13:34.56,yin,,0,0,0,,这个示例是用代码创建UILabel\N{\fs12}So here's an example of creating a UILabel in code.
Dialogue: 0,0:13:34.71,0:13:36.94,yin,,0,0,0,,我这里用的是UILabel initWithFrame\N{\fs12}You see I said UILabel initWithFrame.
Dialogue: 0,0:13:36.96,0:13:38.67,yin,,0,0,0,,我向它传递了一个矩形\N{\fs12}I gave it a rectangle.
Dialogue: 0,0:13:38.67,0:13:40.56,yin,,0,0,0,,是在父视图坐标系中的\N{\fs12}That's in the superview coordinate system.
Dialogue: 0,0:13:40.77,0:13:44.70,yin,,0,0,0,,然后我用addSubview将那个标签添加为self.view的子视图\N{\fs12}And then I addSubview that label to self.view
Dialogue: 0,0:13:44.71,0:13:47.39,yin,,0,0,0,,self.view是我的视图控制器中的顶级视图\N{\fs12}which is that top level view in my view controller.
Dialogue: 0,0:13:47.52,0:13:51.02,yin,,0,0,0,,所以在我的MVC视图中 它显示在(20,20)的位置\N{\fs12}And so it ended up at 20, 20, 20 X and 20 Y,
Dialogue: 0,0:13:51.03,0:13:56.97,yin,,0,0,0,,宽度为50 高度为30\N{\fs12}and its 50 wide and 30 high in my MVC's view. Right?
Dialogue: 0,0:13:57.63,0:14:00.03,yin,,0,0,0,,你可能不会这样创建标签\N{\fs12}Now you probably wouldn't ever create a label like this
Dialogue: 0,0:14:00.04,0:14:00.92,yin,,0,0,0,,因为可以直接拖出标签\N{\fs12}because you drag them out.
Dialogue: 0,0:14:00.95,0:14:04.07,yin,,0,0,0,,但是你可能会这样创建自己的自定义视图\N{\fs12}But you might create your own custom view like this. Right?
Dialogue: 0,0:14:05.76,0:14:09.12,yin,,0,0,0,,什么时候需要创建自定义视图呢\N{\fs12}Okay, so when do I want to create my own custom views?
Dialogue: 0,0:14:09.17,0:14:11.15,yin,,0,0,0,,显然是当我想绘制一些自定义内容的时候\N{\fs12}Obviously, when I want to draw something custom.
Dialogue: 0,0:14:11.15,0:14:13.54,yin,,0,0,0,,按钮或标签无法绘制出的内容\N{\fs12}Not something that a button or a label can draw for me.
Dialogue: 0,0:14:13.72,0:14:16.20,yin,,0,0,0,,或者是当我要处理特殊触控事件时\N{\fs12}Or when I want to handle special touch events.
Dialogue: 0,0:14:16.26,0:14:18.29,yin,,0,0,0,,滑动 捏合之类的\N{\fs12}Swipes, or pinches, or something like that.
Dialogue: 0,0:14:19.14,0:14:21.42,yin,,0,0,0,,我们先介绍绘制部分\N{\fs12}So the drawing side of this which we'll talk about first
Dialogue: 0,0:14:21.43,0:14:22.52,yin,,0,0,0,,这部分非常简单\N{\fs12}is really easy.
Dialogue: 0,0:14:22.71,0:14:26.09,yin,,0,0,0,,UIView中有一个方法叫做drawRect\N{\fs12}There's one method in UIView called drawRect
Dialogue: 0,0:14:26.30,0:14:29.75,yin,,0,0,0,,你只要实现这个方法\N{\fs12}and all you have to do is implement that method
Dialogue: 0,0:14:29.95,0:14:31.08,yin,,0,0,0,,就可以绘制想要的内容\N{\fs12}to draw what you want.
Dialogue: 0,0:14:31.43,0:14:32.72,yin,,0,0,0,,只要这一个方法就够了\N{\fs12}Okay? One method, that's it.
Dialogue: 0,0:14:33.33,0:14:34.97,yin,,0,0,0,,实现这个方法来绘制想要的内容\N{\fs12}Implement this method to draw what you want.
Dialogue: 0,0:14:35.13,0:14:36.86,yin,,0,0,0,,它有一个参数\N{\fs12}Now it has that argument there,
Dialogue: 0,0:14:36.96,0:14:38.65,yin,,0,0,0,,是一项性能优化\N{\fs12}that's a performance optimization.
Dialogue: 0,0:14:39.23,0:14:41.22,yin,,0,0,0,,代表一个矩形说\N{\fs12}That's basically a rectangle that says,
Dialogue: 0,0:14:41.33,0:14:44.89,yin,,0,0,0,,你绘制吧 但是我只需要坐标系中\N{\fs12}well, please draw yourself but really I only need the stuff
Dialogue: 0,0:14:44.90,0:14:47.20,yin,,0,0,0,,这个矩形范围内的内容\N{\fs12}that's in the rectangle in your coordinate system.
Dialogue: 0,0:14:47.45,0:14:48.84,yin,,0,0,0,,但如果你不想管这个矩形\N{\fs12}But if you want to ignore this rectangle
Dialogue: 0,0:14:48.85,0:14:50.95,yin,,0,0,0,,想随意绘制 我觉得没问题\N{\fs12}and draw all over yourself, that's fine by me.
Dialogue: 0,0:14:51.17,0:14:53.17,yin,,0,0,0,,它只是为了优化性能\N{\fs12}Okay? So it's purely performance thing.
Dialogue: 0,0:14:53.29,0:14:55.42,yin,,0,0,0,,对于某些视图 只考虑这个矩形是有意义的\N{\fs12}Some views it'll make sense to look at that rectangle
Dialogue: 0,0:14:55.42,0:14:56.57,yin,,0,0,0,,会非常有效率\N{\fs12}and be really efficient.
Dialogue: 0,0:14:56.84,0:14:59.29,yin,,0,0,0,,几年前 这门课布置过一个作业\N{\fs12}Like we had an assignment a couple years ago in this class
Dialogue: 0,0:14:59.29,0:15:00.71,yin,,0,0,0,,需要绘制一条曲线\N{\fs12}where you're drawing a graph.
Dialogue: 0,0:15:00.87,0:15:01.91,yin,,0,0,0,,如果你是在绘制曲线\N{\fs12}Well, if you're drawing a graph
Dialogue: 0,0:15:01.93,0:15:03.36,yin,,0,0,0,,需要计算每一个点\N{\fs12}and you're having to calculate every point
Dialogue: 0,0:15:03.39,0:15:05.34,yin,,0,0,0,,如果只需要计算曲线某一段上的点\N{\fs12}it's kind of nice to only have to calculate the points
Dialogue: 0,0:15:05.36,0:15:06.49,yin,,0,0,0,,而不是每次都绘制全部曲线\N{\fs12}in some part of the graph
Dialogue: 0,0:15:06.52,0:15:07.95,yin,,0,0,0,,是很好的\N{\fs12}instead of drawing the whole thing every time.
Dialogue: 0,0:15:08.22,0:15:09.85,yin,,0,0,0,,但是如果你要绘制的是扑克牌\N{\fs12}But if you're drawing a playing card,
Dialogue: 0,0:15:10.19,0:15:11.98,yin,,0,0,0,,只需要很少的资源\N{\fs12}it's so light weight to draw it,
Dialogue: 0,0:15:11.99,0:15:13.21,yin,,0,0,0,,可以全部都绘制出来\N{\fs12}so you can just draw all the parts of it.
Dialogue: 0,0:15:13.21,0:15:14.82,yin,,0,0,0,,不需要使用这个矩形\N{\fs12}You don't have to use the rectangle.
Dialogue: 0,0:15:15.20,0:15:17.01,yin,,0,0,0,,如果在矩形外面绘制\N{\fs12}If you draw outside of the rectangle
Dialogue: 0,0:15:17.03,0:15:18.28,yin,,0,0,0,,会显示出来吗\N{\fs12}does that stuff show up?
Dialogue: 0,0:15:18.53,0:15:20.21,yin,,0,0,0,,问题是 如果在矩形外面绘制\N{\fs12}The question is if you draw outside the rectangle
Dialogue: 0,0:15:20.21,0:15:20.99,yin,,0,0,0,,会显示出来吗\N{\fs12}does that show up?
Dialogue: 0,0:15:21.48,0:15:24.38,yin,,0,0,0,,记住 所有绘制内容都会显示出来\N{\fs12}Remember that everything you draw shows up
Dialogue: 0,0:15:24.51,0:15:26.71,yin,,0,0,0,,除非用了之前讲到的裁剪\N{\fs12}unless you have one of these clipping things I talked about
Dialogue: 0,0:15:26.72,0:15:28.99,yin,,0,0,0,,父视图对你进行了裁剪\N{\fs12}where your superview is clipping you
Dialogue: 0,0:15:29.00,0:15:31.80,yin,,0,0,0,,或者绘制的一部分是裁剪矩形\N{\fs12}or you have a clip rect as part of what you draw.
Dialogue: 0,0:15:32.05,0:15:34.91,yin,,0,0,0,,答案是 这个矩形和裁剪毫无关系\N{\fs12}So the answer is that rectangle has nothing to do with clipping.
Dialogue: 0,0:15:35.85,0:15:38.65,yin,,0,0,0,,无论这个矩形是什么\N{\fs12}Okay? No matter what that rectangle is,
Dialogue: 0,0:15:39.15,0:15:40.90,yin,,0,0,0,,是否裁剪都是不受影响的\N{\fs12}clipping or not is unaffected.
Dialogue: 0,0:15:41.45,0:15:42.43,yin,,0,0,0,,只是为了性能优化\N{\fs12}It's purely performance--
Dialogue: 0,0:15:42.45,0:15:44.59,yin,,0,0,0,,提示你什么内容需要重新绘制\N{\fs12}giving you a hint of what needs to be redrawn.
Dialogue: 0,0:15:44.84,0:15:45.51,yin,,0,0,0,,就是这样\N{\fs12}That's all it is.
Dialogue: 0,0:15:45.98,0:15:49.90,yin,,0,0,0,,非常重要的一点是 绝不要调用drawRect\N{\fs12}So really important, never call drawRect.
Dialogue: 0,0:15:49.91,0:15:52.02,yin,,0,0,0,,如果你在作业中调用了drawRect\N{\fs12}If you called drawRect in a homework assignment in this class
Dialogue: 0,0:15:52.03,0:15:53.34,yin,,0,0,0,,就等着挨批吧\N{\fs12}you are going to get dinged.
Dialogue: 0,0:15:53.40,0:15:56.05,yin,,0,0,0,,因为我在这里用红色字体写了 绝对不要\N{\fs12}Because I'm putting it in red, never red.
Dialogue: 0,0:15:56.26,0:15:58.38,yin,,0,0,0,,绝对不要调用drawRect\N{\fs12}And I'm telling you don't ever call drawRect.
Dialogue: 0,0:15:58.41,0:16:00.56,yin,,0,0,0,,drawRect是由系统来调用的\N{\fs12}DrawRect is for the system to call.
Dialogue: 0,0:16:00.72,0:16:03.43,yin,,0,0,0,,如果你想要重绘视图\N{\fs12}Okay? If you want your view redrawn
Dialogue: 0,0:16:03.57,0:16:05.98,yin,,0,0,0,,就调用setNeedsDisplay\N{\fs12}you call the method setNeedsDisplay.
Dialogue: 0,0:16:06.48,0:16:09.57,yin,,0,0,0,,它会告诉系统 这个视图需要被重绘\N{\fs12}That tells the system this view needs to be redrawn,
Dialogue: 0,0:16:10.02,0:16:11.82,yin,,0,0,0,,然后系统会在合适的时间\N{\fs12}and then the system will call drawRect
Dialogue: 0,0:16:11.82,0:16:13.24,yin,,0,0,0,,调用drawRect\N{\fs12}at an appropriate time.
Dialogue: 0,0:16:13.59,0:16:16.04,yin,,0,0,0,,系统知道在什么时间\N{\fs12}Okay? The system knows when it's an appropriate time
Dialogue: 0,0:16:16.29,0:16:19.29,yin,,0,0,0,,调用drawRect 更新屏外缓冲器\N{\fs12}to call drawRect, update offscreen buffers,
Dialogue: 0,0:16:19.31,0:16:21.31,yin,,0,0,0,,完成全部所需操作\N{\fs12}whatever the heck it has to do.
Dialogue: 0,0:16:21.52,0:16:22.73,yin,,0,0,0,,它来负责\N{\fs12}It's in control of that.
Dialogue: 0,0:16:22.94,0:16:23.95,yin,,0,0,0,,不要自己调用drawRect\N{\fs12}Don't ever call drawRect.
Dialogue: 0,0:16:23.97,0:16:26.28,yin,,0,0,0,,调用drawRect是不会起作用的\N{\fs12}It just will not work to call drawRect. Okay?
Dialogue: 0,0:16:27.48,0:16:28.57,yin,,0,0,0,,要调用setNeedsDisplay\N{\fs12}SetNeedsDisplay.
Dialogue: 0,0:16:28.64,0:16:30.09,yin,,0,0,0,,你可以调用setNeedsDisplayInRect\N{\fs12}And you can do setNeedsDisplayInRect,
Dialogue: 0,0:16:30.11,0:16:32.57,yin,,0,0,0,,传给它那个优化矩形\N{\fs12}that's giving the little optimization rect. Okay?
Dialogue: 0,0:16:32.88,0:16:35.68,yin,,0,0,0,,要调用setNeedsDisplay来实现\N{\fs12}But setNeedsDisplay is how you do that. Okay?
Dialogue: 0,0:16:38.23,0:16:40.99,yin,,0,0,0,,那么如何实现drawRect呢\N{\fs12}All right so, how do I implement this drawRect thing?
Dialogue: 0,0:16:41.23,0:16:42.39,yin,,0,0,0,,我有这个drawRect方法\N{\fs12}Okay, I got this drawRect method.
Dialogue: 0,0:16:42.39,0:16:43.75,yin,,0,0,0,,想要绘制一些内容\N{\fs12}I want to draw something.
Dialogue: 0,0:16:43.75,0:16:46.59,yin,,0,0,0,,方法是使用这个Quartz库\N{\fs12}Well, the answer is you use this library, the Quartz library
Dialogue: 0,0:16:46.59,0:16:48.21,yin,,0,0,0,,叫做Core Graphics\N{\fs12}that's called Core Graphics.
Dialogue: 0,0:16:48.70,0:16:49.81,yin,,0,0,0,,Core Graphics\N{\fs12}Core Graphics.
Dialogue: 0,0:16:50.26,0:16:51.99,yin,,0,0,0,,其中有很多C函数\N{\fs12}It has a ton of C functions
Dialogue: 0,0:16:52.00,0:16:54.21,yin,,0,0,0,,函数名以Core Graphics的缩写CG开头\N{\fs12}that all start with CG, Core Graphics.
Dialogue: 0,0:16:55.09,0:16:57.25,yin,,0,0,0,,几乎全部都以context上下文作为第一个参数\N{\fs12}They almost all take in context as the first argument.
Dialogue: 0,0:16:57.25,0:16:58.23,yin,,0,0,0,,我们会讲到的\N{\fs12}We'll talk about that.
Dialogue: 0,0:16:58.46,0:17:02.02,yin,,0,0,0,,还可以用这个类 UIBezierPath\N{\fs12}Or you can use this nice class called the UIBezierPath.
Dialogue: 0,0:17:02.26,0:17:05.90,yin,,0,0,0,,UIBezierPath可以将各种复杂形状\N{\fs12}UIBezierPath let's you build all these complicated shapes
Dialogue: 0,0:17:06.12,0:17:07.31,yin,,0,0,0,,组成一个大的路径\N{\fs12}into a big path,
Dialogue: 0,0:17:07.32,0:17:09.68,yin,,0,0,0,,然后你可以在屏幕上对其进行描边或填充\N{\fs12}and then you can stroke it or fill it on screen.
Dialogue: 0,0:17:10.39,0:17:11.94,yin,,0,0,0,,我们详细讲一下\N{\fs12}Okay, so let's look into these.
Dialogue: 0,0:17:12.69,0:17:14.50,yin,,0,0,0,,想要理解这些内容 我们需要先理解一下\N{\fs12}To understand these we need to understand a little bit
Dialogue: 0,0:17:14.51,0:17:16.44,yin,,0,0,0,,Core Graphics的工作思路\N{\fs12}about how Core Graphics thinks
Dialogue: 0,0:17:16.60,0:17:18.94,yin,,0,0,0,,它是按照下面四步进行的\N{\fs12}and it thinks in the following four step process.
Dialogue: 0,0:17:19.12,0:17:21.08,yin,,0,0,0,,你需要有一个绘制的上下文\N{\fs12}You got to have a context to draw in.
Dialogue: 0,0:17:21.85,0:17:24.99,yin,,0,0,0,,你需要创建路径 三角形 正方形\N{\fs12}You got to create paths: triangle, squares, whatever,
Dialogue: 0,0:17:24.99,0:17:26.92,yin,,0,0,0,,圆角矩形等等\N{\fs12}rounded rect, whatever it might be.
Dialogue: 0,0:17:27.21,0:17:30.57,yin,,0,0,0,,然后设置你想要的颜色 字体\N{\fs12}Then you set the colors and the fonts you want to use,
Dialogue: 0,0:17:30.57,0:17:32.37,yin,,0,0,0,,线宽等等\N{\fs12}and line widths and all that stuff.
Dialogue: 0,0:17:32.60,0:17:36.60,yin,,0,0,0,,然后对刚才创建的路径进行描边或填充\N{\fs12}And then you stroke or fill the paths that you created.
Dialogue: 0,0:17:36.92,0:17:39.37,yin,,0,0,0,,这是Core Graphics的基本流程\N{\fs12}This is the fundamental way Core Graphics goes.
Dialogue: 0,0:17:40.03,0:17:42.10,yin,,0,0,0,,我们具体讲一下这些内容\N{\fs12}Okay? So let's talk about all those things.
Dialogue: 0,0:17:42.37,0:17:44.86,yin,,0,0,0,,UIBezierPath封装了\N{\fs12}UIBezierPath by the way encapsulates all --
Dialogue: 0,0:17:44.86,0:17:46.01,yin,,0,0,0,,全部上述操作\N{\fs12}doing all of that.
Dialogue: 0,0:17:46.56,0:17:48.16,yin,,0,0,0,,帮你处理好了上下文\N{\fs12}It takes care of the context for you.
Dialogue: 0,0:17:48.16,0:17:49.79,yin,,0,0,0,,你不用费心去想它\N{\fs12}So you don't even have to think about that.
Dialogue: 0,0:17:49.87,0:17:52.49,yin,,0,0,0,,创建路径的方法就是\N{\fs12}You create paths by sending messages to the UA--
Dialogue: 0,0:17:52.49,0:17:54.62,yin,,0,0,0,,向UIBezierPath实例发送消息\N{\fs12}to a UIBezierPath instance.
Dialogue: 0,0:17:54.68,0:17:57.29,yin,,0,0,0,,它允许你设置颜色 线宽等等\N{\fs12}It let's you set colors and line widths and all that
Dialogue: 0,0:17:57.41,0:17:59.44,yin,,0,0,0,,然后调用它的方法进行描边和填充\N{\fs12}and then it has methods to stroke and fill.
Dialogue: 0,0:17:59.44,0:18:00.96,yin,,0,0,0,,它封装了全部上述机制\N{\fs12}So it encapsulates all that mechanism.
Dialogue: 0,0:18:01.36,0:18:02.69,yin,,0,0,0,,我们来讲讲上下文\N{\fs12}So let's talk about the context.
Dialogue: 0,0:18:02.85,0:18:04.53,yin,,0,0,0,,通常情况下 你不用考虑上下文\N{\fs12}Mostly you don't have to worry about context
Dialogue: 0,0:18:04.54,0:18:06.25,yin,,0,0,0,,因为要用UIBezierPath\N{\fs12}because you're going to use UIBezierPath.
Dialogue: 0,0:18:06.50,0:18:08.99,yin,,0,0,0,,我会演示一个方法 可以使用CG函数\N{\fs12}I'll show you a way if you're using the CG functions
Dialogue: 0,0:18:08.99,0:18:10.97,yin,,0,0,0,,获取在屏幕上绘制的上下文\N{\fs12}to get the context to draw on screen.
Dialogue: 0,0:18:11.12,0:18:14.77,yin,,0,0,0,,上下文代表的是绘制的位置\N{\fs12}But a context means where am I drawing in terms of--
Dialogue: 0,0:18:15.01,0:18:16.68,yin,,0,0,0,,我现在是在屏幕上绘制吗\N{\fs12}am I drawing on screen right now?
Dialogue: 0,0:18:16.74,0:18:18.83,yin,,0,0,0,,还是绘制在屏外位图上呢\N{\fs12}Am I drawing off screen, in some bitmap?
Dialogue: 0,0:18:18.92,0:18:21.83,yin,,0,0,0,,绘制的内容创建为PDF文件吗\N{\fs12}Am I creating a PDF file out of what I'm drawing?
Dialogue: 0,0:18:21.86,0:18:22.97,yin,,0,0,0,,是否绘制输出至打印机呢\N{\fs12}Am I drawing to a printer?
Dialogue: 0,0:18:22.97,0:18:24.82,yin,,0,0,0,,iOS可以很好地支持打印机操作\N{\fs12}iOS has great printing support
Dialogue: 0,0:18:24.84,0:18:27.19,yin,,0,0,0,,所以你可以将绘制的图像\N{\fs12}so you could be drawing to print a page
Dialogue: 0,0:18:27.21,0:18:29.39,yin,,0,0,0,,通过Air Print打印机之类的打印出来\N{\fs12}on an Air Print printer or something like that.
Dialogue: 0,0:18:29.55,0:18:31.01,yin,,0,0,0,,这就是context上下文\N{\fs12}So that's the context part of it.
Dialogue: 0,0:18:31.92,0:18:35.97,yin,,0,0,0,,对于一般绘制 UIKit会在调用drawRect前\N{\fs12}For normal drawing, UIKit sets this context up for you
Dialogue: 0,0:18:36.24,0:18:37.73,yin,,0,0,0,,替你设置这个上下文\N{\fs12}before it calls drawRect.
Dialogue: 0,0:18:38.35,0:18:41.30,yin,,0,0,0,,当执行drawRect时 上下文就可以使用了\N{\fs12}And then once you're in drawRect, context is ready to go.
Dialogue: 0,0:18:41.36,0:18:43.19,yin,,0,0,0,,UIBezierPath知道它是什么\N{\fs12}UIBezierPath knows what it is,
Dialogue: 0,0:18:43.38,0:18:45.45,yin,,0,0,0,,如果你想调用CG函数\N{\fs12}and if you want to call the CG functions
Dialogue: 0,0:18:45.50,0:18:49.05,yin,,0,0,0,,就调用这个方法UIGraphicsGetCurrentContext\N{\fs12}you call this method UIGraphicsGetCurrentContext.
Dialogue: 0,0:18:49.06,0:18:50.78,yin,,0,0,0,,如果在drawRect中调用这个方法\N{\fs12}If you call this inside your drawRect
Dialogue: 0,0:18:50.90,0:18:52.09,yin,,0,0,0,,你会得到一个cookie\N{\fs12}you'll get a little cookie
Dialogue: 0,0:18:52.35,0:18:54.40,yin,,0,0,0,,将它作为第一个参数\N{\fs12}that you can hand off as the first argument
Dialogue: 0,0:18:54.41,0:18:58.87,yin,,0,0,0,,传递给Core Graphic函数\N{\fs12}to all these CG, you know, Core Graphic functions. Okay?
Dialogue: 0,0:18:59.12,0:19:01.29,yin,,0,0,0,,这些CG函数并不常用\N{\fs12}And you're not gonna need those CG functions very much.
Dialogue: 0,0:19:01.29,0:19:04.31,yin,,0,0,0,,只有当UIBezierPath无法实现目标功能时才会用到\N{\fs12}Only when UIBezierPath won't do what you want,
Dialogue: 0,0:19:04.58,0:19:05.48,yin,,0,0,0,,非常少见\N{\fs12}which is pretty rare.
Dialogue: 0,0:19:06.15,0:19:07.87,yin,,0,0,0,,这是个神奇的东西\N{\fs12}Okay? So this is the magic thing.
Dialogue: 0,0:19:07.88,0:19:10.51,yin,,0,0,0,,CGContextRef是一个无类型指针\N{\fs12}That context ref is just a void star.
Dialogue: 0,0:19:10.51,0:19:11.50,yin,,0,0,0,,你不知道它是什么\N{\fs12}You don't know what it is.
Dialogue: 0,0:19:11.50,0:19:12.45,yin,,0,0,0,,它是不透明的\N{\fs12}It's opaque.
Dialogue: 0,0:19:13.43,0:19:18.39,yin,,0,0,0,,每次调用drawRect时都会新建它\N{\fs12}And this thing is new every time your drawRect is called,
Dialogue: 0,0:19:18.39,0:19:20.02,yin,,0,0,0,,所以不要一直保存着它\N{\fs12}so never keep that thing around.
Dialogue: 0,0:19:20.04,0:19:22.76,yin,,0,0,0,,它只在drawRect调用期间有效\N{\fs12}It's only good from the start of your drawRect to the end.
Dialogue: 0,0:19:22.90,0:19:25.17,yin,,0,0,0,,不要把它保存在属性等始终有效的元素内\N{\fs12}Don't keep it in a property or anything that's going to live.
Dialogue: 0,0:19:25.27,0:19:28.26,yin,,0,0,0,,每次使用drawRect时\N{\fs12}Okay? Call the UIGraphicsGetCurrentContext
Dialogue: 0,0:19:28.28,0:19:29.85,yin,,0,0,0,,调用UIGraphicsGetCurrentContext\N{\fs12}each time you start a drawRect.
Dialogue: 0,0:19:31.31,0:19:33.01,yin,,0,0,0,,如何定义路径呢\N{\fs12}Okay, so how do we define a path?
Dialogue: 0,0:19:33.02,0:19:35.99,yin,,0,0,0,,假设我们想用UIBezierPath绘制三角形\N{\fs12}So let's say we wanted to do a triangle with UIBezierPath.
Dialogue: 0,0:19:36.16,0:19:38.97,yin,,0,0,0,,我们这样对UIBezierPath进行分配和初始化\N{\fs12}We alloc and init UIBezierPath like this.
Dialogue: 0,0:19:39.15,0:19:41.36,yin,,0,0,0,,移动至起始点\N{\fs12}We move to where our starting point is.
Dialogue: 0,0:19:41.36,0:19:43.88,yin,,0,0,0,,我要移动到上面的那个点\N{\fs12}So I'm going to move to the top there.
Dialogue: 0,0:19:44.35,0:19:46.26,yin,,0,0,0,,向右75 向下10\N{\fs12}75 across and 10 down.
Dialogue: 0,0:19:46.40,0:19:49.94,yin,,0,0,0,,然后添加一条直线至下面这个点\N{\fs12}Then I'm going to add a line to that point
Dialogue: 0,0:19:50.05,0:19:52.85,yin,,0,0,0,,向右160 向下150\N{\fs12}going down to over to 160 down to 150.
Dialogue: 0,0:19:52.93,0:19:57.35,yin,,0,0,0,,再添加一条线到左边(10,150)这点\N{\fs12}I'll add another line to come back to 10, 150.
Dialogue: 0,0:19:57.46,0:20:01.30,yin,,0,0,0,,然后调用closePath方法封闭路径\N{\fs12}And then I'm going to close this path, by calling closePath--
Dialogue: 0,0:20:01.71,0:20:05.05,yin,,0,0,0,,再添加一条线回到起始点\N{\fs12}that goes back to where we-- draws a line where we started.
Dialogue: 0,0:20:05.61,0:20:07.00,yin,,0,0,0,,得到了一个好看的三角形\N{\fs12}So I have a nice triangle there.
Dialogue: 0,0:20:07.16,0:20:08.35,yin,,0,0,0,,我这样讲有点误导大家\N{\fs12}Now I'm kind of misleading you,
Dialogue: 0,0:20:08.35,0:20:11.92,yin,,0,0,0,,因为在调用UIBezierPath的这些方法时\N{\fs12}because as I'm making all those calls in UIBezierPath,
Dialogue: 0,0:20:12.02,0:20:13.40,yin,,0,0,0,,实际上什么都不会发生\N{\fs12}nothing is actually happening.
Dialogue: 0,0:20:13.64,0:20:15.29,yin,,0,0,0,,屏幕是空的\N{\fs12}Okay? The screen is blank.
Dialogue: 0,0:20:15.83,0:20:18.47,yin,,0,0,0,,我刚才的这些操作只是在UIBezierPath中\N{\fs12}Okay? Because all I'm doing here is building that path up
Dialogue: 0,0:20:18.47,0:20:19.73,yin,,0,0,0,,创建绘制路径\N{\fs12}in that UIBezierPath.
Dialogue: 0,0:20:19.75,0:20:21.18,yin,,0,0,0,,我还没有真正进行绘制\N{\fs12}I haven't actually draw it yet.
Dialogue: 0,0:20:21.45,0:20:23.07,yin,,0,0,0,,当真正要绘制时\N{\fs12}When I want to actually draw it
Dialogue: 0,0:20:23.42,0:20:26.16,yin,,0,0,0,,需要设置填充颜色和描边颜色\N{\fs12}I have to set my fill color and stroke color
Dialogue: 0,0:20:26.21,0:20:27.57,yin,,0,0,0,,方法是调用...\N{\fs12}and you can do that by calling--
Dialogue: 0,0:20:27.58,0:20:30.71,yin,,0,0,0,,向一个UIColor发送setFill和setStroke\N{\fs12}sending setFill and setStroke to a UIColor.
Dialogue: 0,0:20:31.14,0:20:34.76,yin,,0,0,0,,获取UIColor的方法和属性化字符串那里的操作一样\N{\fs12}Just get a UIColor like you did for attributed string, whatever.
Dialogue: 0,0:20:34.77,0:20:35.81,yin,,0,0,0,,一样的\N{\fs12}UIColor, Same thing.
Dialogue: 0,0:20:36.08,0:20:37.31,yin,,0,0,0,,调用setFill和setStroke\N{\fs12}Call setFill or setStroke.
Dialogue: 0,0:20:37.31,0:20:38.66,yin,,0,0,0,,甚至可以直接用set\N{\fs12}You can even just say set
Dialogue: 0,0:20:38.67,0:20:40.05,yin,,0,0,0,,它会将填充颜色和描边颜色\N{\fs12}and it'll set the fill and the stroke
Dialogue: 0,0:20:40.06,0:20:41.51,yin,,0,0,0,,都设为你选定的颜色\N{\fs12}to be whatever color you're sent it to.
Dialogue: 0,0:20:41.76,0:20:44.92,yin,,0,0,0,,设置好填充和描边颜色之后\N{\fs12}And once you have your color for fill and stroke set
Dialogue: 0,0:20:44.99,0:20:47.76,yin,,0,0,0,,向路径发送一条fill填充消息\N{\fs12}you send a message to the path saying fill
Dialogue: 0,0:20:47.95,0:20:50.05,yin,,0,0,0,,或者发送一条stroke描边消息\N{\fs12}and or message to the path saying stroke.
Dialogue: 0,0:20:50.05,0:20:51.79,yin,,0,0,0,,这时它才会真正进行绘制\N{\fs12}And now it will actually draw.
Dialogue: 0,0:20:52.04,0:20:54.25,yin,,0,0,0,,最后的fill和stroke这两个调用\N{\fs12}So those last two calls there, fill and stroke.
Dialogue: 0,0:20:54.25,0:20:55.99,yin,,0,0,0,,才是真正开始绘制\N{\fs12}Those are the things that cause drawing to happen.
Dialogue: 0,0:20:56.77,0:20:58.73,yin,,0,0,0,,之前其他操作都类似于准备工作\N{\fs12}Okay? Everything else is just like setup.
Dialogue: 0,0:20:59.79,0:21:00.35,yin,,0,0,0,,明白吗\N{\fs12}Make sense?
Dialogue: 0,0:21:01.56,0:21:04.99,yin,,0,0,0,,这些看起来好像很简单 三角形\N{\fs12}Okay. Now this might all seem like whoa, triangle great
Dialogue: 0,0:21:04.99,0:21:06.48,yin,,0,0,0,,我可以绘制一个三角形\N{\fs12}and I can draw a triangle.
Dialogue: 0,0:21:06.71,0:21:07.61,yin,,0,0,0,,听起来很容易\N{\fs12}Sounds easy.
Dialogue: 0,0:21:07.72,0:21:10.46,yin,,0,0,0,,但是实际上 UIBezierPath可以实现很多操作\N{\fs12}But there's actually a lot the UIBezierPath can do
Dialogue: 0,0:21:10.47,0:21:12.76,yin,,0,0,0,,比这复杂得多\N{\fs12}that's really much more sophisticated than that.
Dialogue: 0,0:21:12.89,0:21:15.28,yin,,0,0,0,,你还可以设置线宽等等\N{\fs12}You can set your line widths and things like that
Dialogue: 0,0:21:15.37,0:21:17.31,yin,,0,0,0,,让你的图像...\N{\fs12}to make your drawing, you know,
Dialogue: 0,0:21:17.60,0:21:20.08,yin,,0,0,0,,可以设置图案等等\N{\fs12}you can set patterns and all kinds of that
Dialogue: 0,0:21:20.09,0:21:21.18,yin,,0,0,0,,让绘制图像更加有趣\N{\fs12}to make them more interesting.
Dialogue: 0,0:21:21.28,0:21:23.84,yin,,0,0,0,,UIBezierPath还有很多很棒的函数\N{\fs12}And also UIBezierPath has a lot of cool functions
Dialogue: 0,0:21:23.85,0:21:27.31,yin,,0,0,0,,比如bezierPathWithRoundedRect cornerRadius\N{\fs12}like bezierPathWithRoundedRect cornerRadius.
Dialogue: 0,0:21:27.56,0:21:29.36,yin,,0,0,0,,它会给你一个路径\N{\fs12}Okay? And that will give you a path,
Dialogue: 0,0:21:29.37,0:21:31.33,yin,,0,0,0,,是一个圆角矩形\N{\fs12}which is a rounded rectangle
Dialogue: 0,0:21:31.77,0:21:34.17,yin,,0,0,0,,在特定的bounds内\N{\fs12}in its... inside of a certain bounds.
Dialogue: 0,0:21:34.55,0:21:37.05,yin,,0,0,0,,还有很多类似的函数\N{\fs12}Okay? And it has a bunch of other ones similar to that.
Dialogue: 0,0:21:37.47,0:21:39.69,yin,,0,0,0,,这样你就可以构建更复杂的图形\N{\fs12}So that you can build more complicated things
Dialogue: 0,0:21:39.69,0:21:41.31,yin,,0,0,0,,不再只是一条条直线连接起来\N{\fs12}than line to line to line to.
Dialogue: 0,0:21:41.31,0:21:42.89,yin,,0,0,0,,我演示刚才的例子 只是因为它比较简单\N{\fs12}Okay? I just show you that because it's simple.
Dialogue: 0,0:21:43.22,0:21:45.51,yin,,0,0,0,,下面这是创建椭圆形的示例\N{\fs12}Right? So that's how you would for example create an oval.
Dialogue: 0,0:21:47.57,0:21:50.66,yin,,0,0,0,,你还可以用UIBezierPath来裁剪绘图\N{\fs12}You can also use UIBezierPath to clip your drawing.
Dialogue: 0,0:21:50.66,0:21:51.70,yin,,0,0,0,,这非常重要\N{\fs12}This is super important.
Dialogue: 0,0:21:51.70,0:21:53.62,yin,,0,0,0,,你们的作业需要用到它\N{\fs12}You will need this for your homework I think.
Dialogue: 0,0:21:53.90,0:21:55.77,yin,,0,0,0,,我觉得应该有不用它完成作业的方法\N{\fs12}I supposed there's a way to do the homework without this
Dialogue: 0,0:21:55.77,0:21:57.31,yin,,0,0,0,,但是我想不出来\N{\fs12}but I can't think of a way.
Dialogue: 0,0:21:58.73,0:22:01.33,yin,,0,0,0,,我可以 但是会非常冗长乏味\N{\fs12}Well, I can but it would be extremely tedious.
Dialogue: 0,0:22:01.66,0:22:03.83,yin,,0,0,0,,比如圆角矩形\N{\fs12}Rounded rect for example
Dialogue: 0,0:22:03.84,0:22:05.89,yin,,0,0,0,,就可以用来裁剪绘图\N{\fs12}could be used to clip your drawing.
Dialogue: 0,0:22:05.89,0:22:07.65,yin,,0,0,0,,所以如果你想绘制某种图案\N{\fs12}So if you wanted to draw some kind of pattern
Dialogue: 0,0:22:07.65,0:22:10.00,yin,,0,0,0,,但是想让它出现在一个圆角矩形内\N{\fs12}but you wanted it to be inside a rounded rect
Dialogue: 0,0:22:10.13,0:22:11.84,yin,,0,0,0,,你只要生成一个圆角矩形\N{\fs12}you just get a rounded rect,
Dialogue: 0,0:22:11.85,0:22:13.31,yin,,0,0,0,,就像幻灯片上面的示例那样\N{\fs12}just like earlier in the slide there
Dialogue: 0,0:22:13.37,0:22:14.62,yin,,0,0,0,,然后用addClip\N{\fs12}and say addClip.
Dialogue: 0,0:22:15.13,0:22:16.84,yin,,0,0,0,,从这里开始\N{\fs12}And at that point-- from that point on
Dialogue: 0,0:22:16.93,0:22:18.45,yin,,0,0,0,,你的所有绘图都会被裁剪\N{\fs12}all your drawing will be clipped
Dialogue: 0,0:22:18.57,0:22:20.64,yin,,0,0,0,,出现在那个圆角矩形路径内\N{\fs12}to be inside that Bezier path.
Dialogue: 0,0:22:21.74,0:22:24.00,yin,,0,0,0,,还可以添加更多裁剪区域\N{\fs12}Okay? And there's ways to add more clipping on,
Dialogue: 0,0:22:24.18,0:22:26.19,yin,,0,0,0,,取消裁剪等等\N{\fs12}to turn off your clipping, you know, that kind of thing.
Dialogue: 0,0:22:26.36,0:22:29.76,yin,,0,0,0,,所以裁剪也是UIBezierPath中重要的一部分\N{\fs12}So clipping is important piece of UIBezierPath as well.
Dialogue: 0,0:22:31.43,0:22:34.27,yin,,0,0,0,,再讲一下如何利用UIView的透明度进行绘制\N{\fs12}Okay, let's talk about drawing with transparency in UIView.
Dialogue: 0,0:22:34.57,0:22:37.36,yin,,0,0,0,,默认情况下 UIView是不透明的\N{\fs12}Okay, UIViews by default are opaque.
Dialogue: 0,0:22:37.53,0:22:40.24,yin,,0,0,0,,它们有背景色 默认是白色\N{\fs12}They have a background color, by default it's white.
Dialogue: 0,0:22:40.55,0:22:43.35,yin,,0,0,0,,所以如果你在屏幕上放一个视图 然后运行\N{\fs12}So if you put a view on screen and just run
Dialogue: 0,0:22:43.42,0:22:44.93,yin,,0,0,0,,会出现一个白色的矩形\N{\fs12}it'll come out as a white rectangle.
Dialogue: 0,0:22:45.52,0:22:48.27,yin,,0,0,0,,我们并不总是需要这样\N{\fs12}Okay? So that's not always what you want.
Dialogue: 0,0:22:48.28,0:22:51.90,yin,,0,0,0,,如果是扑克牌 我想要圆角矩形的\N{\fs12}So for example in a playing card I want it to have rounded rects
Dialogue: 0,0:22:51.97,0:22:54.31,yin,,0,0,0,,我希望顶角部分是透明的\N{\fs12}and I want those corners to show through.
Dialogue: 0,0:22:54.66,0:22:58.27,yin,,0,0,0,,也许牌桌上有其他牌\N{\fs12}Maybe there's a card behind or something on the playing table
Dialogue: 0,0:22:58.27,0:22:59.84,yin,,0,0,0,,被这张牌盖住了之类的\N{\fs12}that the card is on or something.
Dialogue: 0,0:22:59.85,0:23:01.63,yin,,0,0,0,,所以我不希望它是不透明的\N{\fs12}So I don't want it to be opaque.
Dialogue: 0,0:23:01.64,0:23:03.83,yin,,0,0,0,,在示例中大家会看到\N{\fs12}So you're going to see in our demo
Dialogue: 0,0:23:03.84,0:23:06.07,yin,,0,0,0,,我们要关掉这个不透明性\N{\fs12}we're going to have to turn this opaqueness off.
Dialogue: 0,0:23:07.17,0:23:08.61,yin,,0,0,0,,实现方法是\N{\fs12}The way you turn the opaqueness off
Dialogue: 0,0:23:08.63,0:23:12.46,yin,,0,0,0,,将UIView的属性opaque设置为NO\N{\fs12}is you have to set this property opaque in UIView to no.
Dialogue: 0,0:23:12.68,0:23:14.32,yin,,0,0,0,,也就是说 你要告诉系统\N{\fs12}In other words you have to tell the system
Dialogue: 0,0:23:14.45,0:23:15.63,yin,,0,0,0,,这个视图不是不透明的\N{\fs12}this view is not opaque.
Dialogue: 0,0:23:15.66,0:23:19.20,yin,,0,0,0,,即便你将背景色设为了nil\N{\fs12}Even if you set the background color to nil.
Dialogue: 0,0:23:19.65,0:23:21.66,yin,,0,0,0,,表示不需要背景色\N{\fs12}Okay? Which means I don't want a background color.
Dialogue: 0,0:23:21.70,0:23:25.71,yin,,0,0,0,,因为有这个属性 它依旧不会是透明的\N{\fs12}It still won't be transparent because of this.
Dialogue: 0,0:23:25.82,0:23:28.25,yin,,0,0,0,,这个opaque不是一项性能优化\N{\fs12}This opaque isn't a performance optimization
Dialogue: 0,0:23:28.34,0:23:29.69,yin,,0,0,0,,但却是必要的优化\N{\fs12}but it's a hard optimization,
Dialogue: 0,0:23:29.70,0:23:31.60,yin,,0,0,0,,如果设置不正确\N{\fs12}meaning it just won't work
Dialogue: 0,0:23:31.60,0:23:32.94,yin,,0,0,0,,它就无法正常工作\N{\fs12}if you don't set it to the right thing.
Dialogue: 0,0:23:32.96,0:23:34.55,yin,,0,0,0,,所以如果你想让视图变为透明的\N{\fs12}So if you want your view to be transparent
Dialogue: 0,0:23:34.56,0:23:35.79,yin,,0,0,0,,就要把opaque设置为NO\N{\fs12}you have to set opaque to no.
Dialogue: 0,0:23:35.89,0:23:38.09,yin,,0,0,0,,同时还要把背景色设为nil\N{\fs12}You're also going to want to set your background color to nil
Dialogue: 0,0:23:38.11,0:23:39.94,yin,,0,0,0,,避免填充背景色\N{\fs12}so that it's not filling with a background color.
Dialogue: 0,0:23:40.33,0:23:44.61,yin,,0,0,0,,还可以将整个视图变为透明的\N{\fs12}It is also possible to make your entire view transparent
Dialogue: 0,0:23:44.95,0:23:45.82,yin,,0,0,0,,用alpha属性\N{\fs12}with alpha.
Dialogue: 0,0:23:46.56,0:23:49.27,yin,,0,0,0,,UIView有一个属性叫做alpha\N{\fs12}Okay? So UIView has a property called alpha.
Dialogue: 0,0:23:49.28,0:23:50.60,yin,,0,0,0,,如果你将它设为50%\N{\fs12}If you set it to 50%
Dialogue: 0,0:23:50.61,0:23:53.97,yin,,0,0,0,,那么视图中全部元素都会透出50%\N{\fs12}then everything in your view will be 50% see through.
Dialogue: 0,0:23:54.26,0:23:55.74,yin,,0,0,0,,透明度为50%\N{\fs12}Right? 50% transparent.
Dialogue: 0,0:23:55.75,0:23:57.63,yin,,0,0,0,,或者20%等等 看你需要\N{\fs12}20% or whatever percent you want.
Dialogue: 0,0:23:57.64,0:23:58.45,yin,,0,0,0,,是整个视图\N{\fs12}That's the entire view.
Dialogue: 0,0:23:58.45,0:24:00.22,yin,,0,0,0,,不管里面是什么\N{\fs12}No matter what's going on inside.
Dialogue: 0,0:24:00.65,0:24:02.92,yin,,0,0,0,,当然 还有透明颜色\N{\fs12}And of course, you have transparent colors
Dialogue: 0,0:24:03.01,0:24:05.94,yin,,0,0,0,,可以用来绘制 填充 描边等等\N{\fs12}that you could draw with, fill with, stroke with, whatever.
Dialogue: 0,0:24:06.11,0:24:08.36,yin,,0,0,0,,绘制出来也是透明的\N{\fs12}To draw transparently that way as well.
Dialogue: 0,0:24:08.36,0:24:11.46,yin,,0,0,0,,所以有很多方法可以在视图中进行透明绘制\N{\fs12}So there's a lot of ways to draw transparently in your view.
Dialogue: 0,0:24:11.68,0:24:15.41,yin,,0,0,0,,如果透明绘制的视图重叠了会怎样呢\N{\fs12}What happens if you've draw transparently and views overlap?
Dialogue: 0,0:24:15.68,0:24:17.88,yin,,0,0,0,,它们会互相透过来显示\N{\fs12}Well, they show through to each other.
Dialogue: 0,0:24:18.31,0:24:20.06,yin,,0,0,0,,我刚才讲过的\N{\fs12}Okay? And I told you that the order
Dialogue: 0,0:24:20.06,0:24:22.34,yin,,0,0,0,,添加子视图的顺序很重要\N{\fs12}in which you add the subviews matters.
Dialogue: 0,0:24:22.49,0:24:27.40,yin,,0,0,0,,所有视图都有属性subviews 是一个NSArray\N{\fs12}Okay? Every view has a property, an NSArray called subviews.
Dialogue: 0,0:24:27.40,0:24:30.11,yin,,0,0,0,,是视图的列表 顺序很重要\N{\fs12}It's the list of views and the order matters.
Dialogue: 0,0:24:30.16,0:24:32.64,yin,,0,0,0,,数组中靠前的视图\N{\fs12}The lower one in the array, okay,
Dialogue: 0,0:24:32.65,0:24:35.65,yin,,0,0,0,,比如位置0的视图在后面\N{\fs12}the ones that-- like zero are in the back
Dialogue: 0,0:24:35.92,0:24:38.19,yin,,0,0,0,,数组中靠后的视图在前面\N{\fs12}and the ones down at the end are in the front.
Dialogue: 0,0:24:38.31,0:24:38.60,yin,,0,0,0,,明白吗\N{\fs12}All right?
Dialogue: 0,0:24:38.60,0:24:40.46,yin,,0,0,0,,所以是按照subviews数组中的顺序由后至前\N{\fs12}So the subviews array is from back to front.
Dialogue: 0,0:24:40.88,0:24:43.21,yin,,0,0,0,,视图间可以重叠 压在其他视图上面\N{\fs12}Okay? And things can overlap and be on top of the others
Dialogue: 0,0:24:43.22,0:24:44.47,yin,,0,0,0,,它们可以透过上面的视图显示出来\N{\fs12}and they will show through.
Dialogue: 0,0:24:44.71,0:24:46.27,yin,,0,0,0,,如果中间有一个不透明视图\N{\fs12}If you have an opaque on in the middle,
Dialogue: 0,0:24:46.29,0:24:48.40,yin,,0,0,0,,就会遮挡住后面的全部视图\N{\fs12}it would block all the ones in the back.
Dialogue: 0,0:24:48.63,0:24:49.91,yin,,0,0,0,,明白吗\N{\fs12}See what I mean?
Dialogue: 0,0:24:50.37,0:24:51.46,yin,,0,0,0,,就是这么简单\N{\fs12}So it's as simple as that.
Dialogue: 0,0:24:51.76,0:24:54.92,yin,,0,0,0,,实现透明的开销并不少\N{\fs12}Now having transparent views is not cheap.
Dialogue: 0,0:24:55.04,0:24:56.72,yin,,0,0,0,,关于性能优化\N{\fs12}We talk about performance optimization,
Dialogue: 0,0:24:56.72,0:24:58.04,yin,,0,0,0,,我认为计算机科学的学生\N{\fs12}one of the biggest mistakes I think
Dialogue: 0,0:24:58.07,0:24:59.36,yin,,0,0,0,,最容易犯的错误\N{\fs12}computer science students make
Dialogue: 0,0:24:59.51,0:25:00.70,yin,,0,0,0,,就是过早优化\N{\fs12}is premature optimization.
Dialogue: 0,0:25:00.70,0:25:03.58,yin,,0,0,0,,优化了无关紧要的内容\N{\fs12}You're in there optimizing stuff that just doesn't matter.
Dialogue: 0,0:25:03.72,0:25:04.52,yin,,0,0,0,,而这个很重要\N{\fs12}This matters.
Dialogue: 0,0:25:04.74,0:25:06.67,yin,,0,0,0,,如果你用了很多透明视图\N{\fs12}If you have a lot of transparency,
Dialogue: 0,0:25:06.78,0:25:08.13,yin,,0,0,0,,会占用大量性能资源\N{\fs12}it's going to be a performance hit
Dialogue: 0,0:25:08.14,0:25:10.56,yin,,0,0,0,,因为你要根据透明度\N{\fs12}because you're talking about having to composite those view
Dialogue: 0,0:25:10.57,0:25:12.01,yin,,0,0,0,,一层层地合成这些视图\N{\fs12}on top of each other with alpha.
Dialogue: 0,0:25:12.06,0:25:15.18,yin,,0,0,0,,比直接改变比特值的开销大多了\N{\fs12}Way more expensive than just blasting the bits in there.
Dialogue: 0,0:25:15.44,0:25:18.02,yin,,0,0,0,,学过图形学的同学知道我在说什么\N{\fs12}Okay? Anyone taking graphics knows that I'm talking about.
Dialogue: 0,0:25:18.42,0:25:20.11,yin,,0,0,0,,所以这是要注意的地方\N{\fs12}So this is something you're gonna be a little careful with.
Dialogue: 0,0:25:20.12,0:25:21.74,yin,,0,0,0,,你要将opaque属性设为NO\N{\fs12}You're going to set that opaque to no.
Dialogue: 0,0:25:21.93,0:25:24.60,yin,,0,0,0,,明白这里涉及一个性能开销的问题\N{\fs12}Understand there's a performance cost there.
Dialogue: 0,0:25:24.92,0:25:26.12,yin,,0,0,0,,这就是我刚说的\N{\fs12}Yeah, there's what I am saying.
Dialogue: 0,0:25:27.32,0:25:29.67,yin,,0,0,0,,你还可以隐藏整个视图\N{\fs12}You can also hide a view entirely.
Dialogue: 0,0:25:29.88,0:25:33.11,yin,,0,0,0,,可以把它想成是alpha为0的情况\N{\fs12}Okay? So it's just like think of it as alpha of zero,
Dialogue: 0,0:25:33.11,0:25:34.08,yin,,0,0,0,,什么都看不到\N{\fs12}like you can't see anything.
Dialogue: 0,0:25:34.08,0:25:36.00,yin,,0,0,0,,但是它同时也无法获取任何手势\N{\fs12}But it also won't get any gestures.
Dialogue: 0,0:25:36.11,0:25:38.62,yin,,0,0,0,,很像是将视图从视图层级中移除了\N{\fs12}It's almost like removing from the view hierarchy,
Dialogue: 0,0:25:38.62,0:25:39.54,yin,,0,0,0,,但是你把它留下了\N{\fs12}but you're leaving it,
Dialogue: 0,0:25:39.56,0:25:42.84,yin,,0,0,0,,所以它还在子视图列表中\N{\fs12}so it has its space in the subviews list.
Dialogue: 0,0:25:43.35,0:25:45.85,yin,,0,0,0,,还有它的位置 但是并不显示出来\N{\fs12}It gets to keep that, but otherwise it doesn't appear.
Dialogue: 0,0:25:45.85,0:25:47.96,yin,,0,0,0,,不进行绘制 无法获取事件\N{\fs12}It doesn't draw, it doesn't get events.
Dialogue: 0,0:25:48.09,0:25:49.46,yin,,0,0,0,,就像没在屏幕上一样\N{\fs12}It's like it's not even there.
Dialogue: 0,0:25:49.71,0:25:50.79,yin,,0,0,0,,为什么要这样呢\N{\fs12}Why do you want that?
Dialogue: 0,0:25:50.80,0:25:51.92,yin,,0,0,0,,因为有时你只是想将某个视图\N{\fs12}Well, because sometimes you just want to
Dialogue: 0,0:25:51.93,0:25:55.00,yin,,0,0,0,,暂时从层级中移出\N{\fs12}temporarily remove a view from the hierarchy
Dialogue: 0,0:25:55.00,0:25:56.15,yin,,0,0,0,,再把它重新放回来\N{\fs12}and put it right back in.
Dialogue: 0,0:25:56.23,0:25:59.07,yin,,0,0,0,,或者过一小段时间后再放回来\N{\fs12}So you said-- or put it back in some short time later.
Dialogue: 0,0:25:59.18,0:26:00.58,yin,,0,0,0,,写上hidden=YES\N{\fs12}So you say hidden equals yes.
Dialogue: 0,0:26:00.69,0:26:01.34,yin,,0,0,0,,它就不见了\N{\fs12}It's gone.
Dialogue: 0,0:26:01.54,0:26:03.61,yin,,0,0,0,,写上hidden=NO 它就重新出现了\N{\fs12}You say hidden equals no, oh it reappears.
Dialogue: 0,0:26:03.92,0:26:07.98,yin,,0,0,0,,这比设置为透明更好\N{\fs12}Okay? So that's better than setting the transparency.
Dialogue: 0,0:26:07.98,0:26:12.10,yin,,0,0,0,,大部分情况下 UIKit可能会将alpha=0\N{\fs12}Although I think mostly the UIKit probably optimizes alpha equals zero
Dialogue: 0,0:26:12.11,0:26:15.02,yin,,0,0,0,,优化为hidden 这是我的猜测\N{\fs12}to be the same as hidden as my guess. Okay.
Dialogue: 0,0:26:17.16,0:26:19.45,yin,,0,0,0,,我想作业中可能不需要用到\N{\fs12}Probably won't have to do that in homework as my guess.
Dialogue: 0,0:26:19.95,0:26:20.63,yin,,0,0,0,,也可能会用到\N{\fs12}But you might.
Dialogue: 0,0:26:20.64,0:26:22.38,yin,,0,0,0,,取决于你的UI的复杂度\N{\fs12}Depends on what kind of sophisticated UI you build.
Dialogue: 0,0:26:23.45,0:26:24.92,yin,,0,0,0,,这张幻灯片我就不详细讲了\N{\fs12}I'm not going to go through this slide
Dialogue: 0,0:26:24.93,0:26:26.39,yin,,0,0,0,,但是可以想象一下\N{\fs12}but you can imagine that
Dialogue: 0,0:26:26.40,0:26:28.53,yin,,0,0,0,,如果你在子程序中\N{\fs12}if you're setting up fill colors and clipping
Dialogue: 0,0:26:28.54,0:26:30.48,yin,,0,0,0,,设置了填充颜色 裁剪等等\N{\fs12}and all that stuff in a subroutine,
Dialogue: 0,0:26:30.77,0:26:32.34,yin,,0,0,0,,当你从子程序中返回时\N{\fs12}when you come back from the subroutine,
Dialogue: 0,0:26:32.35,0:26:33.76,yin,,0,0,0,,这些属性值不变\N{\fs12}all those things might still be set.
Dialogue: 0,0:26:33.77,0:26:34.73,yin,,0,0,0,,这样就不好了\N{\fs12}And that would be bad.
Dialogue: 0,0:26:34.89,0:26:38.69,yin,,0,0,0,,所以最好能压入和取出你的状态\N{\fs12}Okay? So you want to be able to push and pop your state.
Dialogue: 0,0:26:38.71,0:26:41.13,yin,,0,0,0,,也就是保存当前图形上下文\N{\fs12}Basically save the current graphics context
Dialogue: 0,0:26:41.28,0:26:42.53,yin,,0,0,0,,然后再恢复它\N{\fs12}and then restore it.
Dialogue: 0,0:26:42.65,0:26:44.00,yin,,0,0,0,,也就是这两个函数的功能\N{\fs12}And that what these functions do,
Dialogue: 0,0:26:44.02,0:26:48.00,yin,,0,0,0,,CGContextSaveGState和CGContextRestoreGState\N{\fs12}CGContextSaveGState and CGContextRestoreGState.
Dialogue: 0,0:26:48.11,0:26:48.93,yin,,0,0,0,,把各种设置都保存起来\N{\fs12}We'll save everything,
Dialogue: 0,0:26:48.93,0:26:51.08,yin,,0,0,0,,填充颜色 裁剪区域\N{\fs12}all the fill colors and clipping regions.
Dialogue: 0,0:26:51.23,0:26:52.38,yin,,0,0,0,,执行一些操作\N{\fs12}You go do a bunch of stuff.
Dialogue: 0,0:26:52.54,0:26:54.18,yin,,0,0,0,,裁剪 填充等等\N{\fs12}You know, clip and fill and everything
Dialogue: 0,0:26:54.19,0:26:56.01,yin,,0,0,0,,然后恢复一下 就回到了之前的状态\N{\fs12}and then you restore and you're back the way you were.
Dialogue: 0,0:26:56.16,0:26:57.43,yin,,0,0,0,,这样如果你有drawRect方法\N{\fs12}So that if you have your drawRect
Dialogue: 0,0:26:57.43,0:27:00.31,yin,,0,0,0,,它调用了这个drawGreenCircle\N{\fs12}and it calls this drawGreenCircle thing,
Dialogue: 0,0:27:00.47,0:27:01.85,yin,,0,0,0,,不会在你回到drawRect之后\N{\fs12}it won't come back to your drawRect
Dialogue: 0,0:27:01.86,0:27:03.44,yin,,0,0,0,,所有绘制图形都变成绿色\N{\fs12}and now everything is drawn in green.
Dialogue: 0,0:27:04.15,0:27:07.34,yin,,0,0,0,,这就是压入和取出状态\N{\fs12}Okay? So that's push and pop basically the state.
Dialogue: 0,0:27:08.45,0:27:09.51,yin,,0,0,0,,下面是绘制文本\N{\fs12}All right, drawing text.
Dialogue: 0,0:27:09.51,0:27:11.30,yin,,0,0,0,,绘制三角形\N{\fs12}Okay, it's all great drawing triangles
Dialogue: 0,0:27:11.30,0:27:12.26,yin,,0,0,0,,填充颜色都可以了\N{\fs12}and filling them with colors.
Dialogue: 0,0:27:12.26,0:27:15.20,yin,,0,0,0,,怎样在视图中绘制文本呢\N{\fs12}What if you want to draw text inside your view?
Dialogue: 0,0:27:15.30,0:27:17.25,yin,,0,0,0,,当然 绝大多数情况下 在UIKit中\N{\fs12}Well, of course we use UILabel to draw
Dialogue: 0,0:27:17.26,0:27:20.00,yin,,0,0,0,,我们使用UILabel绘制文本\N{\fs12}the vast majority of text on the screen in UIKit.
Dialogue: 0,0:27:20.22,0:27:22.24,yin,,0,0,0,,但是你可以用NSAttributedString\N{\fs12}But you can use NSAttributedString
Dialogue: 0,0:27:22.41,0:27:23.86,yin,,0,0,0,,绘制任意想要的文本\N{\fs12}to draw any text you want.
Dialogue: 0,0:27:24.41,0:27:25.68,yin,,0,0,0,,非常简单\N{\fs12}And it could not be simpler.
Dialogue: 0,0:27:25.72,0:27:27.19,yin,,0,0,0,,创建属性化字符串\N{\fs12}You create the attributes string
Dialogue: 0,0:27:27.19,0:27:28.57,yin,,0,0,0,,添加所需属性\N{\fs12}with all the attributes you want.
Dialogue: 0,0:27:28.58,0:27:31.18,yin,,0,0,0,,没有限制 和上次作业中做的\N{\fs12}No restrictions, exactly like you learned to do
Dialogue: 0,0:27:31.37,0:27:32.73,yin,,0,0,0,,是一样的\N{\fs12}in this last homework assignment
Dialogue: 0,0:27:32.85,0:27:33.94,yin,,0,0,0,,然后只要向那个属性化字符串\N{\fs12}and then you just send a message
Dialogue: 0,0:27:33.94,0:27:36.68,yin,,0,0,0,,发送消息drawAtPoint\N{\fs12}to that attributed string, drawAtPoint.
Dialogue: 0,0:27:36.79,0:27:37.44,yin,,0,0,0,,这个点\N{\fs12}This point.
Dialogue: 0,0:27:37.45,0:27:40.65,yin,,0,0,0,,这个点是一个矩形的左上角\N{\fs12}And that will be the upper left corner of a rectangle
Dialogue: 0,0:27:40.66,0:27:43.93,yin,,0,0,0,,矩形包括了全部属性化文本\N{\fs12}that includes all that attributed text.
Dialogue: 0,0:27:44.60,0:27:47.38,yin,,0,0,0,,再简单不过了\N{\fs12}Okay? It's-- could not be any simpler.
Dialogue: 0,0:27:48.11,0:27:51.04,yin,,0,0,0,,你还可以得到文本大小\N{\fs12}You can also find out how big that text is going to take.
Dialogue: 0,0:27:51.04,0:27:52.89,yin,,0,0,0,,文本所占空间大小\N{\fs12}How much space that thing is going to take
Dialogue: 0,0:27:53.08,0:27:56.38,yin,,0,0,0,,方法是向属性化字符串发送size\N{\fs12}by sending size to the attributed string
Dialogue: 0,0:27:56.39,0:27:57.87,yin,,0,0,0,,它会返回文本空间大小\N{\fs12}and it'll tell you how big it is.
Dialogue: 0,0:27:57.87,0:28:00.06,yin,,0,0,0,,你可能会对这部分内容有点困扰\N{\fs12}Now you might be a little disturbed by this and like whoa,
Dialogue: 0,0:28:00.06,0:28:02.35,yin,,0,0,0,,属性化字符串并不是UIKit的内容\N{\fs12}attributed string is not really a UIKit thing.
Dialogue: 0,0:28:02.35,0:28:04.22,yin,,0,0,0,,它的属性一般都是\N{\fs12}All the properties inside usually are,
Dialogue: 0,0:28:04.22,0:28:06.15,yin,,0,0,0,,但它本身并不是\N{\fs12}but it itself is not.
Dialogue: 0,0:28:06.26,0:28:07.23,yin,,0,0,0,,是这样的\N{\fs12}And that's true.
Dialogue: 0,0:28:07.58,0:28:09.81,yin,,0,0,0,,UIKit实际上是添加了这些方法\N{\fs12}UIKit actually adds these methods
Dialogue: 0,0:28:09.82,0:28:12.35,yin,,0,0,0,,drawAtPoint size等\N{\fs12}drawAtPoint and size and there's a few other ones.
Dialogue: 0,0:28:12.44,0:28:13.90,yin,,0,0,0,,即便是在完全不同的框架中\N{\fs12}It adds them even though
Dialogue: 0,0:28:13.91,0:28:15.28,yin,,0,0,0,,也可以添加方法\N{\fs12}it's in a completely different framework
Dialogue: 0,0:28:15.35,0:28:17.02,yin,,0,0,0,,使用了Objective C中的一项机制\N{\fs12}using a mechanism in Objective C
Dialogue: 0,0:28:17.03,0:28:18.76,yin,,0,0,0,,可以直接向类中添加方法\N{\fs12}where you can add methods to classes
Dialogue: 0,0:28:18.76,0:28:20.11,yin,,0,0,0,,而不用对它们进行子类化\N{\fs12}without subclassing them.
Dialogue: 0,0:28:20.92,0:28:24.54,yin,,0,0,0,,叫做Category类别 不好控制\N{\fs12}Okay? It's called categories, talk about Wild West.
Dialogue: 0,0:28:24.54,0:28:26.73,yin,,0,0,0,,这就是为什么我要到学期下半部分才讲\N{\fs12}That's why I don't show you until the halfway through
Dialogue: 0,0:28:26.74,0:28:29.30,yin,,0,0,0,,因为这项机制可能会被滥用\N{\fs12}because it can be abused, this mechanism.
Dialogue: 0,0:28:30.02,0:28:31.29,yin,,0,0,0,,对这部分感到困惑的同学\N{\fs12}But that's how this is working
Dialogue: 0,0:28:31.38,0:28:33.29,yin,,0,0,0,,这就是它的工作方式\N{\fs12}for those of you who are wondering.
Dialogue: 0,0:28:34.50,0:28:36.64,yin,,0,0,0,,绘制图像差不多是一样的\N{\fs12}Drawing images is almost the same.
Dialogue: 0,0:28:36.72,0:28:39.67,yin,,0,0,0,,但是不用NSAttributedString 而是UIImage\N{\fs12}But instead of an NSAttributedString, you get a UIImage.
Dialogue: 0,0:28:39.67,0:28:40.59,yin,,0,0,0,,大家知道如何用图像名\N{\fs12}So you know how to get one
Dialogue: 0,0:28:40.59,0:28:42.82,yin,,0,0,0,,从图像资产库中得到图像\N{\fs12}out of the image assets library with image name.
Dialogue: 0,0:28:43.03,0:28:44.88,yin,,0,0,0,,还可以从文件中创建\N{\fs12}There are other ways you can create them from a file.
Dialogue: 0,0:28:44.88,0:28:46.88,yin,,0,0,0,,甚至还可以通过绘至屏外位图\N{\fs12}You can even draw into an offscreen bitmap
Dialogue: 0,0:28:46.89,0:28:47.93,yin,,0,0,0,,创建UIImage\N{\fs12}to create a UIImage.
Dialogue: 0,0:28:48.10,0:28:50.01,yin,,0,0,0,,有了UIImage之后\N{\fs12}Once you have a UIImage in your hand,
Dialogue: 0,0:28:50.14,0:28:52.62,yin,,0,0,0,,只要向它发送drawAtPoint\N{\fs12}you just send it drawAtPoint,
Dialogue: 0,0:28:52.68,0:28:54.71,yin,,0,0,0,,就会绘制那幅图像\N{\fs12}which will draw that image
Dialogue: 0,0:28:54.72,0:28:57.58,yin,,0,0,0,,左上角位于你所指定的那个点\N{\fs12}with its upper left hand corner at the point you specified.
Dialogue: 0,0:28:57.67,0:29:00.55,yin,,0,0,0,,或者用drawInRect 这样会缩放图像\N{\fs12}Or drawInRect which will scale the image
Dialogue: 0,0:29:00.76,0:29:02.92,yin,,0,0,0,,以适合你所指定的矩形大小\N{\fs12}to fit in the rectangle you specify.
Dialogue: 0,0:29:02.97,0:29:04.59,yin,,0,0,0,,这是通过缩放实现的\N{\fs12}Okay? This is a scaling one.
Dialogue: 0,0:29:04.85,0:29:08.55,yin,,0,0,0,,drawAsPatternInRect会平铺图像\N{\fs12}Or drawAsPatternInRect which will like tile the image.
Dialogue: 0,0:29:08.64,0:29:09.70,yin,,0,0,0,,重复绘制图像\N{\fs12}You know, repeat the image
Dialogue: 0,0:29:09.71,0:29:11.77,yin,,0,0,0,,以填满你指定的矩形\N{\fs12}to fill the rectangle that you specified.
Dialogue: 0,0:29:12.52,0:29:16.45,yin,,0,0,0,,还可以得到其他表示法\N{\fs12}Okay? And you can get other representations,
Dialogue: 0,0:29:16.48,0:29:18.65,yin,,0,0,0,,绘制内容的PNG表示\N{\fs12}PNG representations of things you've drawn
Dialogue: 0,0:29:18.66,0:29:19.22,yin,,0,0,0,,这类的操作\N{\fs12}and all these things.
Dialogue: 0,0:29:19.22,0:29:20.59,yin,,0,0,0,,我只是想让大家知道有这个功能\N{\fs12}So I just wanted to let you know that's in there.
Dialogue: 0,0:29:20.59,0:29:22.68,yin,,0,0,0,,作业中不需要\N{\fs12}You don't need it for your homework but anyway.
Dialogue: 0,0:29:22.69,0:29:24.91,yin,,0,0,0,,所以绘制文本和图像非常简单\N{\fs12}So the drawing text and images really easy.
Dialogue: 0,0:29:24.92,0:29:26.80,yin,,0,0,0,,只是用到属性化字符串 UIImage\N{\fs12}It's just attributed string and UIImage,
Dialogue: 0,0:29:26.90,0:29:29.24,yin,,0,0,0,,drawAtPoint和drawInRect\N{\fs12}drawAtPoint, drawInRect. Okay?
Dialogue: 0,0:29:30.56,0:29:32.94,yin,,0,0,0,,如果bounds变化了会怎样呢\N{\fs12}What about when your bounds change? Okay?
Dialogue: 0,0:29:33.05,0:29:36.15,yin,,0,0,0,,当你添加导航栏控制器\N{\fs12}You notice when you did the navigation controller
Dialogue: 0,0:29:36.15,0:29:37.29,yin,,0,0,0,,或者选项卡栏控制器时\N{\fs12}or the tab bar, you know,
Dialogue: 0,0:29:37.30,0:29:40.54,yin,,0,0,0,,视图的bounds会缩短\N{\fs12}your bounds of your view got shrunk down
Dialogue: 0,0:29:40.55,0:29:41.65,yin,,0,0,0,,以适应底部的选项卡栏\N{\fs12}to fit the thing at the bottom
Dialogue: 0,0:29:41.65,0:29:42.95,yin,,0,0,0,,或者顶部的导航栏\N{\fs12}or fit the thing at the top.
Dialogue: 0,0:29:43.27,0:29:45.00,yin,,0,0,0,,还有在你旋转设备的时候\N{\fs12}And also if you rotate your device
Dialogue: 0,0:29:45.01,0:29:46.48,yin,,0,0,0,,显然bounds也会改变\N{\fs12}obviously the bounds are going to change.
Dialogue: 0,0:29:46.48,0:29:47.93,yin,,0,0,0,,bounds发生变化了会怎样呢\N{\fs12}What happens when your bounds change?
Dialogue: 0,0:29:47.93,0:29:52.20,yin,,0,0,0,,默认情况下 视图的比特值...\N{\fs12}Well, by default the bits of your view, the--
Dialogue: 0,0:29:52.21,0:29:55.21,yin,,0,0,0,,最后绘制的内容会被拉伸\N{\fs12}that were last draw will get stretched.
Dialogue: 0,0:29:55.64,0:29:58.93,yin,,0,0,0,,并不是我们想要的效果\N{\fs12}Okay? Which really is almost never what you want.
Dialogue: 0,0:29:58.94,0:30:02.54,yin,,0,0,0,,大部分内容都希望是被绘制出来的\N{\fs12}Okay? I mean most content wants to be drawn
Dialogue: 0,0:30:02.67,0:30:04.97,yin,,0,0,0,,这样分辨率高 看起来比较好看\N{\fs12}to get high resolution to look nice.
Dialogue: 0,0:30:05.15,0:30:08.52,yin,,0,0,0,,默认是拉伸 因为这样比重新绘制的\N{\fs12}So the default is that because it's way high performance
Dialogue: 0,0:30:08.53,0:30:10.04,yin,,0,0,0,,性能更高\N{\fs12}than asking you to draw again.
Dialogue: 0,0:30:10.50,0:30:13.07,yin,,0,0,0,,但是UIView中有一个属性\N{\fs12}But there's a property in UIView.
Dialogue: 0,0:30:13.07,0:30:15.24,yin,,0,0,0,,大家需要知道 叫做contentMode\N{\fs12}You really want to know called contentMode.
Dialogue: 0,0:30:15.47,0:30:18.05,yin,,0,0,0,,它代表bounds变化时会发生什么\N{\fs12}And it says what happens when your bounds change.
Dialogue: 0,0:30:18.19,0:30:22.65,yin,,0,0,0,,底下还有一个UIViewContentModeRedraw\N{\fs12}And the one down at the bottom there UIViewContentModeRedraw
Dialogue: 0,0:30:22.97,0:30:24.53,yin,,0,0,0,,如你所想\N{\fs12}is doing what you imagine,
Dialogue: 0,0:30:24.54,0:30:28.43,yin,,0,0,0,,是要你在bounds变化时 用drawRect\N{\fs12}which is it asks you to redraw your whole view with drawRect
Dialogue: 0,0:30:28.81,0:30:30.23,yin,,0,0,0,,重绘整个视图\N{\fs12}whenever your bounds change.
Dialogue: 0,0:30:30.85,0:30:33.59,yin,,0,0,0,,在演示中 我们会设置为重新绘制\N{\fs12}Okay? So in our demo we're going to set it to redraw
Dialogue: 0,0:30:33.59,0:30:37.24,yin,,0,0,0,,因为如果卡牌bounds发生变化 我们希望能重绘\N{\fs12}because if our cards bounds ever change we want to redraw
Dialogue: 0,0:30:37.24,0:30:39.53,yin,,0,0,0,,这样人头牌面会比较清晰\N{\fs12}so we get a nice sharp face card image
Dialogue: 0,0:30:39.55,0:30:43.32,yin,,0,0,0,,右边有小花色符号和文字等等\N{\fs12}or the right side little pips on there and text and all that.
Dialogue: 0,0:30:43.32,0:30:45.48,yin,,0,0,0,,你可能也想要这样做\N{\fs12}So you might want to do that as well.
Dialogue: 0,0:30:45.62,0:30:48.17,yin,,0,0,0,,UIViewContentModeScaleToFill是默认值\N{\fs12}Okay, UIViewContentModeScaleToFill is the default.
Dialogue: 0,0:30:48.17,0:30:49.50,yin,,0,0,0,,绘制内容会被拉伸\N{\fs12}That's the bit stretcher.
Dialogue: 0,0:30:51.47,0:30:54.49,yin,,0,0,0,,以上是绘制部分的内容\N{\fs12}Okay, so that's the drawing side of things.
Dialogue: 0,0:30:54.50,0:30:56.57,yin,,0,0,0,,我们来讲一下输入部分\N{\fs12}Now let's talk about the input side.
Dialogue: 0,0:30:56.58,0:30:58.47,yin,,0,0,0,,手势识别\N{\fs12}Okay, the recognizing gestures.
Dialogue: 0,0:30:59.17,0:31:01.54,yin,,0,0,0,,手指触摸屏幕的原始数据\N{\fs12}It is possible to get the raw data
Dialogue: 0,0:31:01.55,0:31:03.40,yin,,0,0,0,,是可以得到的\N{\fs12}about fingers touching the screen.
Dialogue: 0,0:31:03.42,0:31:06.42,yin,,0,0,0,,触摸的数量 手指的位置和移动\N{\fs12}How many they're touching, where the fingers are, when they move.
Dialogue: 0,0:31:06.43,0:31:07.84,yin,,0,0,0,,以前\N{\fs12}But-- and it used to be that
Dialogue: 0,0:31:07.86,0:31:09.61,yin,,0,0,0,,真的需要自己查看这些数据\N{\fs12}you actually had to look at all that data
Dialogue: 0,0:31:09.63,0:31:11.76,yin,,0,0,0,,判断用户在做什么\N{\fs12}to figure out what the heck the user was doing.
Dialogue: 0,0:31:11.76,0:31:13.10,yin,,0,0,0,,滑动还是捏合\N{\fs12}Swiping or pinching?
Dialogue: 0,0:31:13.11,0:31:14.24,yin,,0,0,0,,真是个噩梦\N{\fs12}It was a nightmare.
Dialogue: 0,0:31:14.24,0:31:16.23,yin,,0,0,0,,无法相信有人真的这样做了\N{\fs12}I mean I can't believe people actually did it.
Dialogue: 0,0:31:16.23,0:31:18.25,yin,,0,0,0,,代码非常难懂\N{\fs12}It was quite esoteric code.
Dialogue: 0,0:31:18.57,0:31:22.46,yin,,0,0,0,,最近发布的几个iOS版本解决了这个问题\N{\fs12}But the last few iOS releases have had the right way to do it
Dialogue: 0,0:31:22.47,0:31:24.85,yin,,0,0,0,,添加了手势识别器功能\N{\fs12}which is gesture recognizers. Okay?
Dialogue: 0,0:31:25.12,0:31:27.59,yin,,0,0,0,,所以我们理解用户操作的方法是\N{\fs12}So the way we're gonna understand what the user is doing is
Dialogue: 0,0:31:27.64,0:31:30.85,yin,,0,0,0,,系统会替我们识别特定手势\N{\fs12}this system is gonna recognize certain gestures for us
Dialogue: 0,0:31:30.86,0:31:32.62,yin,,0,0,0,,在手势发生时告诉我们\N{\fs12}and tell us when those gestures are happening.
Dialogue: 0,0:31:32.86,0:31:35.21,yin,,0,0,0,,显然我们想要用这种方式\N{\fs12}Okay? Obviously you want to do this.
Dialogue: 0,0:31:36.34,0:31:38.88,yin,,0,0,0,,有一个类\N{\fs12}The class that is the base
Dialogue: 0,0:31:38.88,0:31:40.92,yin,,0,0,0,,是这些手势识别的基础\N{\fs12}for all these recognizing gestures
Dialogue: 0,0:31:40.94,0:31:42.77,yin,,0,0,0,,叫做UIGestureRecognizer\N{\fs12}is called UIGestureRecognizer.
Dialogue: 0,0:31:42.78,0:31:44.35,yin,,0,0,0,,它是一个抽象类\N{\fs12}It's an abstract class.
Dialogue: 0,0:31:44.36,0:31:45.92,yin,,0,0,0,,不允许对它进行实例化\N{\fs12}Okay, you never instantiate it.
Dialogue: 0,0:31:46.08,0:31:48.59,yin,,0,0,0,,但它有很多具体子类\N{\fs12}But it has a lot of concrete subclasses
Dialogue: 0,0:31:48.61,0:31:50.97,yin,,0,0,0,,比如捏合手势 点击手势等\N{\fs12}like pinch gesture, tap gesture, all that.
Dialogue: 0,0:31:51.33,0:31:52.19,yin,,0,0,0,,这些具体子类\N{\fs12}And those are the things
Dialogue: 0,0:31:52.20,0:31:54.60,yin,,0,0,0,,能够真正识别手势\N{\fs12}that does the actual recognition of a gesture
Dialogue: 0,0:31:54.61,0:31:56.96,yin,,0,0,0,,并在手势发生时与你通信\N{\fs12}and communicating with you when it does.
Dialogue: 0,0:31:57.47,0:32:00.04,yin,,0,0,0,,使用手势识别器有两步\N{\fs12}There's two parts to using a gesture recognizer.
Dialogue: 0,0:32:00.05,0:32:04.40,yin,,0,0,0,,先要创建手势识别器 添加到视图中\N{\fs12}You have to create a gesture recognizer and add it to a view.
Dialogue: 0,0:32:04.58,0:32:06.88,yin,,0,0,0,,只能将识别器添加到视图中\N{\fs12}You can only add a recognizer to a view.
Dialogue: 0,0:32:07.00,0:32:09.12,yin,,0,0,0,,因为只有视图具有坐标系\N{\fs12}Because views are the only ones that have a coordinate system
Dialogue: 0,0:32:09.14,0:32:11.47,yin,,0,0,0,,能够知道触发手势的\N{\fs12}to know where the touches were
Dialogue: 0,0:32:11.67,0:32:13.10,yin,,0,0,0,,触摸的位置\N{\fs12}that cause the gesture to happen.
Dialogue: 0,0:32:13.39,0:32:15.92,yin,,0,0,0,,第二步是你需要提供一个处理器\N{\fs12}And then number two is you've got to provide the handler,
Dialogue: 0,0:32:15.93,0:32:18.42,yin,,0,0,0,,当手势发生时要调用的一个方法\N{\fs12}a method to call when the gesture happens
Dialogue: 0,0:32:18.42,0:32:19.37,yin,,0,0,0,,或者是手势正在发生时\N{\fs12}or is happening.
Dialogue: 0,0:32:19.43,0:32:21.55,yin,,0,0,0,,如果是捏合手势\N{\fs12}If it's like a pinch it's, you know,
Dialogue: 0,0:32:21.55,0:32:23.91,yin,,0,0,0,,手势处理器会随着来回缩放\N{\fs12}that gesture handle is going to get called a lot
Dialogue: 0,0:32:23.97,0:32:25.29,yin,,0,0,0,,多次被调用\N{\fs12}as the pinch goes out and in.
Dialogue: 0,0:32:25.29,0:32:26.42,yin,,0,0,0,,拖动手势也是这样\N{\fs12}Or if it's a pan.
Dialogue: 0,0:32:26.66,0:32:28.70,yin,,0,0,0,,但如果是滑动或点击\N{\fs12}Okay? But if it's a swipe or a tap
Dialogue: 0,0:32:28.71,0:32:30.04,yin,,0,0,0,,就只会调用一次\N{\fs12}you're just going to get called once.
Dialogue: 0,0:32:30.71,0:32:31.31,yin,,0,0,0,,明白吗\N{\fs12}Make sense?
Dialogue: 0,0:32:32.02,0:32:33.75,yin,,0,0,0,,这就是需要做的两步操作\N{\fs12}So those are the two things that you need to do.
Dialogue: 0,0:32:33.93,0:32:36.53,yin,,0,0,0,,第一步一般由控制器完成\N{\fs12}Usually number one is done by controller,
Dialogue: 0,0:32:36.53,0:32:38.96,yin,,0,0,0,,但有时是视图自己完成\N{\fs12}although it's sometimes views do it to themselves
Dialogue: 0,0:32:38.96,0:32:41.57,yin,,0,0,0,,为自己添加一个手势识别器\N{\fs12}where they add a gesture recognizer to themselves.
Dialogue: 0,0:32:41.72,0:32:44.05,yin,,0,0,0,,而步骤二通常由视图提供\N{\fs12}And number two is often provided by the view.
Dialogue: 0,0:32:44.05,0:32:45.14,yin,,0,0,0,,也就是说 处理器\N{\fs12}In other words the handler,
Dialogue: 0,0:32:45.15,0:32:48.80,yin,,0,0,0,,手势发生时或发生后要做的事情\N{\fs12}the thing to do when the gesture is happening or happened,
Dialogue: 0,0:32:48.81,0:32:51.27,yin,,0,0,0,,很多时候 是视图实现了那个方法\N{\fs12}a lot of times the view implements that method.
Dialogue: 0,0:32:51.55,0:32:53.06,yin,,0,0,0,,所以即便可能是由控制器\N{\fs12}So even though the controller
Dialogue: 0,0:32:53.07,0:32:55.63,yin,,0,0,0,,向视图添加了手势识别器\N{\fs12}might add the gesture recognizer to the view,
Dialogue: 0,0:32:55.79,0:32:58.07,yin,,0,0,0,,当它添加时 它会告诉系统\N{\fs12}when it adds it, it tells the system
Dialogue: 0,0:32:58.08,0:33:01.25,yin,,0,0,0,,如果你识别出手势 让视图来处理\N{\fs12}and when you recognize the gesture, let the view handle it.
Dialogue: 0,0:33:01.75,0:33:03.30,yin,,0,0,0,,但是控制器可以自行处理\N{\fs12}But the controller can handle it itself.
Dialogue: 0,0:33:03.30,0:33:04.78,yin,,0,0,0,,两种方式我们都会演示\N{\fs12}So we'll do both in the demo.
Dialogue: 0,0:33:04.78,0:33:05.96,yin,,0,0,0,,让控制器来处理\N{\fs12}We'll have the controller handle it.
Dialogue: 0,0:33:05.96,0:33:07.16,yin,,0,0,0,,和让视图来处理\N{\fs12}We'll have the view handle it.
Dialogue: 0,0:33:07.17,0:33:07.94,yin,,0,0,0,,都演示一下\N{\fs12}The whole deal.
Dialogue: 0,0:33:10.33,0:33:11.64,yin,,0,0,0,,我们来看一下代码\N{\fs12}So let's take a look at the code.
Dialogue: 0,0:33:11.64,0:33:12.83,yin,,0,0,0,,向视图添加手势识别器的\N{\fs12}What the code would look like
Dialogue: 0,0:33:12.99,0:33:16.33,yin,,0,0,0,,代码是怎样的\N{\fs12}to add a gesture recognizer to a view.
Dialogue: 0,0:33:16.34,0:33:18.78,yin,,0,0,0,,在控制器中向视图添加手势识别器\N{\fs12}A gesture recognizer to a view in a controller.
Dialogue: 0,0:33:18.78,0:33:21.23,yin,,0,0,0,,所以这段示例代码是在控制器中的\N{\fs12}So this code that I'm trying right here is in a controller.
Dialogue: 0,0:33:21.37,0:33:26.20,yin,,0,0,0,,它是视图输出口panableView的setter\N{\fs12}It's the setter of an outlet for a view called pannableView.
Dialogue: 0,0:33:26.88,0:33:28.75,yin,,0,0,0,,输出口叫做pannableView\N{\fs12}Okay? That's the name of the outlet, pannableView.
Dialogue: 0,0:33:29.06,0:33:31.19,yin,,0,0,0,,按住control键进行拖动\N{\fs12}So this would just control drag.
Dialogue: 0,0:33:31.33,0:33:33.54,yin,,0,0,0,,连接起来就创建了输出口\N{\fs12}Wire it up and now as an outlet
Dialogue: 0,0:33:33.54,0:33:34.74,yin,,0,0,0,,这是输出口的setter\N{\fs12}and now we're in the setter.
Dialogue: 0,0:33:34.91,0:33:36.23,yin,,0,0,0,,而在setter中要做的是\N{\fs12}And in the setter what we're going to do is
Dialogue: 0,0:33:36.23,0:33:38.64,yin,,0,0,0,,当控制器中的视图设好以后\N{\fs12}when that view is set in our controller,
Dialogue: 0,0:33:38.65,0:33:40.93,yin,,0,0,0,,我们要向那个视图添加手势识别器\N{\fs12}we're going to add a gesture recognizer to that view.
Dialogue: 0,0:33:41.43,0:33:44.73,yin,,0,0,0,,这样视图就可以识别拖动手势了\N{\fs12}So that that view starts recognizing the pan gesture.
Dialogue: 0,0:33:44.74,0:33:46.88,yin,,0,0,0,,拖动是指用手指触摸着屏幕来回移动\N{\fs12}Pan is put your finger down and move around.
Dialogue: 0,0:33:47.23,0:33:48.10,yin,,0,0,0,,这叫拖动\N{\fs12}That's called panning.
Dialogue: 0,0:33:49.49,0:33:50.62,yin,,0,0,0,,非常简单\N{\fs12}So it's very simple.
Dialogue: 0,0:33:50.80,0:33:51.41,yin,,0,0,0,,可以看到\N{\fs12}You can see that
Dialogue: 0,0:33:51.42,0:33:54.76,yin,,0,0,0,,我们创建了一个UIGestureRecognizer的具体子类\N{\fs12}we create a concrete subclass of gesture recognizer
Dialogue: 0,0:33:54.78,0:33:56.37,yin,,0,0,0,,叫做UIPanGestureRecognizer\N{\fs12}called UIPanGestureRecognizer.
Dialogue: 0,0:33:56.37,0:33:57.94,yin,,0,0,0,,就是黄色气泡显示的那条代码\N{\fs12}You see that there in the yellow bubble.
Dialogue: 0,0:33:58.29,0:34:02.03,yin,,0,0,0,,可以看到创建时的指定初始化方法\N{\fs12}And when we create it you can see its designated initializer.
Dialogue: 0,0:34:02.03,0:34:05.64,yin,,0,0,0,,所有实体类的指定初始化方法\N{\fs12}All the concrete classes' designate initializer
Dialogue: 0,0:34:05.81,0:34:06.80,yin,,0,0,0,,都需要两个参数\N{\fs12}take two arguments.
Dialogue: 0,0:34:06.81,0:34:08.13,yin,,0,0,0,,一个是target目标\N{\fs12}One is the target.
Dialogue: 0,0:34:08.16,0:34:10.90,yin,,0,0,0,,也就是手势发生时 谁来处理\N{\fs12}That's who's going to handle this gesture when it happens.
Dialogue: 0,0:34:11.15,0:34:14.43,yin,,0,0,0,,第二个参数是该对象中要调用的方法\N{\fs12}And the second thing is the method to call in that object.
Dialogue: 0,0:34:15.01,0:34:17.84,yin,,0,0,0,,所以这里pan要被发送到那个视图\N{\fs12}So here pan is going to be sent to the view itself.
Dialogue: 0,0:34:18.45,0:34:19.54,yin,,0,0,0,,也就是我们要为其添加手势识别器的\N{\fs12}The same view that we're gonna
Dialogue: 0,0:34:19.55,0:34:21.22,yin,,0,0,0,,那个视图\N{\fs12}add this gesture recognizer to.
Dialogue: 0,0:34:21.76,0:34:23.21,yin,,0,0,0,,下面一步就只要\N{\fs12}And then we just do the step
Dialogue: 0,0:34:23.22,0:34:25.45,yin,,0,0,0,,将手势识别器添加到视图\N{\fs12}of adding the gesture recognizer to the view.
Dialogue: 0,0:34:25.54,0:34:27.31,yin,,0,0,0,,addGestureRecognizer方法\N{\fs12}The method addGestureRecognizer
Dialogue: 0,0:34:27.32,0:34:29.37,yin,,0,0,0,,只能由UIView实现\N{\fs12}is only implemented by UIView.
Dialogue: 0,0:34:29.84,0:34:32.38,yin,,0,0,0,,控制器无法识别手势\N{\fs12}So a controller can't recognize a gesture.
Dialogue: 0,0:34:32.38,0:34:34.69,yin,,0,0,0,,它没有坐标系 任何方法都无法完成\N{\fs12}It was no coordinate system to do that in any way.
Dialogue: 0,0:34:34.80,0:34:37.29,yin,,0,0,0,,所以某些视图需要处理手势\N{\fs12}So some view has to be handling this gesture
Dialogue: 0,0:34:37.31,0:34:40.53,yin,,0,0,0,,当然可以用self.view识别手势\N{\fs12}and yes you can have self.view recognize gestures.
Dialogue: 0,0:34:40.53,0:34:41.48,yin,,0,0,0,,用整个视图\N{\fs12}Right? The whole view.
Dialogue: 0,0:34:41.49,0:34:42.60,yin,,0,0,0,,完全没问题\N{\fs12}That's perfectly fine.
Dialogue: 0,0:34:43.03,0:34:46.44,yin,,0,0,0,,操作中的目标target可以是控制器\N{\fs12}And yes, the target in action could be the controller.
Dialogue: 0,0:34:46.44,0:34:47.53,yin,,0,0,0,,控制器中的方法\N{\fs12}A method in the controller.
Dialogue: 0,0:34:47.54,0:34:49.16,yin,,0,0,0,,不一定是视图\N{\fs12}It doesn't have to be a view.
Dialogue: 0,0:34:49.63,0:34:51.43,yin,,0,0,0,,可以是任意对象\N{\fs12}Okay? That can be any object.
Dialogue: 0,0:34:54.29,0:34:58.17,yin,,0,0,0,,那我们如何实现目标呢 那个拖动调用\N{\fs12}So how do we implement that target, that pan calling. Right?
Dialogue: 0,0:34:58.34,0:35:00.74,yin,,0,0,0,,我在拖动 在捏合\N{\fs12}So I'm panning, I'm pinching
Dialogue: 0,0:35:00.83,0:35:03.93,yin,,0,0,0,,在拖动时发送拖动调用\N{\fs12}and I'm getting sent pan calling when I'm panning.
Dialogue: 0,0:35:04.09,0:35:05.85,yin,,0,0,0,,我要在那个方法中做什么呢\N{\fs12}What do I do inside that method?
Dialogue: 0,0:35:06.24,0:35:09.49,yin,,0,0,0,,答案是 UIGestureRecognizer的所有具体子类\N{\fs12}And the answer is that each concrete subclass
Dialogue: 0,0:35:09.49,0:35:13.25,yin,,0,0,0,,都会提供一些方法来辅助你\N{\fs12}of UIGestureRecognizer will provide some methods to help you.
Dialogue: 0,0:35:13.47,0:35:16.06,yin,,0,0,0,,例如 UIPanGestureRecognizer\N{\fs12}Okay? So for example the pan gesture recognizer
Dialogue: 0,0:35:16.19,0:35:17.67,yin,,0,0,0,,提供这三个方法\N{\fs12}provides these three methods.
Dialogue: 0,0:35:17.68,0:35:22.91,yin,,0,0,0,,translationInView代表触摸移动距离\N{\fs12}TranslationInView, that's how far the touch moved
Dialogue: 0,0:35:23.02,0:35:27.09,yin,,0,0,0,,从上次重置之后的移动距离\N{\fs12}since it's-- since basically it was last reset.
Dialogue: 0,0:35:27.45,0:35:31.03,yin,,0,0,0,,手指触摸到屏幕时 系统进行重置\N{\fs12}Okay? It starts off reset when the touch goes down.
Dialogue: 0,0:35:31.03,0:35:32.99,yin,,0,0,0,,在移动过程中 你可以重置\N{\fs12}So as you move unless you reset it
Dialogue: 0,0:35:32.99,0:35:34.58,yin,,0,0,0,,可以在识别器中实现\N{\fs12}which you can do in your recognizer.
Dialogue: 0,0:35:34.58,0:35:35.38,yin,,0,0,0,,稍后会演示\N{\fs12}We'll show you that.
Dialogue: 0,0:35:36.12,0:35:39.91,yin,,0,0,0,,这个方法会告诉你从起点开始的\N{\fs12}It's going to tell you the cumulative translation distance
Dialogue: 0,0:35:39.91,0:35:40.86,yin,,0,0,0,,累计移动距离\N{\fs12}from where you started.
Dialogue: 0,0:35:41.20,0:35:43.26,yin,,0,0,0,,这就是translationView\N{\fs12}Okay? So that's translationView.
Dialogue: 0,0:35:43.32,0:35:47.25,yin,,0,0,0,,velocityInView代表移动速度\N{\fs12}velocityInView is how fast it's moving.
Dialogue: 0,0:35:47.48,0:35:48.97,yin,,0,0,0,,手指移动速度是不是很快\N{\fs12}Is your finger moving quickly
Dialogue: 0,0:35:49.07,0:35:50.93,yin,,0,0,0,,好像滑动之类的\N{\fs12}like it's almost like a swipe or something?
Dialogue: 0,0:35:50.93,0:35:52.51,yin,,0,0,0,,还是移动得很慢\N{\fs12}Or is it moving really slow?
Dialogue: 0,0:35:52.51,0:35:55.22,yin,,0,0,0,,用户是想做些精细操作吗\N{\fs12}Is the user trying to really do some detail work?
Dialogue: 0,0:35:55.22,0:35:56.70,yin,,0,0,0,,这个方法可以提供速度信息\N{\fs12}So this is telling the velocity.
Dialogue: 0,0:35:56.94,0:35:58.83,yin,,0,0,0,,最后一个setTranslation inView\N{\fs12}And then setTranslation inView
Dialogue: 0,0:35:58.85,0:36:00.93,yin,,0,0,0,,允许你对移动距离进行重置\N{\fs12}allows you to reset the translation.
Dialogue: 0,0:36:01.75,0:36:02.97,yin,,0,0,0,,我刚才讲了\N{\fs12}Okay? Because I told you
Dialogue: 0,0:36:02.98,0:36:05.09,yin,,0,0,0,,translationInView代表上次重置之后的距离\N{\fs12}translationInView is since the last reset.
Dialogue: 0,0:36:05.37,0:36:07.92,yin,,0,0,0,,setTranslation可以将其重置至某点\N{\fs12}SetTranslation will let you to reset it to some point.
Dialogue: 0,0:36:08.32,0:36:10.23,yin,,0,0,0,,然后下次拖动被调用时\N{\fs12}And then the next pan calling in you get,
Dialogue: 0,0:36:10.24,0:36:11.39,yin,,0,0,0,,下次手指移动时\N{\fs12}the next finger movement,
Dialogue: 0,0:36:11.59,0:36:12.63,yin,,0,0,0,,移动距离就会是\N{\fs12}the translation will be
Dialogue: 0,0:36:12.64,0:36:14.83,yin,,0,0,0,,从重置的那个点到最后位置的距离\N{\fs12}from the place you just reset to the last time.
Dialogue: 0,0:36:17.79,0:36:22.62,yin,,0,0,0,,这就是UIPanGestureRecognizer提供的方法\N{\fs12}So those are given to you by pan gesture recognizer
Dialogue: 0,0:36:22.62,0:36:24.10,yin,,0,0,0,,你还继承了...\N{\fs12}and you also inherit --
Dialogue: 0,0:36:24.34,0:36:28.59,yin,,0,0,0,,UIPanGestureRecognizer还从UIGestureRecognizer\N{\fs12}pan gesture also inherits a very important property
Dialogue: 0,0:36:28.73,0:36:31.18,yin,,0,0,0,,从这个抽象超类继承了一个非常重要的属性\N{\fs12}from UIGestureRecognizer, the abstract superclass
Dialogue: 0,0:36:31.20,0:36:32.09,yin,,0,0,0,,叫做state状态\N{\fs12}called state.
Dialogue: 0,0:36:32.49,0:36:35.13,yin,,0,0,0,,状态有很多种不同的情况\N{\fs12}Now state can be a lot of different things.
Dialogue: 0,0:36:35.13,0:36:36.90,yin,,0,0,0,,这里是比较有趣的几个状态\N{\fs12}Here are some of the more interesting ones.
Dialogue: 0,0:36:37.45,0:36:41.32,yin,,0,0,0,,UIGestureRecognizerStateBegan表示\N{\fs12}UIGestureRecognizerStateBegan means
Dialogue: 0,0:36:41.43,0:36:45.02,yin,,0,0,0,,这是一个连续运动的手势\N{\fs12}this is a continuous motion kind of thing
Dialogue: 0,0:36:45.03,0:36:46.64,yin,,0,0,0,,比如拖动或捏合\N{\fs12}like a pan or a pinch
Dialogue: 0,0:36:47.06,0:36:48.09,yin,,0,0,0,,而它刚刚开始\N{\fs12}and it just started.
Dialogue: 0,0:36:48.55,0:36:49.55,yin,,0,0,0,,手指刚触碰到屏幕\N{\fs12}Finger just went down.
Dialogue: 0,0:36:50.02,0:36:54.05,yin,,0,0,0,,UIGestureRecognizerStateChanged表示\N{\fs12}Okay? Then UIGestureRecognizerStateChanged means
Dialogue: 0,0:36:54.06,0:36:56.24,yin,,0,0,0,,这是一个连续运动手势 并且它变化了\N{\fs12}it's one of those continuous things and it changed.
Dialogue: 0,0:36:56.35,0:36:57.09,yin,,0,0,0,,手指移动了\N{\fs12}The fingers moved.
Dialogue: 0,0:36:57.63,0:36:58.92,yin,,0,0,0,,Changed代表手指移动了\N{\fs12}Okay? Changed means it moved.
Dialogue: 0,0:36:59.03,0:37:01.70,yin,,0,0,0,,还有UIGestureRecognizerStateEnded\N{\fs12}And then there's UIGestureRecognizerStateEnded.
Dialogue: 0,0:37:02.24,0:37:03.07,yin,,0,0,0,,手指抬离屏幕了\N{\fs12}Finger went up.
Dialogue: 0,0:37:03.70,0:37:04.92,yin,,0,0,0,,和大家可能想到的一样\N{\fs12}Okay? Exactly what you would think.
Dialogue: 0,0:37:05.21,0:37:08.83,yin,,0,0,0,,还有其他的状态 比如\N{\fs12}But there's other states like UIGestureRecognizerState--
Dialogue: 0,0:37:10.97,0:37:12.56,yin,,0,0,0,,UIGestureRecognizerStateRecognized\N{\fs12}what's it called-- recognized.
Dialogue: 0,0:37:12.73,0:37:15.42,yin,,0,0,0,,它出现于不连续手势的情况\N{\fs12}Okay? That one you get for discrete gestures
Dialogue: 0,0:37:15.45,0:37:17.01,yin,,0,0,0,,比如点击或滑动\N{\fs12}like taps or swipes.
Dialogue: 0,0:37:17.25,0:37:21.73,yin,,0,0,0,,你不会得到Began Changed Ended状态\N{\fs12}You don't get all this began, moved or began changed ended.
Dialogue: 0,0:37:21.85,0:37:23.32,yin,,0,0,0,,只会得到Recognized\N{\fs12}You just get recognized.
Dialogue: 0,0:37:23.33,0:37:24.46,yin,,0,0,0,,我识别出了滑动\N{\fs12}I recognize the swipe.
Dialogue: 0,0:37:24.47,0:37:25.71,yin,,0,0,0,,我识别出了点击\N{\fs12}I recognize the tap.
Dialogue: 0,0:37:26.37,0:37:28.52,yin,,0,0,0,,明白吗 有几种不同的状态\N{\fs12}You see? So different state there.
Dialogue: 0,0:37:28.67,0:37:31.80,yin,,0,0,0,,所以连续手势是得不到Recognized的\N{\fs12}So recognized you'll never get on the continuous ones.
Dialogue: 0,0:37:32.51,0:37:33.25,yin,,0,0,0,,可能会得到\N{\fs12}Well, you might get it,
Dialogue: 0,0:37:33.27,0:37:34.69,yin,,0,0,0,,但是不会太在意它\N{\fs12}but you wouldn't pay much attention to it.
Dialogue: 0,0:37:34.83,0:37:36.49,yin,,0,0,0,,但是不连续手势中就是要看这个状态\N{\fs12}But on the discrete ones that's what you look at,
Dialogue: 0,0:37:36.49,0:37:39.07,yin,,0,0,0,,连续手势对应的是Began Changed Ended\N{\fs12}vice versa with the began, changed, ended.
Dialogue: 0,0:37:39.55,0:37:41.73,yin,,0,0,0,,还可以得到Cancelled和Failed\N{\fs12}You can also get cancelled and failed,
Dialogue: 0,0:37:41.84,0:37:42.67,yin,,0,0,0,,这类状态\N{\fs12}things like that.
Dialogue: 0,0:37:42.95,0:37:44.20,yin,,0,0,0,,它们出现的情况是\N{\fs12}These happen when things like
Dialogue: 0,0:37:44.21,0:37:45.10,yin,,0,0,0,,你正在做手势时\N{\fs12}you're in the middle of a gesture
Dialogue: 0,0:37:45.11,0:37:46.46,yin,,0,0,0,,有电话打进来了\N{\fs12}and a phone call comes in.
Dialogue: 0,0:37:46.62,0:37:49.15,yin,,0,0,0,,这时手势就断掉了\N{\fs12}Okay? Boom, that gesture just got blown out of the water.
Dialogue: 0,0:37:49.28,0:37:52.48,yin,,0,0,0,,所以好的代码都会注意Failed和Canceled\N{\fs12}So really good code will pay attention to failed and canceled
Dialogue: 0,0:37:52.59,0:37:54.76,yin,,0,0,0,,确保当手势中断时\N{\fs12}and make sure these things aren't in a wacky state
Dialogue: 0,0:37:54.76,0:37:56.86,yin,,0,0,0,,它们的状态正常\N{\fs12}if the thing gets aborted right in the middle.
Dialogue: 0,0:37:57.93,0:37:59.42,yin,,0,0,0,,我就不演示了\N{\fs12}So I'm not going to show that in the demo
Dialogue: 0,0:37:59.43,0:38:01.66,yin,,0,0,0,,因为时间很紧张\N{\fs12}because time is gonna be of the essence here.
Dialogue: 0,0:38:01.67,0:38:03.37,yin,,0,0,0,,大家可以查看相关文档\N{\fs12}But you can look at the documentation
Dialogue: 0,0:38:03.38,0:38:04.30,yin,,0,0,0,,学习如何处理这些状态\N{\fs12}on how to handle those.
Dialogue: 0,0:38:05.20,0:38:05.64,yin,,0,0,0,,好了\N{\fs12}All right.
Dialogue: 0,0:38:05.83,0:38:07.47,yin,,0,0,0,,这些具体子类\N{\fs12}So what would pan look like
Dialogue: 0,0:38:07.51,0:38:08.96,yin,,0,0,0,,为我们提供了这些方法\N{\fs12}given that we have those methods
Dialogue: 0,0:38:08.97,0:38:10.76,yin,,0,0,0,,那么pan方法是如何实现的呢\N{\fs12}that the concrete things provides?
Dialogue: 0,0:38:10.91,0:38:13.03,yin,,0,0,0,,当手指刚放到屏幕上的时候\N{\fs12}So I'm probably not going to do anything
Dialogue: 0,0:38:13.03,0:38:14.80,yin,,0,0,0,,我可能不会做任何操作\N{\fs12}when the finger first goes down
Dialogue: 0,0:38:15.15,0:38:16.79,yin,,0,0,0,,因为还没有发生任何实际的变化\N{\fs12}because nothing has really changed yet.
Dialogue: 0,0:38:16.90,0:38:18.52,yin,,0,0,0,,但只要手指开始移动\N{\fs12}But as soon as it starts changing
Dialogue: 0,0:38:18.63,0:38:20.86,yin,,0,0,0,,或者离开屏幕\N{\fs12}or when the finger goes back up
Dialogue: 0,0:38:21.03,0:38:24.41,yin,,0,0,0,,我就要根据新位置的不同\N{\fs12}I'm then going to update something inside my view
Dialogue: 0,0:38:24.54,0:38:28.35,yin,,0,0,0,,更新视图内的某些内容\N{\fs12}based on where this new position is.
Dialogue: 0,0:38:28.37,0:38:29.49,yin,,0,0,0,,而获取新位置的方法\N{\fs12}And I'm going to get that new position
Dialogue: 0,0:38:29.49,0:38:32.55,yin,,0,0,0,,就是向recognizer这个UIPanGestureRecognizer请求\N{\fs12}by asking the recognizer, the pan gesture recognizer
Dialogue: 0,0:38:32.89,0:38:35.25,yin,,0,0,0,,在当前视图中的移动距离\N{\fs12}what's the translation in the view self.
Dialogue: 0,0:38:35.27,0:38:37.64,yin,,0,0,0,,在获取移动距离时\N{\fs12}Okay? The reason we specify the view
Dialogue: 0,0:38:37.66,0:38:38.73,yin,,0,0,0,,指定视图\N{\fs12}when we say the translation
Dialogue: 0,0:38:38.73,0:38:40.23,yin,,0,0,0,,是因为我们需要坐标系\N{\fs12}is because we need a coordinate system.
Dialogue: 0,0:38:41.02,0:38:42.52,yin,,0,0,0,,我们需要知道\N{\fs12}Okay? We got to know what coordinate system
Dialogue: 0,0:38:42.53,0:38:45.02,yin,,0,0,0,,是在哪个坐标系中移动的\N{\fs12}we're talking about this translation being.
Dialogue: 0,0:38:45.22,0:38:47.22,yin,,0,0,0,,所以在这个例子中是self\N{\fs12}All right. So self in this case,
Dialogue: 0,0:38:47.23,0:38:48.95,yin,,0,0,0,,因为拖动调用发生在视图中\N{\fs12}because pan calling is in the view.
Dialogue: 0,0:38:49.72,0:38:52.27,yin,,0,0,0,,我可能会设置原点或者某些属性\N{\fs12}Like I might set my origin or some property.
Dialogue: 0,0:38:52.27,0:38:53.84,yin,,0,0,0,,这行示例代码\N{\fs12}This is just an example line of code
Dialogue: 0,0:38:53.85,0:38:55.03,yin,,0,0,0,,就是假设我有一幅图之类的\N{\fs12}if I had a graph of something like that.
Dialogue: 0,0:38:55.03,0:38:56.94,yin,,0,0,0,,或许会移动这幅图\N{\fs12}Maybe moving the graph around.
Dialogue: 0,0:38:57.40,0:38:59.21,yin,,0,0,0,,就是不断重置原点\N{\fs12}It's just constantly resetting the origin.
Dialogue: 0,0:38:59.44,0:39:02.47,yin,,0,0,0,,既然我在移动原点时\N{\fs12}And here since I'm moving the origin
Dialogue: 0,0:39:02.48,0:39:04.98,yin,,0,0,0,,是将原点从调用时所在位置\N{\fs12}from where it exists at the time this is called
Dialogue: 0,0:39:05.22,0:39:06.76,yin,,0,0,0,,按照移动距离进行移动\N{\fs12}by some little translation
Dialogue: 0,0:39:06.91,0:39:09.33,yin,,0,0,0,,我希望每次都重置移动距离\N{\fs12}I want to reset that translation every time.
Dialogue: 0,0:39:09.78,0:39:13.16,yin,,0,0,0,,这样就总能得到小的移动距离增量\N{\fs12}So that I'm always getting little incremental translation movements
Dialogue: 0,0:39:13.18,0:39:15.58,yin,,0,0,0,,一点点地移动原点\N{\fs12}and I'm moving my origin around incrementally.
Dialogue: 0,0:39:15.90,0:39:18.76,yin,,0,0,0,,否则我还得记着原点最初的位置\N{\fs12}Otherwise I'd have to keep track of where did my origin start,
Dialogue: 0,0:39:18.88,0:39:20.09,yin,,0,0,0,,然后每次调用这个方法时\N{\fs12}and then every time this was called
Dialogue: 0,0:39:20.10,0:39:22.19,yin,,0,0,0,,还要找出不同 然后再移动\N{\fs12}I'd have to find the difference and then move it .
Dialogue: 0,0:39:22.71,0:39:23.91,yin,,0,0,0,,用这里的这种方法 我就不用担心了\N{\fs12}This way I don't have to worry about it.
Dialogue: 0,0:39:23.91,0:39:26.14,yin,,0,0,0,,我只要不断将距离重置为零\N{\fs12}I just keep resetting the thing back to zero
Dialogue: 0,0:39:26.31,0:39:28.67,yin,,0,0,0,,这样就会不断得到较小的移动距离\N{\fs12}and so I keep getting these tiny changes.
Dialogue: 0,0:39:28.67,0:39:30.39,yin,,0,0,0,,随时将其应用到视图中\N{\fs12}I just keep applying them to my view.
Dialogue: 0,0:39:30.57,0:39:33.74,yin,,0,0,0,,连续手势采用这种模式是很常见的\N{\fs12}This's very common pattern to do this for these continuous ones.
Dialogue: 0,0:39:33.81,0:39:34.95,yin,,0,0,0,,不断重置\N{\fs12}Constantly resetting.
Dialogue: 0,0:39:35.41,0:39:36.42,yin,,0,0,0,,我们会在演示中实现\N{\fs12}We'll do that in our demo.
Dialogue: 0,0:39:36.42,0:39:38.51,yin,,0,0,0,,我们要实现的是缩放 但同样是通过重置的方法\N{\fs12}We're going to do pinch but we'll do the same resetting.
Dialogue: 0,0:39:41.46,0:39:44.97,yin,,0,0,0,,我们再看看其他具体识别类\N{\fs12}Okay, so let's look at some of the other concrete recognizers.
Dialogue: 0,0:39:45.33,0:39:47.79,yin,,0,0,0,,Pinch捏合 它没有移动距离属性\N{\fs12}Pinch. Okay, pinch doesn't have translation,
Dialogue: 0,0:39:47.80,0:39:48.83,yin,,0,0,0,,它有一个缩放比例属性scale\N{\fs12}it has a scale.
Dialogue: 0,0:39:49.34,0:39:52.79,yin,,0,0,0,,捏合手势刚开始时 缩放比例为1.0\N{\fs12}So when the pinch first starts, the scale is one, 1.0.
Dialogue: 0,0:39:53.14,0:39:57.50,yin,,0,0,0,,随着逐渐放大 比例变为1.1 1.2 1.5 2.0\N{\fs12}And as I go out 1.1, 1.2, 1.5, 2.0.
Dialogue: 0,0:39:58.11,0:40:02.15,yin,,0,0,0,,随着缩小又变为1.5, 1.2, 1.0, 0.9, 0.8, 0.7, 0.6\N{\fs12}1.5, 1.2, 1.0, 0.9, 0.8, 0.7, 0.6.
Dialogue: 0,0:40:03.18,0:40:04.49,yin,,0,0,0,,明白吗\N{\fs12}Okay? That make sense?
Dialogue: 0,0:40:04.71,0:40:05.64,yin,,0,0,0,,就是这样变化的\N{\fs12}So, that's what is happening there.
Dialogue: 0,0:40:05.68,0:40:09.60,yin,,0,0,0,,速度velocity指的是比例系数的变化速度\N{\fs12}And then, the velocity is how fast in scale factor change,
Dialogue: 0,0:40:09.61,0:40:11.88,yin,,0,0,0,,每秒钟变化多少\N{\fs12}per second that's happening.
Dialogue: 0,0:40:11.89,0:40:13.89,yin,,0,0,0,,你是在快速缩小呢\N{\fs12}So, are you pinching really fast in,
Dialogue: 0,0:40:13.91,0:40:15.47,yin,,0,0,0,,还是在快速放大 等等\N{\fs12}pinching fast out, etcetera?
Dialogue: 0,0:40:15.48,0:40:17.42,yin,,0,0,0,,这可以告诉你某些迹象\N{\fs12}So, that's giving you, again, some indication,
Dialogue: 0,0:40:17.42,0:40:18.67,yin,,0,0,0,,用户在做什么\N{\fs12}what's the user--
Dialogue: 0,0:40:18.70,0:40:20.80,yin,,0,0,0,,如果他们迅速反复放大\N{\fs12}if they're pinching out really quickly, repeatedly,
Dialogue: 0,0:40:20.81,0:40:22.37,yin,,0,0,0,,也许他们是想要快速放大\N{\fs12}maybe they're trying to really zoom out fast,
Dialogue: 0,0:40:22.37,0:40:24.54,yin,,0,0,0,,你可以用更快的速度放大之类的\N{\fs12}you can zoom out faster than usual or something.
Dialogue: 0,0:40:25.73,0:40:28.53,yin,,0,0,0,,旋转手势识别 也是两指手势\N{\fs12}Rotation Gesture Recognizer, also a two-finger thing,
Dialogue: 0,0:40:28.53,0:40:30.73,yin,,0,0,0,,和捏合很像 但是会旋转手指\N{\fs12}like a pinch, except for you turn your fingers.
Dialogue: 0,0:40:31.05,0:40:34.58,yin,,0,0,0,,它会通过弧度告诉你旋转的信息\N{\fs12}And it's going to tell you the rotation in radians.
Dialogue: 0,0:40:34.85,0:40:36.59,yin,,0,0,0,,大家都知道什么是弧度吧\N{\fs12}Everyone know what radians are, right?
Dialogue: 0,0:40:36.61,0:40:39.29,yin,,0,0,0,,一圈对应的弧度是0到2π\N{\fs12}Zero to 2 pi around a circle, in radians.
Dialogue: 0,0:40:40.19,0:40:41.44,yin,,0,0,0,,如果不知道就去查一下\N{\fs12}Look it up if you don't know it.
Dialogue: 0,0:40:41.58,0:40:44.36,yin,,0,0,0,,它也有速度属性 告诉你每秒的变化弧度\N{\fs12}And that's also telling you velocity in radians per second,
Dialogue: 0,0:40:44.69,0:40:47.42,yin,,0,0,0,,用户旋转的速度是怎样的\N{\fs12}how fast they're-- the person're rotating.
Dialogue: 0,0:40:48.24,0:40:50.69,yin,,0,0,0,,滑动手势是不连续手势之一\N{\fs12}Swipe Gesture is one of these discrete gestures.
Dialogue: 0,0:40:50.78,0:40:52.90,yin,,0,0,0,,你只要设好这个滑动手势\N{\fs12}You just set up this Swipe Gesture,
Dialogue: 0,0:40:52.91,0:40:55.67,yin,,0,0,0,,使用alloc/init设好目标和操作\N{\fs12}you alloc and init with the target and the action,
Dialogue: 0,0:40:55.75,0:40:58.07,yin,,0,0,0,,然后设置好方向direction属性\N{\fs12}and then you set these properties' direction
Dialogue: 0,0:40:58.07,0:40:59.67,yin,,0,0,0,,或者所需触控数量numberOfTouchesRequired属性\N{\fs12}or numberOfTouchesRequired.
Dialogue: 0,0:40:59.68,0:41:00.67,yin,,0,0,0,,触控数量的意思是\N{\fs12}Number of touches means
Dialogue: 0,0:41:00.73,0:41:03.44,yin,,0,0,0,,这个滑动手势需要两根手指还是一根手指来完成\N{\fs12}this is a swipe with two fingers or one finger.
Dialogue: 0,0:41:03.45,0:41:05.45,yin,,0,0,0,,这就是触控数量的意思 两指 一指\N{\fs12}That's what number of touches means, two finger, one finger,
Dialogue: 0,0:41:05.45,0:41:08.01,yin,,0,0,0,,三指 五指 按你的需要设置\N{\fs12}three finger, five fingers, whatever you want,
Dialogue: 0,0:41:08.05,0:41:10.66,yin,,0,0,0,,方向是从左到右 从右到左\N{\fs12}and the direction is left to right, right to left,
Dialogue: 0,0:41:10.67,0:41:12.21,yin,,0,0,0,,从上到下 从下到上\N{\fs12}top to bottom, or bottom to top.
Dialogue: 0,0:41:12.35,0:41:13.96,yin,,0,0,0,,你创建好之后\N{\fs12}Okay? So, you create it
Dialogue: 0,0:41:14.04,0:41:15.81,yin,,0,0,0,,如果出现了滑动手势\N{\fs12}and then if a swipe happens
Dialogue: 0,0:41:15.82,0:41:17.92,yin,,0,0,0,,符合你的条件 你就会得到...\N{\fs12}that meets all that, you'll get the --
Dialogue: 0,0:41:18.47,0:41:21.98,yin,,0,0,0,,你的处理器就会被调用一次 传递状态为Recognized\N{\fs12}your handler called once with "Recognized" as the state.
Dialogue: 0,0:41:23.06,0:41:23.81,yin,,0,0,0,,明白吗\N{\fs12}That make sense?
Dialogue: 0,0:41:24.25,0:41:26.30,yin,,0,0,0,,滑动手势并不需要追踪\N{\fs12}So, swipe is something you don't track,
Dialogue: 0,0:41:26.30,0:41:28.15,yin,,0,0,0,,它直接告诉你 我发现了一个滑动手势\N{\fs12}it just tells you, "Oh, I saw a swipe."
Dialogue: 0,0:41:28.59,0:41:30.42,yin,,0,0,0,,而且它很聪明\N{\fs12}And, yes, it's smart about--
Dialogue: 0,0:41:30.42,0:41:32.19,yin,,0,0,0,,如果你同时有拖动手势识别器\N{\fs12}if you have a Pan Gesture Recognizer
Dialogue: 0,0:41:32.20,0:41:33.82,yin,,0,0,0,,和滑动手势识别\N{\fs12}and a Swipe Gesture Recognizer,
Dialogue: 0,0:41:34.09,0:41:35.95,yin,,0,0,0,,如果你非常顺畅地进行滑动\N{\fs12}if you swipe smoothly enough,
Dialogue: 0,0:41:36.03,0:41:37.16,yin,,0,0,0,,系统就会判断手势为滑动\N{\fs12}it will see it as a swipe.
Dialogue: 0,0:41:37.37,0:41:40.15,yin,,0,0,0,,但是如果你移动得很慢\N{\fs12}But if you go slower, or you don't go, you know--
Dialogue: 0,0:41:40.21,0:41:42.15,yin,,0,0,0,,或者走的是斜线等等\N{\fs12}you're going in a diagonal or something like that,
Dialogue: 0,0:41:42.16,0:41:43.79,yin,,0,0,0,,系统就会认为手势是拖动\N{\fs12}it will say, "Oh, no, that's a pan."
Dialogue: 0,0:41:44.19,0:41:46.47,yin,,0,0,0,,所以系统知道\N{\fs12}Okay, so it knows how to kind of
Dialogue: 0,0:41:46.79,0:41:48.59,yin,,0,0,0,,如何辨别手势的不同之处\N{\fs12}tell the difference between gestures.
Dialogue: 0,0:41:49.16,0:41:50.56,yin,,0,0,0,,越多越好\N{\fs12}Okay? As much as possible.
Dialogue: 0,0:41:50.76,0:41:51.41,yin,,0,0,0,,非常好用\N{\fs12}It's pretty cool.
Dialogue: 0,0:41:52.33,0:41:53.95,yin,,0,0,0,,点击手势和滑动手势是一样的\N{\fs12}Tap Gesture, just like Swipe Gesture.
Dialogue: 0,0:41:53.96,0:41:54.75,yin,,0,0,0,,是不连续手势\N{\fs12}It's discrete.
Dialogue: 0,0:41:54.76,0:41:55.31,yin,,0,0,0,,你先设置好\N{\fs12}You set it up,
Dialogue: 0,0:41:55.33,0:41:57.08,yin,,0,0,0,,点击几下 双击还是单击\N{\fs12}how many taps, double tap, single tap,
Dialogue: 0,0:41:57.10,0:41:58.26,yin,,0,0,0,,用几根手指等等\N{\fs12}how many fingers, etcetera.
Dialogue: 0,0:41:58.51,0:42:01.35,yin,,0,0,0,,发现手势后 它会向你发送Recognized\N{\fs12}And it will send you "Recognized" when it sees it.
Dialogue: 0,0:42:02.21,0:42:06.57,yin,,0,0,0,,滑动手势识别器可以识别对角线滑动吗\N{\fs12}Can you do Swipe Gesture Recognizer for corners or no?
Dialogue: 0,0:42:06.70,0:42:08.60,yin,,0,0,0,,只有那四个方向吗\N{\fs12}Is it only those four directions?
Dialogue: 0,0:42:09.56,0:42:12.26,yin,,0,0,0,,问题是 滑动手势是否可以\N{\fs12}The question is, can you do Swipe Gestures like,
Dialogue: 0,0:42:12.27,0:42:14.39,yin,,0,0,0,,斜着滑向四角 而不是水平滑动\N{\fs12}you mean, like swiping up into a corner, as opposed to...
Dialogue: 0,0:42:14.40,0:42:14.86,yin,,0,0,0,,是的\N{\fs12}Right .
Dialogue: 0,0:42:15.50,0:42:16.10,yin,,0,0,0,,我觉得不能\N{\fs12}I don't think so.
Dialogue: 0,0:42:16.10,0:42:17.57,yin,,0,0,0,,我认为只有上下左右四个方向\N{\fs12}I think it's just left-right, up and down.
Dialogue: 0,0:42:17.71,0:42:18.64,yin,,0,0,0,,我可能说的不对\N{\fs12}I could be wrong about that.
Dialogue: 0,0:42:18.65,0:42:20.01,yin,,0,0,0,,我有一段时间没看文档了\N{\fs12}I haven't looked in the documentation for a while,
Dialogue: 0,0:42:20.03,0:42:21.10,yin,,0,0,0,,但是我认为只有那四种方向\N{\fs12}but I think it's only those four.
Dialogue: 0,0:42:22.38,0:42:23.86,yin,,0,0,0,,好了 我们来演示\N{\fs12}All right, so let's do the demo.
Dialogue: 0,0:42:24.42,0:42:25.64,yin,,0,0,0,,演示呢\N{\fs12}Okay? So, it's going to be--
Dialogue: 0,0:42:26.26,0:42:27.21,yin,,0,0,0,,我会快速演示一遍\N{\fs12}I'm going to go fast,
Dialogue: 0,0:42:27.22,0:42:28.87,yin,,0,0,0,,需要演示的内容很多\N{\fs12}there's a lot to show you here, okay?
Dialogue: 0,0:42:28.88,0:42:30.19,yin,,0,0,0,,但我只准备演示\N{\fs12}But I'm only going to show you
Dialogue: 0,0:42:30.28,0:42:31.74,yin,,0,0,0,,今天讲过的全部内容\N{\fs12}all the things we just talked about today.
Dialogue: 0,0:42:31.75,0:42:33.60,yin,,0,0,0,,我准备用一个综合示例\N{\fs12}But I'm going to try to show all of it to you
Dialogue: 0,0:42:33.80,0:42:35.17,yin,,0,0,0,,尽量演示全部内容\N{\fs12}in a comprehensive demo.
Dialogue: 0,0:42:36.30,0:42:37.71,yin,,0,0,0,,我先讲讲下面的安排\N{\fs12}Let me talk about what's coming up
Dialogue: 0,0:42:37.71,0:42:39.52,yin,,0,0,0,,这样我们演示完就可以直接下课了\N{\fs12}so that we can just finish the demo and be done.
Dialogue: 0,0:42:40.57,0:42:42.70,yin,,0,0,0,,同样 我们希望周五的时候\N{\fs12}Again, we're hoping on Friday
Dialogue: 0,0:42:42.91,0:42:45.65,yin,,0,0,0,,能正常运行大学开发者计划\N{\fs12}to get this university developer program thing going,
Dialogue: 0,0:42:45.65,0:42:47.56,yin,,0,0,0,,但是似乎还是不能用\N{\fs12}but it looks like that's still not working.
Dialogue: 0,0:42:48.13,0:42:51.74,yin,,0,0,0,,明天会在Piazza上通知周五是否取消\N{\fs12}Watch Piazza tomorrow for whether Friday is canceled.
Dialogue: 0,0:42:51.75,0:42:53.56,yin,,0,0,0,,现在看起来不乐观\N{\fs12}At this point, it's not looking good.
Dialogue: 0,0:42:54.52,0:42:56.52,yin,,0,0,0,,这是只适用于斯坦福大学的\N{\fs12}That would be a Stanford-only thing, anyway.
Dialogue: 0,0:42:57.48,0:42:59.51,yin,,0,0,0,,作业期限是从周一开始的一个星期\N{\fs12}The homework, as I said, is due a week from Monday.
Dialogue: 0,0:42:59.51,0:43:02.41,yin,,0,0,0,,从今天开始的话 超过七天\N{\fs12}So, more than seven days from now,
Dialogue: 0,0:43:02.42,0:43:03.46,yin,,0,0,0,,是周一之后的一个星期\N{\fs12}a week from Monday.
Dialogue: 0,0:43:04.37,0:43:07.04,yin,,0,0,0,,我强烈建议大家马上开始做\N{\fs12}I really strongly recommend you get started
Dialogue: 0,0:43:07.05,0:43:08.76,yin,,0,0,0,,先完成自定义视图\N{\fs12}on the part that is a custom view
Dialogue: 0,0:43:08.77,0:43:11.24,yin,,0,0,0,,和手势识别器的部分\N{\fs12}and gesture recognizer immediately.
Dialogue: 0,0:43:11.45,0:43:13.71,yin,,0,0,0,,不要等到下周二或周三\N{\fs12}Do not wait until next Tuesday or Wednesday,
Dialogue: 0,0:43:13.72,0:43:15.15,yin,,0,0,0,,因为到了那个时候你就会发现\N{\fs12}because then you're going to find that
Dialogue: 0,0:43:15.16,0:43:17.16,yin,,0,0,0,,想要一周内赶完这个作业\N{\fs12}this is a lot of work for this assignment
Dialogue: 0,0:43:17.17,0:43:18.42,yin,,0,0,0,,工作量很大\N{\fs12}to try and jam into one week.
Dialogue: 0,0:43:18.42,0:43:20.30,yin,,0,0,0,,所以我才给大家\N{\fs12}That's why I've given you, you know, whatever--
Dialogue: 0,0:43:20.30,0:43:21.51,yin,,0,0,0,,留了这么多天\N{\fs12}however many days it is.
Dialogue: 0,0:43:22.23,0:43:23.31,yin,,0,0,0,,这部分\N{\fs12}Do this part--
Dialogue: 0,0:43:23.32,0:43:26.10,yin,,0,0,0,,如果可以 最好在周一前做完\N{\fs12}I would try and do this part before next Monday if you can,
Dialogue: 0,0:43:26.11,0:43:29.33,yin,,0,0,0,,当然越早越好\N{\fs12}but certainly do this part as soon as possible.
Dialogue: 0,0:43:29.42,0:43:30.53,yin,,0,0,0,,剩下的部分\N{\fs12}Then, the rest of the part,
Dialogue: 0,0:43:30.54,0:43:32.68,yin,,0,0,0,,动画和自动布局\N{\fs12}which is animation and autolayout,
Dialogue: 0,0:43:32.69,0:43:34.05,yin,,0,0,0,,我会在下周一\N{\fs12}which I'll be talking about on Monday
Dialogue: 0,0:43:34.07,0:43:35.30,yin,,0,0,0,,或者下周三讲到\N{\fs12}and maybe next Wednesday,
Dialogue: 0,0:43:35.72,0:43:38.29,yin,,0,0,0,,可以完成这部分之后 再完成那一部分\N{\fs12}you can leave that-- you can do that after you do this part.
Dialogue: 0,0:43:38.29,0:43:40.50,yin,,0,0,0,,它们之间的关联并不紧密\N{\fs12}They're not so intertwined that it's like, oh,
Dialogue: 0,0:43:40.50,0:43:41.94,yin,,0,0,0,,不要求同时完成\N{\fs12}you've got to do them all at the same time.
Dialogue: 0,0:43:41.94,0:43:43.48,yin,,0,0,0,,可以有先后顺序\N{\fs12}It's something that you can do after.
Dialogue: 0,0:43:46.68,0:43:48.25,yin,,0,0,0,,好了\N{\fs12}Okey dokey.
Dialogue: 0,0:43:48.26,0:43:54.41,yin,,0,0,0,,我们要在Xcode中新建一个项目\N{\fs12}So, we are going to create a new project in Xcode here.
Dialogue: 0,0:43:54.92,0:43:55.81,yin,,0,0,0,,我要叫它...\N{\fs12}And, I'm going to call that--
Dialogue: 0,0:43:55.82,0:43:58.10,yin,,0,0,0,,这些开始设置我就快速带过了\N{\fs12}I'm going fast through a lot of these starting up things,
Dialogue: 0,0:43:58.10,0:43:59.47,yin,,0,0,0,,大家都已经知道怎么做了\N{\fs12}because you know how to do this already.
Dialogue: 0,0:43:59.47,0:44:01.18,yin,,0,0,0,,我要叫它SuperCard\N{\fs12}So, I'm going to call this one SuperCard.
Dialogue: 0,0:44:01.33,0:44:02.34,yin,,0,0,0,,这里有趣的一点是\N{\fs12}One thing interesting here,
Dialogue: 0,0:44:02.35,0:44:04.23,yin,,0,0,0,,我不指定类前缀\N{\fs12}I'm not going to specify a class prefix,
Dialogue: 0,0:44:04.24,0:44:05.67,yin,,0,0,0,,大家可以看一下是什么样的\N{\fs12}just so you see what that looks like,
Dialogue: 0,0:44:05.68,0:44:07.05,yin,,0,0,0,,我们之前总是指定类前缀\N{\fs12}because we've always specified that,
Dialogue: 0,0:44:07.06,0:44:08.77,yin,,0,0,0,,比如CardGame等\N{\fs12}like CardGame or something like that.
Dialogue: 0,0:44:08.77,0:44:11.73,yin,,0,0,0,,这里我就不指定了 我们再看看\N{\fs12}So, I'm just going to not specify that, and we'll see.
Dialogue: 0,0:44:11.74,0:44:13.77,yin,,0,0,0,,保存在主目录Developer下\N{\fs12}I'm going to create it in my home directory Developer
Dialogue: 0,0:44:13.78,0:44:14.73,yin,,0,0,0,,和往常一样\N{\fs12}as I usually do.
Dialogue: 0,0:44:15.45,0:44:16.89,yin,,0,0,0,,可以看这里\N{\fs12}Here, you can go and see right here
Dialogue: 0,0:44:16.90,0:44:19.54,yin,,0,0,0,,列着ViewController.h和ViewController.m\N{\fs12}where it says ViewController.h and ViewController.m,
Dialogue: 0,0:44:19.67,0:44:22.28,yin,,0,0,0,,这是我的视图控制器类的名字\N{\fs12}that's the name of my view controller classes,
Dialogue: 0,0:44:22.43,0:44:24.25,yin,,0,0,0,,这种名字真的很糟糕\N{\fs12}which is really-- those are bad names.
Dialogue: 0,0:44:24.35,0:44:25.94,yin,,0,0,0,,这也就是为什么我们通常都要添加类前缀\N{\fs12}And that's why we usually want to put something
Dialogue: 0,0:44:25.94,0:44:28.44,yin,,0,0,0,,比如CardGameViewController\N{\fs12}in that class prefix, like CardGameViewController.
Dialogue: 0,0:44:28.97,0:44:32.18,yin,,0,0,0,,我要把这些移走\N{\fs12}Okay? I'm going to move these down out of the way.
Dialogue: 0,0:44:33.44,0:44:37.31,yin,,0,0,0,,这边这是我的视图 storyboard视图\N{\fs12}Otherwise, here's my view, right, my storyboard view.
Dialogue: 0,0:44:37.61,0:44:42.27,yin,,0,0,0,,可以在这边打开它的控制器\N{\fs12}And I could bring up the controller for it right here.
Dialogue: 0,0:44:42.48,0:44:44.10,yin,,0,0,0,,可以看到 系统自动添加了viewDidLoad方法\N{\fs12}You can see I've got a viewDidLoad,
Dialogue: 0,0:44:44.19,0:44:45.29,yin,,0,0,0,,我会留下\N{\fs12}which I'll go ahead and leave.
Dialogue: 0,0:44:45.66,0:44:47.26,yin,,0,0,0,,内存警告方法不需要 删掉\N{\fs12}Memory warning, don't need that.
Dialogue: 0,0:44:48.18,0:44:51.59,yin,,0,0,0,,我只要在这个视图中做一件事\N{\fs12}Okay. And all I'm going to do in this view--
Dialogue: 0,0:44:51.76,0:44:52.72,yin,,0,0,0,,我们把它变小点\N{\fs12}let's make this a little smaller--
Dialogue: 0,0:44:55.36,0:44:57.82,yin,,0,0,0,,就是添加一个自定义视图\N{\fs12}is put a single view, custom view,
Dialogue: 0,0:44:57.84,0:44:58.97,yin,,0,0,0,,是一张扑克牌\N{\fs12}which is going to be a playing card
Dialogue: 0,0:44:59.42,0:45:02.46,yin,,0,0,0,,一张真正的扑克牌 绘制出来的牌\N{\fs12}but a real playing card, drawn playing card. Okay?
Dialogue: 0,0:45:02.97,0:45:06.47,yin,,0,0,0,,我们先从我们总爱做的事情入手\N{\fs12}So, let's start by doing what we always love to do,
Dialogue: 0,0:45:06.48,0:45:10.35,yin,,0,0,0,,也就是将背景设为苔藓色\N{\fs12}but which is setting our background here to moss.
Dialogue: 0,0:45:10.99,0:45:12.31,yin,,0,0,0,,我爱苔藓色 在这\N{\fs12}I love moss. There it is.
Dialogue: 0,0:45:12.31,0:45:13.35,yin,,0,0,0,,背景变为了苔藓色\N{\fs12}Okay, there's our moss.
Dialogue: 0,0:45:13.36,0:45:14.06,yin,,0,0,0,,我们喜欢这样\N{\fs12}We like that.
Dialogue: 0,0:45:14.25,0:45:16.92,yin,,0,0,0,,我这样做主要是为了能让大家看得更清楚\N{\fs12}I'm doing that mostly so you can see what's going on better.
Dialogue: 0,0:45:17.17,0:45:20.09,yin,,0,0,0,,然后我要从这里拖出自定义视图\N{\fs12}And, then I'm going to grab this custom view out of here.
Dialogue: 0,0:45:20.11,0:45:21.00,yin,,0,0,0,,在列表下面\N{\fs12}So, let's go down here.
Dialogue: 0,0:45:21.10,0:45:25.87,yin,,0,0,0,,UIView位置很靠下 在下半部分 在这\N{\fs12}UIView is pretty far down, past halfway. There it is.
Dialogue: 0,0:45:26.06,0:45:26.69,yin,,0,0,0,,看这里写的\N{\fs12}See right here,
Dialogue: 0,0:45:26.71,0:45:28.77,yin,,0,0,0,,视图代表一个矩形区域\N{\fs12}"View represents a rectangular region
Dialogue: 0,0:45:28.78,0:45:29.78,yin,,0,0,0,,在其内绘制和接收事件\N{\fs12}which draws and receive events."
Dialogue: 0,0:45:29.79,0:45:32.12,yin,,0,0,0,,只要将它拖出来 放到这里\N{\fs12}And you just drag it out and put it out here.
Dialogue: 0,0:45:32.12,0:45:33.37,yin,,0,0,0,,我不想要它这么大\N{\fs12}I don't want it to be this big,
Dialogue: 0,0:45:33.37,0:45:34.55,yin,,0,0,0,,所以我要把它缩小一点\N{\fs12}so I'm going to make it smaller.
Dialogue: 0,0:45:34.87,0:45:37.92,yin,,0,0,0,,它的大小究竟是多少并不重要\N{\fs12}It really doesn't matter exactly what size I make this,
Dialogue: 0,0:45:38.05,0:45:41.84,yin,,0,0,0,,因为我要让我的绘制类\N{\fs12}because I'm going to make my class, my drawing class,
Dialogue: 0,0:45:41.94,0:45:44.45,yin,,0,0,0,,在任意尺寸下都可以正常绘制\N{\fs12}so that it'll draw properly in pretty much any size.
Dialogue: 0,0:45:44.45,0:45:46.82,yin,,0,0,0,,但如果不是常规比例就不好看了\N{\fs12}Now, it's going to look pretty bad if it's not--
Dialogue: 0,0:45:47.09,0:45:48.66,yin,,0,0,0,,通常是高大于宽\N{\fs12}you know, mostly tall than wide,
Dialogue: 0,0:45:48.67,0:45:50.22,yin,,0,0,0,,如果扑克牌又宽又短\N{\fs12}because playing cards don't look very good
Dialogue: 0,0:45:50.24,0:45:51.54,yin,,0,0,0,,看起来也不太好看\N{\fs12}if they're wide and short.
Dialogue: 0,0:45:51.72,0:45:53.90,yin,,0,0,0,,视图可以正常运行\N{\fs12}Okay? My view will work, it won't--
Dialogue: 0,0:45:54.02,0:45:56.07,yin,,0,0,0,,但用户会认不太出来它是一张牌\N{\fs12}people won't recognize it very much as a card,
Dialogue: 0,0:45:56.50,0:45:58.26,yin,,0,0,0,,但是当然没问题\N{\fs12}but it certainly would be fine.
Dialogue: 0,0:45:58.68,0:45:59.81,yin,,0,0,0,,在作业中\N{\fs12}And in your assignment,
Dialogue: 0,0:45:59.96,0:46:01.58,yin,,0,0,0,,大家创建自定义视图时\N{\fs12}the custom view you're going to create,
Dialogue: 0,0:46:01.59,0:46:03.05,yin,,0,0,0,,也要这样做\N{\fs12}you also want to make it that way
Dialogue: 0,0:46:03.07,0:46:05.14,yin,,0,0,0,,这样它就可以正常运行于任意大小的bounds\N{\fs12}so that it works in any size bounds.
Dialogue: 0,0:46:05.43,0:46:06.12,yin,,0,0,0,,在作业中\N{\fs12}And in that card,
Dialogue: 0,0:46:06.12,0:46:07.89,yin,,0,0,0,,要实现的是Set卡牌\N{\fs12}since it's gonna be a set card for you,
Dialogue: 0,0:46:08.02,0:46:10.46,yin,,0,0,0,,Set卡牌实际上可以是横向的\N{\fs12}set cards actually could make sense being sideways.
Dialogue: 0,0:46:10.60,0:46:12.58,yin,,0,0,0,,卡牌上的三个符号最好是横向排列\N{\fs12}You would want the three symbols, you know,
Dialogue: 0,0:46:12.60,0:46:14.23,yin,,0,0,0,,而不是竖向排列\N{\fs12}going sideways instead of up and down.
Dialogue: 0,0:46:14.25,0:46:16.21,yin,,0,0,0,,一个好的解决办法\N{\fs12}So, a good solution would make, really,
Dialogue: 0,0:46:16.21,0:46:20.03,yin,,0,0,0,,会让Set卡牌在任意纵横比下都很好看\N{\fs12}any aspect ratio look nice for a set card.
Dialogue: 0,0:46:20.03,0:46:20.95,yin,,0,0,0,,但是扑克牌\N{\fs12}But playing cards
Dialogue: 0,0:46:21.12,0:46:23.51,yin,,0,0,0,,大多只有竖向时才好看\N{\fs12}mostly only going to look good kind of set up.
Dialogue: 0,0:46:24.91,0:46:26.51,yin,,0,0,0,,接下来\N{\fs12}So, what we do here then
Dialogue: 0,0:46:26.52,0:46:28.13,yin,,0,0,0,,我们转到标识符检查器\N{\fs12}is we go to this identity inspector,
Dialogue: 0,0:46:28.13,0:46:30.62,yin,,0,0,0,,在这里设置这个视图的类\N{\fs12}and here we want to set our class of this view
Dialogue: 0,0:46:30.78,0:46:32.29,yin,,0,0,0,,将其设为某个自定义类\N{\fs12}to be some custom class, right?
Dialogue: 0,0:46:32.29,0:46:34.38,yin,,0,0,0,,目前它只是一个通用的UIView\N{\fs12}Right now, it's just a generic UIView,
Dialogue: 0,0:46:34.90,0:46:36.21,yin,,0,0,0,,那我们来创建那个类\N{\fs12}and so let's go create that class.
Dialogue: 0,0:46:36.21,0:46:38.28,yin,,0,0,0,,选择新建文件\N{\fs12}So, I'm just going to do File, New File,
Dialogue: 0,0:46:38.29,0:46:39.84,yin,,0,0,0,,和之前新建类一样\N{\fs12}just like we always do to create a class.
Dialogue: 0,0:46:39.85,0:46:40.67,yin,,0,0,0,,选择Objective-C类\N{\fs12}Objective-C.
Dialogue: 0,0:46:40.80,0:46:42.96,yin,,0,0,0,,它会是UIView的子类\N{\fs12}This one's going to be a subclass of UIView,
Dialogue: 0,0:46:43.23,0:46:45.45,yin,,0,0,0,,而不是UIViewController等的子类\N{\fs12}okay, instead of UIViewController or anything else.
Dialogue: 0,0:46:45.60,0:46:47.69,yin,,0,0,0,,我要叫它PlayingCardView\N{\fs12}I'm going to call it PlayingCardView.
Dialogue: 0,0:46:48.21,0:46:49.56,yin,,0,0,0,,它会是一个\N{\fs12}Okay, this is going to be
Dialogue: 0,0:46:49.58,0:46:52.99,yin,,0,0,0,,通用扑克牌显示视图\N{\fs12}a generic playing card displaying view.
Dialogue: 0,0:46:53.08,0:46:53.93,yin,,0,0,0,,完全通用\N{\fs12}Completely generic,
Dialogue: 0,0:46:54.09,0:46:56.47,yin,,0,0,0,,不和Machismo模型绑定\N{\fs12}not tied to the Machismo model,
Dialogue: 0,0:46:56.63,0:46:58.83,yin,,0,0,0,,也不和其他东西绑定\N{\fs12}not tied to anything else.
Dialogue: 0,0:46:58.85,0:47:00.15,yin,,0,0,0,,就像是独立的\N{\fs12}It's just like standalone.
Dialogue: 0,0:47:00.15,0:47:02.38,yin,,0,0,0,,要记住 创建视图时\N{\fs12}And remember that when we create views,
Dialogue: 0,0:47:02.53,0:47:03.86,yin,,0,0,0,,进入视图阵营的东西\N{\fs12}things that go in the view camp,
Dialogue: 0,0:47:03.93,0:47:05.54,yin,,0,0,0,,通用性越强越好\N{\fs12}they want to be as generic as possible
Dialogue: 0,0:47:05.54,0:47:06.80,yin,,0,0,0,,可重用性越强越好\N{\fs12}and reusable as possible,
Dialogue: 0,0:47:06.97,0:47:08.27,yin,,0,0,0,,这样这个PlayingCardView\N{\fs12}so that I could use this PlayingCardView
Dialogue: 0,0:47:08.27,0:47:10.86,yin,,0,0,0,,在扑克牌游戏和Machismo中都可以使用\N{\fs12}in my poker game app and also in Machismo.
Dialogue: 0,0:47:11.64,0:47:13.18,yin,,0,0,0,,这也就是为什么\N{\fs12}Okay? That's why--
Dialogue: 0,0:47:13.82,0:47:15.43,yin,,0,0,0,,我们强调使用\N{\fs12}we really want to try and enforce
Dialogue: 0,0:47:15.43,0:47:17.74,yin,,0,0,0,,它的通用性\N{\fs12}that kind of generic nature of it.
Dialogue: 0,0:47:17.97,0:47:20.06,yin,,0,0,0,,这是PlayingCardView的实现文件\N{\fs12}So, here's PlayingCardView's implementation.
Dialogue: 0,0:47:20.06,0:47:22.30,yin,,0,0,0,,可以看到这里有intiWithFrame方法\N{\fs12}You can see that I've got intiWithFrame right here,
Dialogue: 0,0:47:22.45,0:47:24.13,yin,,0,0,0,,这是它的指定初始化方法\N{\fs12}that's its designated initializer.
Dialogue: 0,0:47:24.25,0:47:26.95,yin,,0,0,0,,还可以看到我把这个非常重要的drawRect方法\N{\fs12}And you can see I've got the all-important drawRect
Dialogue: 0,0:47:27.00,0:47:27.96,yin,,0,0,0,,注释掉了\N{\fs12}commented out.
Dialogue: 0,0:47:28.31,0:47:29.81,yin,,0,0,0,,如果你不注释掉\N{\fs12}If you don't comment--
Dialogue: 0,0:47:29.81,0:47:30.85,yin,,0,0,0,,如果你把它注释掉\N{\fs12}if you comment this out,
Dialogue: 0,0:47:30.86,0:47:32.23,yin,,0,0,0,,不添加任何内容\N{\fs12}and you don't put anything in there,
Dialogue: 0,0:47:32.25,0:47:33.91,yin,,0,0,0,,就会占用大量性能资源\N{\fs12}that's going to give you a performance hit,
Dialogue: 0,0:47:34.12,0:47:34.95,yin,,0,0,0,,因为系统会认为\N{\fs12}because it's going to think
Dialogue: 0,0:47:34.96,0:47:36.68,yin,,0,0,0,,这个视图需要不断重绘\N{\fs12}this view needs to be redrawn all the time,
Dialogue: 0,0:47:36.68,0:47:37.54,yin,,0,0,0,,但其实它不需要\N{\fs12}when in fact it doesn't.
Dialogue: 0,0:47:37.54,0:47:39.54,yin,,0,0,0,,所以我们要先把它注释掉\N{\fs12}So, that's why it starts out commented out,
Dialogue: 0,0:47:39.55,0:47:41.02,yin,,0,0,0,,但是我们要在这里绘制\N{\fs12}but we are going to draw in here,
Dialogue: 0,0:47:41.26,0:47:43.01,yin,,0,0,0,,所以会再取消注释\N{\fs12}so we will be uncommented it out.
Dialogue: 0,0:47:43.15,0:47:44.34,yin,,0,0,0,,我要把这个方法移动一下\N{\fs12}I'm going to move this--
Dialogue: 0,0:47:44.35,0:47:46.22,yin,,0,0,0,,我们要在方法中添加某些操作\N{\fs12}we're going to do something in there,
Dialogue: 0,0:47:46.22,0:47:48.43,yin,,0,0,0,,但我要把它先移开 放到下面来\N{\fs12}but I'm going to move it down, out of the way,
Dialogue: 0,0:47:48.50,0:47:50.23,yin,,0,0,0,,合适的时候再来实现\N{\fs12}because we're going to do that at the appropriate time.
Dialogue: 0,0:47:51.43,0:47:54.23,yin,,0,0,0,,每次新建类\N{\fs12}Okay, so any time we create a new class,
Dialogue: 0,0:47:54.28,0:47:56.47,yin,,0,0,0,,需要考虑的很重要的一点就是公有API\N{\fs12}really important to think about is public APIs,
Dialogue: 0,0:47:56.48,0:47:57.19,yin,,0,0,0,,我们来做一下\N{\fs12}so let's do that.
Dialogue: 0,0:47:57.20,0:47:58.78,yin,,0,0,0,,看一下它的公有API\N{\fs12}Let's look at its public API.
Dialogue: 0,0:47:58.98,0:48:00.48,yin,,0,0,0,,它是个视图 对吧\N{\fs12}It's a view, right?
Dialogue: 0,0:48:00.71,0:48:01.64,yin,,0,0,0,,它需要做什么\N{\fs12}What does it need to do?
Dialogue: 0,0:48:01.65,0:48:04.08,yin,,0,0,0,,这个PlayingCard需要显示...\N{\fs12}Well, this playing card needs to display--
Dialogue: 0,0:48:04.19,0:48:06.21,yin,,0,0,0,,PlayingCardView需要显示扑克牌\N{\fs12}PlayingCardView needs to display a playing card,
Dialogue: 0,0:48:06.21,0:48:09.47,yin,,0,0,0,,所以我们最好能够指定要哪张牌\N{\fs12}so we better have some way of specifying which card we want.
Dialogue: 0,0:48:09.71,0:48:10.90,yin,,0,0,0,,有些人可能会认为\N{\fs12}Now, some of you might say,
Dialogue: 0,0:48:10.91,0:48:12.93,yin,,0,0,0,,太棒了 我们用Card\N{\fs12}"Oh, great. Let's use Card star."
Dialogue: 0,0:48:13.01,0:48:15.23,yin,,0,0,0,,或者PlayingCard *也不错\N{\fs12}or, "PlayingCard star would be great
Dialogue: 0,0:48:15.23,0:48:17.19,yin,,0,0,0,,PlayingCard *包含了所有我们需要的内容\N{\fs12}because PlayingCard star has got everything we need."
Dialogue: 0,0:48:17.44,0:48:18.48,yin,,0,0,0,,但是我说过了 我不想\N{\fs12}But, again, I don't want to
Dialogue: 0,0:48:18.49,0:48:21.80,yin,,0,0,0,,将这个通用可重用视图和那个模型绑定\N{\fs12}tie this generic reusable view to that model.
Dialogue: 0,0:48:21.85,0:48:26.07,yin,,0,0,0,,所以我要用NSUInteger rank\N{\fs12}So instead, I'm going to have NSUInteger rank,
Dialogue: 0,0:48:26.25,0:48:32.40,yin,,0,0,0,,还有NSString *suit\N{\fs12}and I'm going to have NSString suit,
Dialogue: 0,0:48:32.52,0:48:33.61,yin,,0,0,0,,我还要再加一个\N{\fs12}and I'm also going to have something
Dialogue: 0,0:48:33.63,0:48:34.89,yin,,0,0,0,,在另外一个模型中甚至没有它\N{\fs12}that's not even in that other model,
Dialogue: 0,0:48:34.90,0:48:37.84,yin,,0,0,0,,是nonatomic的 BOOL faceUp\N{\fs12}which is nonatomic BOOL faceUp.
Dialogue: 0,0:48:39.17,0:48:40.01,yin,,0,0,0,,添加这个属性\N{\fs12}Okay? I'm going to have it
Dialogue: 0,0:48:40.02,0:48:42.63,yin,,0,0,0,,用来记录卡牌是否正面朝上\N{\fs12}so my card is either face up or face down.
Dialogue: 0,0:48:42.63,0:48:43.68,yin,,0,0,0,,这是一个扑克牌视图\N{\fs12}This is a playing card view,
Dialogue: 0,0:48:43.69,0:48:46.35,yin,,0,0,0,,它要能显示牌面向上或向下的扑克牌\N{\fs12}it's got to be able to display the card in either up or down.
Dialogue: 0,0:48:46.78,0:48:50.92,yin,,0,0,0,,这就是我的API 我就需要这些\N{\fs12}So, that's my API. That's all I really need.
Dialogue: 0,0:48:50.93,0:48:53.12,yin,,0,0,0,,现在我们只要在实现文件中\N{\fs12}And so we've just got to implement that API
Dialogue: 0,0:48:53.13,0:48:54.20,yin,,0,0,0,,实现API\N{\fs12}in our implementation.
Dialogue: 0,0:48:54.54,0:48:57.27,yin,,0,0,0,,我先要做一件事 就是这个\N{\fs12}One thing I'm going to do right off the bat is this.
Dialogue: 0,0:48:58.51,0:49:00.70,yin,,0,0,0,,看到了吗 我一下就把这些都打出来了\N{\fs12}Okay? Now, I typed this really fast.
Dialogue: 0,0:49:01.52,0:49:02.21,yin,,0,0,0,,就这样\N{\fs12}That was it.
Dialogue: 0,0:49:02.74,0:49:06.67,yin,,0,0,0,,这里做的是在所有公有API的setter中\N{\fs12}All I'm doing here is all the setters for all my public API,
Dialogue: 0,0:49:06.91,0:49:09.97,yin,,0,0,0,,调用setNeedsDisplay\N{\fs12}I am calling setNeedsDisplay.
Dialogue: 0,0:49:10.92,0:49:13.56,yin,,0,0,0,,因为如果有人修改了suit 或者...\N{\fs12}Okay? Because if someone changes the suit, or the--
Dialogue: 0,0:49:13.56,0:49:14.58,yin,,0,0,0,,这里我可以写上\N{\fs12}and yes, I could say,
Dialogue: 0,0:49:14.58,0:49:16.19,yin,,0,0,0,,if _suit!=suit\N{\fs12}if underbar suit does not equal suit,
Dialogue: 0,0:49:16.19,0:49:17.62,yin,,0,0,0,,就保存自己 然后setNeedsDisplay\N{\fs12}then save myself and setNeedsDisplay,
Dialogue: 0,0:49:17.62,0:49:19.71,yin,,0,0,0,,但这里只是演示一下\N{\fs12}but-- okay, demo time here.
Dialogue: 0,0:49:19.98,0:49:21.86,yin,,0,0,0,,用setNeedsDisplay只是为了确保\N{\fs12}So I'm doing setNeedsDisplay just to make sure,
Dialogue: 0,0:49:21.86,0:49:24.16,yin,,0,0,0,,如果有人修改了rank或者suit\N{\fs12}if anyone changes the rank or the suit
Dialogue: 0,0:49:24.24,0:49:26.47,yin,,0,0,0,,或者牌面朝向\N{\fs12}or the faceUp-ness of my thing,
Dialogue: 0,0:49:26.52,0:49:28.76,yin,,0,0,0,,我就告诉系统我需要被重绘\N{\fs12}I tell the system I need to be redrawn.
Dialogue: 0,0:49:29.85,0:49:31.54,yin,,0,0,0,,明白吗 我为什么这么做\N{\fs12}Do you understand this, why I do that?
Dialogue: 0,0:49:32.34,0:49:33.37,yin,,0,0,0,,好极了\N{\fs12}Okay, excellent.
Dialogue: 0,0:49:33.39,0:49:35.45,yin,,0,0,0,,我们来实现drawRect\N{\fs12}So, let's dive into drawRect here.
Dialogue: 0,0:49:35.45,0:49:37.04,yin,,0,0,0,,取消它的注释\N{\fs12}I'm going to uncomment it out,
Dialogue: 0,0:49:38.46,0:49:39.96,yin,,0,0,0,,在这里开始绘制\N{\fs12}okay, and start drawing here.
Dialogue: 0,0:49:40.12,0:49:40.89,yin,,0,0,0,,如果我没有...\N{\fs12}Now, if I'm not--
Dialogue: 0,0:49:40.89,0:49:45.52,yin,,0,0,0,,我全部都会用UIBezierPath来实现\N{\fs12}I'm going to do all my stuff with UIBezierPath, so--
Dialogue: 0,0:49:45.96,0:49:47.41,yin,,0,0,0,,不了 我会用一次context\N{\fs12}well, actually, no, I'll do a context here,
Dialogue: 0,0:49:47.43,0:49:48.30,yin,,0,0,0,,演示一下上下文的用法\N{\fs12}just to show you the context.
Dialogue: 0,0:49:48.32,0:49:49.08,yin,,0,0,0,,我们稍后再用它\N{\fs12}We'll do it a little later,
Dialogue: 0,0:49:49.10,0:49:51.22,yin,,0,0,0,,先用UIBezierPath\N{\fs12}but we're going to start off doing UIBezierPath,
Dialogue: 0,0:49:51.40,0:49:53.56,yin,,0,0,0,,我们先设置扑克牌的外观\N{\fs12}and let's start with the outside of my card
Dialogue: 0,0:49:53.57,0:49:55.69,yin,,0,0,0,,我想要圆角矩形的\N{\fs12}which I want to be a rounded rect, right?
Dialogue: 0,0:49:55.69,0:49:57.02,yin,,0,0,0,,我想让扑克牌是圆角矩形的\N{\fs12}I want my cards to be a rounded rect.
Dialogue: 0,0:49:57.02,0:50:00.28,yin,,0,0,0,,我只要在这里创建一个贝赛尔曲线 UIBezierPath\N{\fs12}So, I'm just gonna create a Bezier path here, UIBezierPath.
Dialogue: 0,0:50:01.21,0:50:01.94,yin,,0,0,0,,我要叫它...\N{\fs12}I'm going to call it--
Dialogue: 0,0:50:02.00,0:50:03.04,yin,,0,0,0,,把其他面板隐藏起来\N{\fs12}and let me make some more space,
Dialogue: 0,0:50:03.05,0:50:05.05,yin,,0,0,0,,方便大家看到更多代码\N{\fs12}so we can see lots of code here.
Dialogue: 0,0:50:06.40,0:50:08.06,yin,,0,0,0,,我要叫它roundedRect\N{\fs12}RoundedRect, I'll call it.
Dialogue: 0,0:50:08.16,0:50:09.84,yin,,0,0,0,,我要用UIBezierPath\N{\fs12}And I do that with UIBezier--
Dialogue: 0,0:50:09.85,0:50:12.03,yin,,0,0,0,,实际上有一个类方法可以实现\N{\fs12}actually there's a class method that does that,
Dialogue: 0,0:50:13.63,0:50:19.00,yin,,0,0,0,,bezierPathWithRoundedRect 下面这个\N{\fs12}bezierPath for RoundedRects, down here, this one.
Dialogue: 0,0:50:19.35,0:50:21.25,yin,,0,0,0,,我要让这个圆角矩形\N{\fs12}And I'm going to have that rounded rect
Dialogue: 0,0:50:21.26,0:50:22.45,yin,,0,0,0,,越大越好\N{\fs12}be as big as possible,
Dialogue: 0,0:50:22.47,0:50:24.35,yin,,0,0,0,,所以我指定self.bounds\N{\fs12}so I specify self.bounds
Dialogue: 0,0:50:25.14,0:50:27.88,yin,,0,0,0,,为绘制roundedRect的矩形\N{\fs12}as the rectangle to draw this roundedRect in.
Dialogue: 0,0:50:27.98,0:50:30.08,yin,,0,0,0,,self.bounds是我的坐标系\N{\fs12}Okay? Self.bounds is my coordinate system.
Dialogue: 0,0:50:30.37,0:50:32.35,yin,,0,0,0,,它的宽度和高度组成的空间\N{\fs12}Its width and height is the amount of space
Dialogue: 0,0:50:32.36,0:50:33.87,yin,,0,0,0,,就是我在屏幕上用来绘制的范围\N{\fs12}I have onscreen to draw in.
Dialogue: 0,0:50:34.51,0:50:36.12,yin,,0,0,0,,cornerRadius呢\N{\fs12}Okay, cornerRadius,
Dialogue: 0,0:50:37.34,0:50:42.19,yin,,0,0,0,,我要在这里添加一段神奇的代码\N{\fs12}I'm going to throw in some magic code here for that.
Dialogue: 0,0:50:42.39,0:50:43.89,yin,,0,0,0,,这很重要\N{\fs12}This is an important thing.
Dialogue: 0,0:50:43.89,0:50:48.84,yin,,0,0,0,,cornerRadius代表圆角矩形的\N{\fs12}This cornerRadius is how many points is in the radius
Dialogue: 0,0:50:48.84,0:50:51.25,yin,,0,0,0,,圆角的半径有多少个点\N{\fs12}as it goes around the corner of the rounded rect.
Dialogue: 0,0:50:51.51,0:50:54.90,yin,,0,0,0,,它的值取决于卡牌的大小\N{\fs12}And, really, that number depends on how big my card is.
Dialogue: 0,0:50:54.91,0:50:57.51,yin,,0,0,0,,如果卡牌很大 半径就要很大\N{\fs12}If I have a big card, I want a big radius,
Dialogue: 0,0:50:57.62,0:50:59.88,yin,,0,0,0,,如果卡牌很小 半径就要很小\N{\fs12}if I have a really small card, I want a really small radius.
Dialogue: 0,0:51:00.01,0:51:02.60,yin,,0,0,0,,所以我创建了这个cornerScaleFactor\N{\fs12}So, I've created this cornerScaleFactor,
Dialogue: 0,0:51:02.72,0:51:06.00,yin,,0,0,0,,定义了高度的标准值\N{\fs12}which I've just standardized to some height,
Dialogue: 0,0:51:06.01,0:51:07.55,yin,,0,0,0,,可以研究一下这些数字\N{\fs12}and I can play with these numbers
Dialogue: 0,0:51:07.56,0:51:10.20,yin,,0,0,0,,找到适用于全部尺寸的数值\N{\fs12}to see what works for all sizes.
Dialogue: 0,0:51:10.33,0:51:11.76,yin,,0,0,0,,然后选择一个半径值\N{\fs12}And then, I'm going to pick a radius
Dialogue: 0,0:51:11.77,0:51:14.22,yin,,0,0,0,,这个高度对应的半径是12\N{\fs12}that at this height is 12,
Dialogue: 0,0:51:14.28,0:51:16.18,yin,,0,0,0,,用起来很不错\N{\fs12}and that works pretty nicely, right?
Dialogue: 0,0:51:16.20,0:51:17.59,yin,,0,0,0,,然后对它进行等比缩放\N{\fs12}And then, I'm going to scale it.
Dialogue: 0,0:51:18.18,0:51:20.48,yin,,0,0,0,,我要在这里调用这个方法\N{\fs12}Okay? So I'm going to call this method right here,
Dialogue: 0,0:51:21.02,0:51:25.63,yin,,0,0,0,,cornerRadius\N{\fs12}cornerRadius, corner radius.
Dialogue: 0,0:51:25.64,0:51:26.05,yin,,0,0,0,,你会看到\N{\fs12}And you'll see
Dialogue: 0,0:51:26.06,0:51:30.42,yin,,0,0,0,,我还会在其他地方用到比例系数\N{\fs12}I'm gonna use that scale factor in other places, too,
Dialogue: 0,0:51:30.43,0:51:31.43,yin,,0,0,0,,用来进行放大\N{\fs12}to try and scale it up.
Dialogue: 0,0:51:31.43,0:51:32.55,yin,,0,0,0,,这就是我说过的\N{\fs12}And this is part of what I'm talking about,
Dialogue: 0,0:51:32.55,0:51:34.07,yin,,0,0,0,,你需要实现在任意bounds下\N{\fs12}you need this thing to draw
Dialogue: 0,0:51:34.16,0:51:36.03,yin,,0,0,0,,都能正常进行绘制\N{\fs12}in any size bounds to make sense.
Dialogue: 0,0:51:36.03,0:51:38.26,yin,,0,0,0,,所以你需要这些内容\N{\fs12}So, you're gonna have to have a little bit of stuff
Dialogue: 0,0:51:38.26,0:51:42.29,yin,,0,0,0,,根据目标的大小\N{\fs12}that is dependent on, you know, the size and height of this thing
Dialogue: 0,0:51:42.30,0:51:45.09,yin,,0,0,0,,选择合适尺寸的圆角矩形等\N{\fs12}to pick the right size rounded rects and things like that.
Dialogue: 0,0:51:45.49,0:51:46.36,yin,,0,0,0,,对于这个roundedRect\N{\fs12}So, the first thing that
Dialogue: 0,0:51:46.37,0:51:47.87,yin,,0,0,0,,我先要做的是\N{\fs12}I'm gonna do to this roundedRect actually,
Dialogue: 0,0:51:47.89,0:51:49.11,yin,,0,0,0,,进行裁剪\N{\fs12}is I'm gonna clip to it,
Dialogue: 0,0:51:50.08,0:51:54.26,yin,,0,0,0,,抱歉 是addClip\N{\fs12}because I don't-- sorry addClip.
Dialogue: 0,0:51:54.26,0:51:55.36,yin,,0,0,0,,我要...\N{\fs12}I'm going to--
Dialogue: 0,0:51:55.37,0:51:57.68,yin,,0,0,0,,我并不想在roundedRect之外绘图\N{\fs12}I don't ever want to draw outside that roundedRect.
Dialogue: 0,0:51:58.05,0:51:59.76,yin,,0,0,0,,它是我的卡牌的内部绘制区\N{\fs12}Okay? That's the interior of my card,
Dialogue: 0,0:52:00.02,0:52:01.64,yin,,0,0,0,,所以我要用它进行裁剪\N{\fs12}so I'm just going to clip to that.
Dialogue: 0,0:52:01.86,0:52:04.13,yin,,0,0,0,,还可以这样做\N{\fs12}It also lets me do something like this.
Dialogue: 0,0:52:04.19,0:52:08.68,yin,,0,0,0,,UIColor whiteColor 设置为填充色\N{\fs12}UIColor whiteColor, set my fill color,
Dialogue: 0,0:52:09.68,0:52:10.78,yin,,0,0,0,,然后我可以...\N{\fs12}and then I can just--
Dialogue: 0,0:52:11.61,0:52:12.73,yin,,0,0,0,,抱歉 多打了个括号\N{\fs12}Sorry, I do that a lot.
Dialogue: 0,0:52:13.52,0:52:16.06,yin,,0,0,0,,然后我只要用这个C函数\N{\fs12}Then, I'm just going to use this C function,
Dialogue: 0,0:52:16.07,0:52:17.56,yin,,0,0,0,,因为我想演示它的用法\N{\fs12}because I just want to show this to you.
Dialogue: 0,0:52:17.72,0:52:23.83,yin,,0,0,0,,UIRectFil 然后指定一个矩形self.bounds\N{\fs12}UIRectFill, and you specify a rectangle, self.bounds.
Dialogue: 0,0:52:24.53,0:52:27.16,yin,,0,0,0,,这样就填充了这个矩形\N{\fs12}Okay, this just fills this rectangle.
Dialogue: 0,0:52:27.16,0:52:30.65,yin,,0,0,0,,这就像是创建路径\N{\fs12}So, it's kind of like shorthand for creating that path,
Dialogue: 0,0:52:30.94,0:52:32.65,yin,,0,0,0,,填充等等的简化版本\N{\fs12}filling it and all that stuff.
Dialogue: 0,0:52:32.65,0:52:35.65,yin,,0,0,0,,它直接就填充了 很好用的UIKit的内容\N{\fs12}It just fills it, this nice little UIKit thing.
Dialogue: 0,0:52:35.65,0:52:37.34,yin,,0,0,0,,它会创建一个大矩形\N{\fs12}And this is going to make a big rectangle,
Dialogue: 0,0:52:37.34,0:52:40.32,yin,,0,0,0,,这个裁剪区域会让roundedRect的内部\N{\fs12}but this clip is going to keep the white of this
Dialogue: 0,0:52:40.33,0:52:41.99,yin,,0,0,0,,是白色的\N{\fs12}on the inside of that roundedRect.
Dialogue: 0,0:52:42.41,0:52:44.60,yin,,0,0,0,,所以不会绘制四角的白色区域\N{\fs12}So it's not going to draw the white in the corners up there.
Dialogue: 0,0:52:44.91,0:52:47.76,yin,,0,0,0,,但是这里有个问题\N{\fs12}However, I've got a problem here,
Dialogue: 0,0:52:47.77,0:52:51.26,yin,,0,0,0,,这个视图的背景色默认为白色\N{\fs12}in that my background color for this view is by default white,
Dialogue: 0,0:52:51.27,0:52:54.18,yin,,0,0,0,,所以这些操作都位于一个大的白色矩形中\N{\fs12}so it's doing this all on a big white rectangle
Dialogue: 0,0:52:54.18,0:52:55.58,yin,,0,0,0,,包括那四个角\N{\fs12}that includes those corners.
Dialogue: 0,0:52:55.86,0:52:59.20,yin,,0,0,0,,所以背景色不能是白色了\N{\fs12}So, I need to stop my background from being white,
Dialogue: 0,0:52:59.22,0:53:00.63,yin,,0,0,0,,我还需要告诉系统\N{\fs12}and I also need to tell the system
Dialogue: 0,0:53:00.63,0:53:03.01,yin,,0,0,0,,我的扑克牌是透明的\N{\fs12}that my playing card is not opaque.
Dialogue: 0,0:53:03.44,0:53:06.34,yin,,0,0,0,,我要在initWithFrame中实现\N{\fs12}Okay? So, I'm gonna do that in initWithFrame down here,
Dialogue: 0,0:53:06.50,0:53:07.90,yin,,0,0,0,,但我要用正确的方法来实现\N{\fs12}but I'm going to do it in the right way,
Dialogue: 0,0:53:07.91,0:53:11.56,yin,,0,0,0,,添加一个setup方法\N{\fs12}which is to have a setup method.
Dialogue: 0,0:53:11.65,0:53:15.67,yin,,0,0,0,,在setup中 我要将背景色设为nil\N{\fs12}And in setup, I'm going to set my background color to nil,
Dialogue: 0,0:53:15.68,0:53:18.39,yin,,0,0,0,,表示不要绘制背景\N{\fs12}which means that I don't-- don't draw a background for me,
Dialogue: 0,0:53:18.49,0:53:23.07,yin,,0,0,0,,将opaque设为NO 是透明的\N{\fs12}and I'm going to set opaque to no, I'm not opaque.
Dialogue: 0,0:53:23.29,0:53:24.05,yin,,0,0,0,,我还要加上\N{\fs12}I'm also going to do
Dialogue: 0,0:53:24.06,0:53:29.23,yin,,0,0,0,,contentMode=UIViewContentModeRedraw\N{\fs12}that contentMode equals UIViewContentModeRedraw.
Dialogue: 0,0:53:29.39,0:53:31.70,yin,,0,0,0,,还记得吗 我说了如果bounds变化了\N{\fs12}Remember I told you that if my bounds ever change,
Dialogue: 0,0:53:31.89,0:53:34.67,yin,,0,0,0,,我就要调用drawRect\N{\fs12}I want to get my drawRect called.
Dialogue: 0,0:53:34.68,0:53:36.80,yin,,0,0,0,,在这个示例中 bounds不会发生变化\N{\fs12}Now, my bounds is not gonna change in this demo,
Dialogue: 0,0:53:36.80,0:53:39.54,yin,,0,0,0,,但我知道如果它变化了 我需要这样做\N{\fs12}but I know that if it ever does, that's what I want.
Dialogue: 0,0:53:39.70,0:53:40.89,yin,,0,0,0,,然后 很重要的一点是\N{\fs12}And then, really importantly,
Dialogue: 0,0:53:40.90,0:53:43.14,yin,,0,0,0,,我要在awakeFromNib中执行它\N{\fs12}I want to make sure I do this in awakeFromNib.
Dialogue: 0,0:53:43.52,0:53:45.09,yin,,0,0,0,,self setup\N{\fs12}Okay, self setup.
Dialogue: 0,0:53:45.70,0:53:48.39,yin,,0,0,0,,因为实际上 在这个示例中\N{\fs12}Because, in fact, in this demo,
Dialogue: 0,0:53:48.54,0:53:50.72,yin,,0,0,0,,我要从storyboard中创建视图\N{\fs12}I am going to be creating this view in a storyboard.
Dialogue: 0,0:53:51.03,0:53:52.91,yin,,0,0,0,,而不用alloc/init\N{\fs12}I'm not doing alloc init on it,
Dialogue: 0,0:53:52.98,0:53:54.70,yin,,0,0,0,,所以我要用这种方法来做准备\N{\fs12}so this is how I'm going to get set up.
Dialogue: 0,0:53:55.37,0:53:56.21,yin,,0,0,0,,有什么问题\N{\fs12}Okay? Question.
Dialogue: 0,0:53:56.58,0:53:59.09,yin,,0,0,0,,将背景色设为nil 而不用UIColor clearColor\N{\fs12}What's the advantage of setting background color to nil,
Dialogue: 0,0:53:59.10,0:54:01.35,yin,,0,0,0,,有什么优点吗\N{\fs12}instead of UIColor clearColor?
Dialogue: 0,0:54:01.36,0:54:02.18,yin,,0,0,0,,问题是\N{\fs12}Yeah, so the question is,
Dialogue: 0,0:54:02.19,0:54:03.88,yin,,0,0,0,,这里用nil 而不用UIColor clearColor\N{\fs12}What's the advantage here of saying nil
Dialogue: 0,0:54:04.04,0:54:06.75,yin,,0,0,0,,有什么优点\N{\fs12}versus UIColor clearColor?
Dialogue: 0,0:54:07.55,0:54:08.98,yin,,0,0,0,,答案是没有什么优点\N{\fs12}And the answer is there's no advantage,
Dialogue: 0,0:54:08.99,0:54:11.89,yin,,0,0,0,,除了用nil能比较直观地表达我的意思\N{\fs12}except for that, really, what I intend here is
Dialogue: 0,0:54:12.33,0:54:13.73,yin,,0,0,0,,就是没有背景色\N{\fs12}I don't have a background color.
Dialogue: 0,0:54:13.97,0:54:15.19,yin,,0,0,0,,你们可以不这样用\N{\fs12}So you can argue--
Dialogue: 0,0:54:15.20,0:54:16.01,yin,,0,0,0,,只是风格不同\N{\fs12}It's just a style thing,
Dialogue: 0,0:54:16.02,0:54:17.36,yin,,0,0,0,,两种方式没有什么不同\N{\fs12}but there's no difference in there.
Dialogue: 0,0:54:17.97,0:54:20.85,yin,,0,0,0,,这样我们就准备好了\N{\fs12}Okay? So, now we're nice and set up.
Dialogue: 0,0:54:20.99,0:54:22.33,yin,,0,0,0,,还要快速讲一个东西\N{\fs12}Oh, one thing I'm going to show you real quick here
Dialogue: 0,0:54:22.34,0:54:23.72,yin,,0,0,0,,#pragma\N{\fs12}is pound sign pragma.
Dialogue: 0,0:54:23.83,0:54:24.88,yin,,0,0,0,,大家知不知道它\N{\fs12}I don't know if you guys know about that.
Dialogue: 0,0:54:24.89,0:54:26.77,yin,,0,0,0,,有多少人知道#pragma是什么意思\N{\fs12}How many people know what pound sign pragma is?
Dialogue: 0,0:54:27.45,0:54:28.90,yin,,0,0,0,,几乎没人知道 很好\N{\fs12}Okay, almost nobody. This is awesome, then.
Dialogue: 0,0:54:29.17,0:54:32.06,yin,,0,0,0,,如果加一个mark 变为pragma mark\N{\fs12}Okay, so if you do a mark, a pragma mark,
Dialogue: 0,0:54:32.71,0:54:34.92,yin,,0,0,0,,你可以加一段注释\N{\fs12}you can put a little comment
Dialogue: 0,0:54:34.93,0:54:36.60,yin,,0,0,0,,比如Initialization 像这样\N{\fs12}like initialization, like this.
Dialogue: 0,0:54:36.86,0:54:39.31,yin,,0,0,0,,看上面这里 显示的是\N{\fs12}And now, up here. See where it says
Dialogue: 0,0:54:39.31,0:54:40.62,yin,,0,0,0,,implementation PlayingCardView\N{\fs12}"Implementation PlayingCardView?"
Dialogue: 0,0:54:40.66,0:54:43.63,yin,,0,0,0,,如果我单击它 看到这里加了一条线吗\N{\fs12}If I click on that, you see how it's put a line here?
Dialogue: 0,0:54:43.63,0:54:46.75,yin,,0,0,0,,这个破折号就是这条线\N{\fs12}That's this dash is this line,
Dialogue: 0,0:54:46.94,0:54:48.50,yin,,0,0,0,,initialization显示在这里\N{\fs12}and then Initialization appears here,
Dialogue: 0,0:54:48.50,0:54:50.36,yin,,0,0,0,,将这些方法分成了一组\N{\fs12}and it's grouped these for me.
Dialogue: 0,0:54:51.07,0:54:53.71,yin,,0,0,0,,我可以在上面这里也加上\N{\fs12}So, I can put, like up here as well,
Dialogue: 0,0:54:53.93,0:54:57.64,yin,,0,0,0,,#pragma mark - Drawing\N{\fs12}pound sign pragma, mark Drawing.
Dialogue: 0,0:54:57.97,0:54:58.85,yin,,0,0,0,,还可以加在这\N{\fs12}And maybe up here,
Dialogue: 0,0:54:58.86,0:55:03.57,yin,,0,0,0,,#pragma mark - Properties\N{\fs12}I could put pound sign pragma, mark Properties.
Dialogue: 0,0:55:04.18,0:55:07.88,yin,,0,0,0,,这样这些方法就很好地分组显示了\N{\fs12}And then my stuff really gets nicely grouped, okay?
Dialogue: 0,0:55:08.18,0:55:09.58,yin,,0,0,0,,可以考虑用这个方法\N{\fs12}So, something to think about there.
Dialogue: 0,0:55:10.87,0:55:12.33,yin,,0,0,0,,好了 回到这里\N{\fs12}All right, so back to here.
Dialogue: 0,0:55:12.33,0:55:14.84,yin,,0,0,0,,现在我的背景色是白色\N{\fs12}So, now I've got my background white
Dialogue: 0,0:55:14.85,0:55:16.57,yin,,0,0,0,,显示在一个圆角矩形中 非常好\N{\fs12}in a rounded rect, which is great.
Dialogue: 0,0:55:16.64,0:55:19.53,yin,,0,0,0,,但我还想在卡牌边缘\N{\fs12}But I actually also want to draw a little black line
Dialogue: 0,0:55:19.53,0:55:20.92,yin,,0,0,0,,添加一圈黑色边框\N{\fs12}around the edge of my card.
Dialogue: 0,0:55:21.44,0:55:23.14,yin,,0,0,0,,怎么做呢\N{\fs12}Okay? So how would I do that?
Dialogue: 0,0:55:23.42,0:55:24.50,yin,,0,0,0,,非常非常简单\N{\fs12}Very, very, very simple.
Dialogue: 0,0:55:24.51,0:55:27.46,yin,,0,0,0,,我只要设置描边颜色\N{\fs12}I'm just going to set my stroke color
Dialogue: 0,0:55:27.48,0:55:31.61,yin,,0,0,0,,[[UIColor blackColor] setStroke]\N{\fs12}which is UIColor blackColor setStroke.
Dialogue: 0,0:55:32.30,0:55:36.71,yin,,0,0,0,,然后让roundedRect\N{\fs12}And then I'm going to ask this roundedRect thing,
Dialogue: 0,0:55:36.98,0:55:39.33,yin,,0,0,0,,让这个贝塞尔路径描边\N{\fs12}this Bezier path, to stroke.
Dialogue: 0,0:55:40.36,0:55:43.09,yin,,0,0,0,,它的线宽是默认值\N{\fs12}Okay? And this can have the default line width,
Dialogue: 0,0:55:43.27,0:55:45.72,yin,,0,0,0,,可能是1 正是我想要的\N{\fs12}which is probably one point, which is what I want,
Dialogue: 0,0:55:45.73,0:55:47.50,yin,,0,0,0,,但可以让线条变粗之类的\N{\fs12}but I could make it thicker or whatever.
Dialogue: 0,0:55:48.40,0:55:49.98,yin,,0,0,0,,我们运行一下\N{\fs12}So let's go ahead and run, and see what--
Dialogue: 0,0:55:50.13,0:55:51.17,yin,,0,0,0,,看看目前是什么样子\N{\fs12}how things look so far.
Dialogue: 0,0:55:51.18,0:55:52.26,yin,,0,0,0,,现在是不会正常显示的\N{\fs12}Now, this is not going to work.
Dialogue: 0,0:55:53.23,0:55:54.12,yin,,0,0,0,,我是故意的\N{\fs12}And I'm doing this intentionally,
Dialogue: 0,0:55:54.12,0:55:55.61,yin,,0,0,0,,因为你们可能也会犯同样的错误\N{\fs12}because you'll probably do the same thing.
Dialogue: 0,0:55:56.80,0:55:59.80,yin,,0,0,0,,缩小一点 好了\N{\fs12}Let's put this down here. There we go.
Dialogue: 0,0:56:01.54,0:56:03.08,yin,,0,0,0,,好奇怪 为什么不行 好了\N{\fs12}Surprised that doesn't do that. Okay.
Dialogue: 0,0:56:04.18,0:56:06.39,yin,,0,0,0,,可以看到 矩形没有圆角\N{\fs12}So, you can see that I don't have my rounded corners,
Dialogue: 0,0:56:06.39,0:56:07.64,yin,,0,0,0,,也没有黑色边框\N{\fs12}and I don't have a black line.
Dialogue: 0,0:56:07.64,0:56:08.40,yin,,0,0,0,,为什么呢\N{\fs12}Why is this?
Dialogue: 0,0:56:08.65,0:56:09.51,yin,,0,0,0,,有谁知道吗\N{\fs12}Anybody know?
Dialogue: 0,0:56:12.13,0:56:14.15,yin,,0,0,0,,因为没有连接类\N{\fs12}Because you didn't hook up the class.
Dialogue: 0,0:56:14.15,0:56:16.79,yin,,0,0,0,,没错 因为我没有连接类\N{\fs12}Exactly, because I didn't hook up the class.
Dialogue: 0,0:56:17.10,0:56:19.28,yin,,0,0,0,,如果我回到storyboard这里\N{\fs12}Okay, so if I go back to my storyboard here,
Dialogue: 0,0:56:19.35,0:56:21.71,yin,,0,0,0,,它还是一个普通的UIView\N{\fs12}this is still a plain UIView.
Dialogue: 0,0:56:22.16,0:56:23.50,yin,,0,0,0,,看到了吗 UIView\N{\fs12}You see? UIView.
Dialogue: 0,0:56:23.75,0:56:26.13,yin,,0,0,0,,我需要把它改为PlayingCardView\N{\fs12}So I need to change this to be a PlayingCardView.
Dialogue: 0,0:56:26.56,0:56:27.95,yin,,0,0,0,,现在再运行时\N{\fs12}Now, when I run
Dialogue: 0,0:56:28.13,0:56:29.80,yin,,0,0,0,,系统知道它是一个PlayingCardView\N{\fs12}the system knows that's a PlayingCardView
Dialogue: 0,0:56:29.81,0:56:31.31,yin,,0,0,0,,出现了好看的圆角\N{\fs12}and I get nice, rounded rects.
Dialogue: 0,0:56:32.25,0:56:34.57,yin,,0,0,0,,看到四角被切掉了吗\N{\fs12}Okay? See my corners cut off there?
Dialogue: 0,0:56:34.80,0:56:35.33,yin,,0,0,0,,都很好\N{\fs12}It's all good.
Dialogue: 0,0:56:35.34,0:56:36.71,yin,,0,0,0,,外面有一圈黑色边框\N{\fs12}And there is a little black line around there.
Dialogue: 0,0:56:36.72,0:56:38.20,yin,,0,0,0,,很难看清 但是有的\N{\fs12}It's hard to see, but it's there.
Dialogue: 0,0:56:38.76,0:56:41.83,yin,,0,0,0,,好了 这部分完成了\N{\fs12}Okay? All right, so we're off and running here.
Dialogue: 0,0:56:42.02,0:56:45.13,yin,,0,0,0,,下面我要绘制牌角\N{\fs12}The next thing I'm going to do is draw the corners.
Dialogue: 0,0:56:45.15,0:56:47.43,yin,,0,0,0,,就是写着梅花A的那个地方\N{\fs12}You know, like where it says ace of clubs?
Dialogue: 0,0:56:47.54,0:56:48.70,yin,,0,0,0,,在牌角有一个A\N{\fs12}And in the corner there is an ace,
Dialogue: 0,0:56:48.70,0:56:49.87,yin,,0,0,0,,下面是一个梅花\N{\fs12}and then underneath is a club,
Dialogue: 0,0:56:49.88,0:56:52.39,yin,,0,0,0,,在与之相对的那个角上是一个倒A\N{\fs12}and then down in the other corner is upside-down ace,
Dialogue: 0,0:56:52.40,0:56:53.92,yin,,0,0,0,,然后上面是梅花\N{\fs12}and then clubs above it.
Dialogue: 0,0:56:54.23,0:56:55.64,yin,,0,0,0,,知道我说的扑克牌是什么样的吧\N{\fs12}You know what I'm talking about in a playing card?
Dialogue: 0,0:56:55.84,0:56:56.93,yin,,0,0,0,,我们要把它绘制出来\N{\fs12}So, we're going to draw that.
Dialogue: 0,0:56:57.33,0:56:58.81,yin,,0,0,0,,方法是...\N{\fs12}I'm going to do that by saying--
Dialogue: 0,0:56:59.12,0:57:01.40,yin,,0,0,0,,同样 扩大点空间\N{\fs12}Again, let's make more space here.
Dialogue: 0,0:57:01.82,0:57:04.09,yin,,0,0,0,,我要写self drawCorners\N{\fs12}I'm going to say self drawCorners,
Dialogue: 0,0:57:04.43,0:57:06.14,yin,,0,0,0,,用一个不同的方法来完成\N{\fs12}but do this in a different method,
Dialogue: 0,0:57:08.12,0:57:10.25,yin,,0,0,0,,(void) drawCorners\N{\fs12}void drawCorners.
Dialogue: 0,0:57:10.75,0:57:12.13,yin,,0,0,0,,想要实现它\N{\fs12}Okay. So, to do this,
Dialogue: 0,0:57:12.14,0:57:14.24,yin,,0,0,0,,我需要用NSAttributedString\N{\fs12}I'm going to use NSAttributedString.
Dialogue: 0,0:57:14.88,0:57:16.92,yin,,0,0,0,,我要做的是\N{\fs12}Okay? And what I'm going to do is
Dialogue: 0,0:57:16.93,0:57:18.67,yin,,0,0,0,,将要放在左上角的\N{\fs12}I'm going to make the string
Dialogue: 0,0:57:18.67,0:57:20.40,yin,,0,0,0,,那个字符串设为\N{\fs12}that I'm going to put in that upper corner
Dialogue: 0,0:57:20.48,0:57:23.54,yin,,0,0,0,,A 回车 梅花\N{\fs12}be ace, carriage return, clubs.
Dialogue: 0,0:57:23.96,0:57:25.30,yin,,0,0,0,,我要把它\N{\fs12}Okay? So, I'm just going to put that
Dialogue: 0,0:57:25.31,0:57:26.39,yin,,0,0,0,,放在左上角\N{\fs12}in the upper left corner.
Dialogue: 0,0:57:26.75,0:57:28.01,yin,,0,0,0,,这就是我需要的全部内容\N{\fs12}Bingo, that's all I need.
Dialogue: 0,0:57:28.13,0:57:30.53,yin,,0,0,0,,但在属性化字符串中\N{\fs12}But, I-- there's two things I need to set
Dialogue: 0,0:57:30.53,0:57:31.41,yin,,0,0,0,,有两项需要设置\N{\fs12}in my attributed string.
Dialogue: 0,0:57:31.41,0:57:32.51,yin,,0,0,0,,一是字体\N{\fs12}One is the font,
Dialogue: 0,0:57:32.51,0:57:34.02,yin,,0,0,0,,我要用预设字体\N{\fs12}and I'm going to use preferred font,
Dialogue: 0,0:57:34.06,0:57:37.42,yin,,0,0,0,,二是我需要将段落样式设为居中\N{\fs12}and number two is, I need the paragraph style to be centered.
Dialogue: 0,0:57:37.72,0:57:40.25,yin,,0,0,0,,我希望A和梅花\N{\fs12}I want those two things, the ace and the club,
Dialogue: 0,0:57:40.27,0:57:41.49,yin,,0,0,0,,上下对齐居中\N{\fs12}to be centered on top of each other.
Dialogue: 0,0:57:41.49,0:57:42.76,yin,,0,0,0,,我不想让它们左对齐\N{\fs12}I don't want them to be left aligned,
Dialogue: 0,0:57:42.76,0:57:43.63,yin,,0,0,0,,那样看起来会很奇怪\N{\fs12}that's going to look weird.
Dialogue: 0,0:57:43.65,0:57:46.10,yin,,0,0,0,,尤其是梅花10这种会看起来很搞笑\N{\fs12}Especially like a 10 of clubs would look really funny.
Dialogue: 0,0:57:46.10,0:57:46.97,yin,,0,0,0,,我想让它们居中\N{\fs12}I want them centered.
Dialogue: 0,0:57:46.97,0:57:49.67,yin,,0,0,0,,我们没讲过如何在属性化字符串中\N{\fs12}So, we didn't really talk about how to set that kind
Dialogue: 0,0:57:49.67,0:57:54.53,yin,,0,0,0,,实现段落对齐等等\N{\fs12}of paragraph-level alignment and stuff in a attribute string,
Dialogue: 0,0:57:54.53,0:57:55.94,yin,,0,0,0,,正好可以演示一下\N{\fs12}so here's a chance to show you.
Dialogue: 0,0:57:56.99,0:57:58.31,yin,,0,0,0,,想要实现这个功能\N{\fs12}So, to do that,
Dialogue: 0,0:57:58.32,0:58:01.01,yin,,0,0,0,,我们用这个ParagraphStyle类\N{\fs12}we use this class called paragraph style.
Dialogue: 0,0:58:01.45,0:58:03.14,yin,,0,0,0,,它指定了\N{\fs12}Okay, paragraph style specifies things
Dialogue: 0,0:58:03.14,0:58:04.64,yin,,0,0,0,,段落的对齐方式等\N{\fs12}like the alignment of a paragraph.
Dialogue: 0,0:58:04.89,0:58:06.43,yin,,0,0,0,,所以我要创建一个它的可变版本\N{\fs12}So I'm going to create a mutable one
Dialogue: 0,0:58:06.43,0:58:07.95,yin,,0,0,0,,这样就能进行设置了\N{\fs12}that I can set things in,
Dialogue: 0,0:58:08.22,0:58:11.51,yin,,0,0,0,,方法是[NSMutableParagraphStyle alloc] init]\N{\fs12}and I do that with NSMutableParagraphStyle, alloc init.
Dialogue: 0,0:58:11.99,0:58:14.79,yin,,0,0,0,,然后将paragraphStyle的对齐属性\N{\fs12}And then, I'm going to set the paragraphStyle's alignment
Dialogue: 0,0:58:14.88,0:58:18.71,yin,,0,0,0,,设为NSTextAlignmentCenter\N{\fs12}to be NSTextAlignmentCenter.
Dialogue: 0,0:58:19.09,0:58:19.93,yin,,0,0,0,,表示居中\N{\fs12}So that just mean centered.
Dialogue: 0,0:58:19.93,0:58:20.93,yin,,0,0,0,,然后我要在属性化字符串中\N{\fs12}And then I'm going to set this
Dialogue: 0,0:58:20.94,0:58:22.98,yin,,0,0,0,,将它作为属性 进行设置\N{\fs12}as an attribute on my attributed string.
Dialogue: 0,0:58:23.75,0:58:25.56,yin,,0,0,0,,我还需要一个字体属性\N{\fs12}The other attribute I need is the font,
Dialogue: 0,0:58:25.58,0:58:28.34,yin,,0,0,0,,在这里创建一个cornerFont\N{\fs12}so I'm going to say a cornerFont here, and--
Dialogue: 0,0:58:28.56,0:58:29.36,yin,,0,0,0,,打错了是Font\N{\fs12}whoops, font--
Dialogue: 0,0:58:29.36,0:58:33.07,yin,,0,0,0,,当然我需要用预设字体\N{\fs12}and I need, of course, to use a preferred font.
Dialogue: 0,0:58:33.40,0:58:35.46,yin,,0,0,0,,这有些参数\N{\fs12}And, you know, there's some arguments here.
Dialogue: 0,0:58:35.46,0:58:42.90,yin,,0,0,0,,最适合这里的样式是什么呢\N{\fs12}What would be the best style here?
Dialogue: 0,0:58:42.90,0:58:46.56,yin,,0,0,0,,标题样式吗 还是副标题样式\N{\fs12}You know, maybe Headline, maybe even subHeadline.
Dialogue: 0,0:58:46.91,0:58:50.01,yin,,0,0,0,,但我要试试正文样式 看看是什么样\N{\fs12}But I'm going to try Body, and we'll see how it looks.
Dialogue: 0,0:58:50.02,0:58:50.72,yin,,0,0,0,,如果我不喜欢\N{\fs12}And if I don't like it,
Dialogue: 0,0:58:50.73,0:58:52.09,yin,,0,0,0,,可以再改成别的样式\N{\fs12}I can go change it to something else.
Dialogue: 0,0:58:52.14,0:58:53.13,yin,,0,0,0,,但是关于这个字体\N{\fs12}But there's something really important
Dialogue: 0,0:58:53.13,0:58:54.32,yin,,0,0,0,,有一点很重要 需要注意\N{\fs12}to notice about this font.
Dialogue: 0,0:58:54.33,0:58:56.71,yin,,0,0,0,,它会以特定大小显示\N{\fs12}It's going to come in in a certain size,
Dialogue: 0,0:58:56.72,0:58:59.02,yin,,0,0,0,,用户可以随意选择\N{\fs12}whatever size the user wants,
Dialogue: 0,0:58:59.02,0:59:02.07,yin,,0,0,0,,像我这样上岁数的人想要大字 好看清\N{\fs12}old people like me want big ones, so I can see.
Dialogue: 0,0:59:02.07,0:59:04.82,yin,,0,0,0,,像你们这样的年轻人可能想要小字\N{\fs12}And younger people like you probably want smaller ones.
Dialogue: 0,0:59:05.60,0:59:07.51,yin,,0,0,0,,但我们还要在此基础上对它进行缩放\N{\fs12}But we still need to scale it from there.
Dialogue: 0,0:59:07.51,0:59:09.04,yin,,0,0,0,,我们要用预设字体大小的信息\N{\fs12}So, we want to use that information,
Dialogue: 0,0:59:09.05,0:59:10.10,yin,,0,0,0,,但还要对它进行缩放\N{\fs12}but then we want to scale it
Dialogue: 0,0:59:10.11,0:59:11.81,yin,,0,0,0,,同样取决于卡牌的大小\N{\fs12}again, depending on how big our card is.
Dialogue: 0,0:59:11.86,0:59:14.87,yin,,0,0,0,,大牌显示大字 小牌显示小字\N{\fs12}Big cards want big font, little cards want little fonts.
Dialogue: 0,0:59:14.99,0:59:16.92,yin,,0,0,0,,实现它的缩放的方法\N{\fs12}Okay. So, we're going to scale it
Dialogue: 0,0:59:16.93,0:59:18.80,yin,,0,0,0,,就是在这新建一个字体\N{\fs12}just by creating a new font here.
Dialogue: 0,0:59:20.20,0:59:23.16,yin,,0,0,0,,我们要怎么做呢\N{\fs12}And we're going to do that.
Dialogue: 0,0:59:23.44,0:59:27.68,yin,,0,0,0,,确认一下 要和我之前定好的方法一样\N{\fs12}Make sure I do this the way that I predefined it here.
Dialogue: 0,0:59:28.48,0:59:29.59,yin,,0,0,0,,我要这样做\N{\fs12}So, I'm going to do this
Dialogue: 0,0:59:29.59,0:59:33.29,yin,,0,0,0,,cornerFont fontWithSize\N{\fs12}by saying cornerFont, fontWithSize.
Dialogue: 0,0:59:33.29,0:59:35.84,yin,,0,0,0,,它是字体的一个实例方法\N{\fs12}So, this is a method in font, an instance method in font.
Dialogue: 0,0:59:35.84,0:59:37.04,yin,,0,0,0,,它会新建一个字体\N{\fs12}This is create me a new font
Dialogue: 0,0:59:37.07,0:59:38.85,yin,,0,0,0,,和我发送给它的字体一样\N{\fs12}that's just like the font I'm sending this to
Dialogue: 0,0:59:38.87,0:59:40.04,yin,,0,0,0,,但是大小不同\N{\fs12}but with a different size.
Dialogue: 0,0:59:40.43,0:59:42.62,yin,,0,0,0,,我要用的大小是\N{\fs12}And the size I'm going to use is
Dialogue: 0,0:59:42.79,0:59:45.36,yin,,0,0,0,,cornerFont的当前大小\N{\fs12}cornerFont current size--
Dialogue: 0,0:59:45.45,0:59:47.58,yin,,0,0,0,,pointSize是字体的一个属性\N{\fs12}pointSize is property in a font
Dialogue: 0,0:59:47.58,0:59:49.29,yin,,0,0,0,,能告诉你当前磅值是多少\N{\fs12}that tells you what its current point size is--
Dialogue: 0,0:59:49.62,0:59:54.12,yin,,0,0,0,,用它乘以cornerScaleFactor\N{\fs12}times that cornerScaleFactor
Dialogue: 0,0:59:54.74,0:59:57.01,yin,,0,0,0,,我之前用过的 在上面这里\N{\fs12}that I used earlier, up here,
Dialogue: 0,0:59:57.08,0:59:59.21,yin,,0,0,0,,求cornerRadius时用到的\N{\fs12}to do this cornerRadius, okay?
Dialogue: 0,0:59:59.35,1:00:00.76,yin,,0,0,0,,就是这个cornerScaleFactor\N{\fs12}So this is this cornerScaleFactor.
Dialogue: 0,1:00:00.76,1:00:02.79,yin,,0,0,0,,用的是相同的比例系数\N{\fs12}I'm using the same factor here.
Dialogue: 0,1:00:03.31,1:00:05.57,yin,,0,0,0,,我们会检查显示效果是否正确\N{\fs12}And, again, we'll see if that turns out to be right,
Dialogue: 0,1:00:05.59,1:00:06.78,yin,,0,0,0,,如果不对 还可以修改\N{\fs12}if not, we can always change it.
Dialogue: 0,1:00:07.38,1:00:09.68,yin,,0,0,0,,现在 我们来创建这个属性化字符串\N{\fs12}So now, let's go ahead and create this attributed string.
Dialogue: 0,1:00:11.02,1:00:14.13,yin,,0,0,0,,我要叫它cornerText\N{\fs12}I'm going to call this the cornerText, and I'm--
Dialogue: 0,1:00:14.13,1:00:19.28,yin,,0,0,0,,[NSAttributedString alloc] initWithString\N{\fs12}it's just NSAttributedString, alloc, initWithString.
Dialogue: 0,1:00:20.67,1:00:24.92,yin,,0,0,0,,我要创建的字符串是NSString stringWithFormat\N{\fs12}The string I'm going to create is NSString stringWithFormat,
Dialogue: 0,1:00:25.17,1:00:29.87,yin,,0,0,0,,就是刚才说过的 %@\N{\fs12}%@\N{\fs12}as I promised, % at sign, carriage return, % at sign.
Dialogue: 0,1:00:30.22,1:00:32.85,yin,,0,0,0,,第一个占位符是rank\N{\fs12}Okay. The first thing is the rank.
Dialogue: 0,1:00:32.91,1:00:35.70,yin,,0,0,0,,这里要写self rankAsString\N{\fs12}So, I need self rankAsString,
Dialogue: 0,1:00:35.71,1:00:37.26,yin,,0,0,0,,因为rank是一个数字\N{\fs12}because my rank is a number,
Dialogue: 0,1:00:37.26,1:00:38.57,yin,,0,0,0,,需要把它转换为字符串\N{\fs12}and I need it as a string.
Dialogue: 0,1:00:38.79,1:00:40.66,yin,,0,0,0,,我要到上面这里...\N{\fs12}So I'm going to go up here and really--
Dialogue: 0,1:00:40.91,1:00:42.48,yin,,0,0,0,,出来了 rankAsString\N{\fs12}whoop, look at that, rankAsString.
Dialogue: 0,1:00:42.78,1:00:44.40,yin,,0,0,0,,和之前做过的一样\N{\fs12}So, same thing we did before,
Dialogue: 0,1:00:44.41,1:00:46.46,yin,,0,0,0,,一个排列数组 然后是self.rank\N{\fs12}little array with that in there, self rank.
Dialogue: 0,1:00:46.46,1:00:48.15,yin,,0,0,0,,没有检查bounds之类的操作\N{\fs12}I don't do any bounds checking and stuff,
Dialogue: 0,1:00:48.15,1:00:50.48,yin,,0,0,0,,这个示例缺少bounds检查\N{\fs12}this demo is light on bounds checking.
Dialogue: 0,1:00:50.48,1:00:52.61,yin,,0,0,0,,好的代码会在自我保护上做的更好一些\N{\fs12}You know, good code would protect yourself a little better.
Dialogue: 0,1:00:52.95,1:00:54.48,yin,,0,0,0,,然后是suit\N{\fs12}And then, here is the suit.
Dialogue: 0,1:00:55.18,1:00:57.44,yin,,0,0,0,,suit\N{\fs12}Okay? Suit, suit.
Dialogue: 0,1:00:58.61,1:01:01.35,yin,,0,0,0,,检查一下方括号对不对\N{\fs12}All right, so make sure I have my square brackets right here.
Dialogue: 0,1:01:01.62,1:01:06.57,yin,,0,0,0,,self suit 不对 好了\N{\fs12}self suit, no, and there we go.
Dialogue: 0,1:01:07.19,1:01:08.40,yin,,0,0,0,,这就是字符串\N{\fs12}So, there's the string.
Dialogue: 0,1:01:08.48,1:01:10.85,yin,,0,0,0,,这里我们要设置的属性\N{\fs12}And then, the attributes we're gonna
Dialogue: 0,1:01:10.85,1:01:12.70,yin,,0,0,0,,是一个dictionary\N{\fs12}set here is a dictionary.
Dialogue: 0,1:01:12.90,1:01:15.15,yin,,0,0,0,,我要设置字体\N{\fs12}And I need to set the font.
Dialogue: 0,1:01:16.68,1:01:19.39,yin,,0,0,0,,叫什么来着\N{\fs12}Font-- what's it called again?
Dialogue: 0,1:01:19.52,1:01:24.24,yin,,0,0,0,,NSFontAttributeName\N{\fs12}Font-- NSFontAttributeName.
Dialogue: 0,1:01:25.08,1:01:27.12,yin,,0,0,0,,然后是cornerFont\N{\fs12}And that's the cornerFont right there.
Dialogue: 0,1:01:27.12,1:01:30.53,yin,,0,0,0,,然后是NSParagraphStyleAttribute\N{\fs12}And then, I need NSParagraphStyle attribute,
Dialogue: 0,1:01:30.53,1:01:32.41,yin,,0,0,0,,这个大家没见过\N{\fs12}which is a new one you haven't seen before
Dialogue: 0,1:01:32.66,1:01:34.14,yin,,0,0,0,,我们叫它paragraphStyle\N{\fs12}and we'll call that paragraphStyle.
Dialogue: 0,1:01:35.32,1:01:36.86,yin,,0,0,0,,加上大括号\N{\fs12}Okay, close curly brace.
Dialogue: 0,1:01:37.40,1:01:38.93,yin,,0,0,0,,错了 谢谢\N{\fs12}Oops! Thank you.
Dialogue: 0,1:01:40.07,1:01:41.03,yin,,0,0,0,,删掉它\N{\fs12}Delete that.
Dialogue: 0,1:01:42.01,1:01:44.49,yin,,0,0,0,,分号\N{\fs12}Okay, semicolon.
Dialogue: 0,1:01:44.62,1:01:45.40,yin,,0,0,0,,对了吗\N{\fs12}Are we good there?
Dialogue: 0,1:01:45.54,1:01:46.25,yin,,0,0,0,,我觉得可以了\N{\fs12}I think we're good.
Dialogue: 0,1:01:46.25,1:01:47.82,yin,,0,0,0,,好了 这就是cornerText\N{\fs12}Okay. So, there's the cornerText,
Dialogue: 0,1:01:47.82,1:01:50.02,yin,,0,0,0,,就是这个回车字符串\N{\fs12}which is just this carriage return thing,
Dialogue: 0,1:01:50.03,1:01:52.65,yin,,0,0,0,,希望字体大小合适且居中\N{\fs12}centered with the, hopefully, good-sized font.
Dialogue: 0,1:01:52.90,1:01:55.58,yin,,0,0,0,,现在我要得到它的bounds\N{\fs12}And now, I'm going to get the bounds of that.
Dialogue: 0,1:01:55.69,1:01:57.01,yin,,0,0,0,,我要得到bounds\N{\fs12}Okay? I'm going to get the bounds,
Dialogue: 0,1:01:57.01,1:01:58.12,yin,,0,0,0,,然后将它放进去\N{\fs12}then I'm going to put that in.
Dialogue: 0,1:01:58.28,1:01:59.74,yin,,0,0,0,,bounds有两个参数\N{\fs12}And there's two things to the bounds.
Dialogue: 0,1:01:59.74,1:02:03.06,yin,,0,0,0,,一是左上角那个点\N{\fs12}One is the point, the upper left-hand point of it.
Dialogue: 0,1:02:03.22,1:02:05.48,yin,,0,0,0,,我可以直接...\N{\fs12}And I could just make that be--
Dialogue: 0,1:02:06.12,1:02:07.43,yin,,0,0,0,,实际上 我甚至不需要用局部变量\N{\fs12}actually, I don't even need a local variable.
Dialogue: 0,1:02:07.44,1:02:09.64,yin,,0,0,0,,就直接用textBounds.origin\N{\fs12}Let's just go straight to bounds dot origin.
Dialogue: 0,1:02:10.17,1:02:13.50,yin,,0,0,0,,其实我可以将它设为(0,0)\N{\fs12}So, I could make that be zero-zero, actually,
Dialogue: 0,1:02:13.50,1:02:16.46,yin,,0,0,0,,但这样的话 A回车梅花\N{\fs12}but then my little A return clubs
Dialogue: 0,1:02:16.47,1:02:19.14,yin,,0,0,0,,可能会和roundedRect的边线重叠\N{\fs12}might kind of bang into my roundedRect a little.
Dialogue: 0,1:02:19.14,1:02:20.70,yin,,0,0,0,,所以要把它往里移一点\N{\fs12}So, I want to move it in a little bit,
Dialogue: 0,1:02:20.83,1:02:22.73,yin,,0,0,0,,这里同样要根据roundedRect的大小\N{\fs12}but again, it depends on how big the roundedRect is
Dialogue: 0,1:02:22.74,1:02:24.07,yin,,0,0,0,,来决定往里移动的距离\N{\fs12}to how much I want to move it in.
Dialogue: 0,1:02:24.31,1:02:26.56,yin,,0,0,0,,我们用CGPointMake\N{\fs12}So let's say CGPointMake,
Dialogue: 0,1:02:27.27,1:02:32.99,yin,,0,0,0,,[self cornerOffset] [self cornerOffset]\N{\fs12}how about self cornerOffset, self cornerOffset.
Dialogue: 0,1:02:33.00,1:02:37.25,yin,,0,0,0,,cornerOffset是我加在这里的另外一个方法\N{\fs12}And cornerOffset is another little method I put up here
Dialogue: 0,1:02:37.27,1:02:39.78,yin,,0,0,0,,它也和cornerRadius有关\N{\fs12}that's also related to this cornerRadius.
Dialogue: 0,1:02:39.78,1:02:42.50,yin,,0,0,0,,看到了吗 我用cornerRadius除以3\N{\fs12}You see, I took the cornerRadius divided by 3.
Dialogue: 0,1:02:43.32,1:02:45.06,yin,,0,0,0,,看起来大概合适\N{\fs12}That looks like that's probably about right.
Dialogue: 0,1:02:45.08,1:02:46.82,yin,,0,0,0,,你在设计UI时\N{\fs12}Again, these are numbers you would want to play with
Dialogue: 0,1:02:46.84,1:02:48.26,yin,,0,0,0,,需要考虑这些数字\N{\fs12}when you are designing your UI.
Dialogue: 0,1:02:48.46,1:02:50.10,yin,,0,0,0,,这些数字看起来还不错\N{\fs12}These numbers seem to work pretty good.
Dialogue: 0,1:02:50.44,1:02:52.51,yin,,0,0,0,,而矩形的大小\N{\fs12}And then, the size of this rectangle,
Dialogue: 0,1:02:52.52,1:02:56.07,yin,,0,0,0,,我要请求属性化字符串来告诉我\N{\fs12}I actually need to ask the attributed string to tell me.
Dialogue: 0,1:02:57.16,1:02:59.03,yin,,0,0,0,,cornerText size\N{\fs12}CornerText size.
Dialogue: 0,1:02:59.32,1:03:01.98,yin,,0,0,0,,那个A回车梅花要多大呢\N{\fs12}You know, how big is that A return clubs going to be?
Dialogue: 0,1:03:02.05,1:03:03.18,yin,,0,0,0,,因为我不知道\N{\fs12}Because I don't know. Right?
Dialogue: 0,1:03:03.19,1:03:04.68,yin,,0,0,0,,但属性化字符串可以告诉我\N{\fs12}The attributed string can tell me, though.
Dialogue: 0,1:03:05.12,1:03:06.57,yin,,0,0,0,,现在我有了一个矩形\N{\fs12}So, now I have a rectangle,
Dialogue: 0,1:03:06.59,1:03:08.68,yin,,0,0,0,,我要在里面绘制A回车梅花\N{\fs12}and I'm going to drew the A return clubs in,
Dialogue: 0,1:03:08.69,1:03:11.48,yin,,0,0,0,,二者水平居中\N{\fs12}and it's going to be centered horizontally on it.
Dialogue: 0,1:03:12.13,1:03:14.78,yin,,0,0,0,,我只要让它绘制\N{\fs12}And all I need to do is tell it to draw.
Dialogue: 0,1:03:15.47,1:03:20.96,yin,,0,0,0,,cornerText drawInRect: textBounds\N{\fs12}CornerText drawInRect: textBounds.
Dialogue: 0,1:03:21.36,1:03:23.21,yin,,0,0,0,,这样它就在矩形中绘制了\N{\fs12}Okay? So now it's drawing in that rect.
Dialogue: 0,1:03:23.22,1:03:26.10,yin,,0,0,0,,会在那个矩形中进行文字对齐\N{\fs12}So it's gonna be doing the text alignment inside that rectangle.
Dialogue: 0,1:03:26.88,1:03:28.46,yin,,0,0,0,,就是这些\N{\fs12}Okay? So that's it.
Dialogue: 0,1:03:29.28,1:03:30.45,yin,,0,0,0,,希望运行正常\N{\fs12}Let's hope this works.
Dialogue: 0,1:03:33.88,1:03:34.87,yin,,0,0,0,,这不对\N{\fs12}And it doesn't work.
Dialogue: 0,1:03:34.90,1:03:36.49,yin,,0,0,0,,为什么不行呢\N{\fs12}Now, why does this work-- not work?
Dialogue: 0,1:03:36.50,1:03:38.09,yin,,0,0,0,,因为我们还没有设置卡牌\N{\fs12}Well, because we haven't set any card.
Dialogue: 0,1:03:38.41,1:03:41.60,yin,,0,0,0,,这个PlayingCardView没有显示特定卡牌\N{\fs12}This PlayingCardView is not displaying any particular card.
Dialogue: 0,1:03:41.61,1:03:44.20,yin,,0,0,0,,所以我们要回到视图控制器\N{\fs12}So, we need to go back to our view controller
Dialogue: 0,1:03:44.37,1:03:46.16,yin,,0,0,0,,对卡牌进行设置\N{\fs12}and set that card to something.
Dialogue: 0,1:03:46.27,1:03:47.67,yin,,0,0,0,,现在想要测试一下的话\N{\fs12}And a great place to do that
Dialogue: 0,1:03:47.69,1:03:49.08,yin,,0,0,0,,有一个地方很合适\N{\fs12}for testing right now anyway,
Dialogue: 0,1:03:49.09,1:03:50.09,yin,,0,0,0,,就是在viewDidLoad中\N{\fs12}is in viewDidLoad.
Dialogue: 0,1:03:50.64,1:03:52.85,yin,,0,0,0,,我们只要选择一种卡牌\N{\fs12}So, we're just going to pick a particular one.
Dialogue: 0,1:03:52.95,1:03:56.27,yin,,0,0,0,,还要添加一个到卡牌的输出口\N{\fs12}We also need to make an outlet to our card here,
Dialogue: 0,1:03:56.29,1:03:57.57,yin,,0,0,0,,这样才能向它发送消息\N{\fs12}so we can talk to it.
Dialogue: 0,1:03:57.96,1:04:00.55,yin,,0,0,0,,从左边这里开始 到右边\N{\fs12}So we're going to start here, and then go over here.
Dialogue: 0,1:04:00.57,1:04:02.65,yin,,0,0,0,,按住control键拖拽到右边 创建输出口\N{\fs12}I'm going to control-drag to create an outlet.
Dialogue: 0,1:04:02.98,1:04:05.25,yin,,0,0,0,,我要叫它playingCardView\N{\fs12}I'm going to call it playingCardView.
Dialogue: 0,1:04:06.12,1:04:07.48,yin,,0,0,0,,这是一个输出口\N{\fs12}Okay, so here's an outlet,
Dialogue: 0,1:04:07.51,1:04:09.40,yin,,0,0,0,,拉大一点 看得更清楚\N{\fs12}so you can see what this is about.
Dialogue: 0,1:04:10.50,1:04:12.91,yin,,0,0,0,,这是一个输出口 IBOutlet\N{\fs12}Okay. This is an outlet, IBOutlet.
Dialogue: 0,1:04:12.92,1:04:13.91,yin,,0,0,0,,它是PlayingCardView\N{\fs12}It's a PlayingCardView,
Dialogue: 0,1:04:13.92,1:04:16.92,yin,,0,0,0,,所以需要导入PlayingCardView\N{\fs12}so we need to import PlayingCardView.
Dialogue: 0,1:04:18.56,1:04:20.28,yin,,0,0,0,,这样就能用了 很好\N{\fs12}All right, so that works. That's good.
Dialogue: 0,1:04:20.44,1:04:21.30,yin,,0,0,0,,我们有了playingCardView\N{\fs12}We have our playingCardView,
Dialogue: 0,1:04:21.32,1:04:23.10,yin,,0,0,0,,我只要设置playingCardView\N{\fs12}so I'm just going to set my playing card--
Dialogue: 0,1:04:23.30,1:04:24.93,yin,,0,0,0,,self.playingCardView\N{\fs12}self.playingCardView.
Dialogue: 0,1:04:25.04,1:04:27.77,yin,,0,0,0,,将它的suit设为红桃\N{\fs12}I'm going to set its suit to be hearts,
Dialogue: 0,1:04:28.01,1:04:31.11,yin,,0,0,0,,将rank设为K\N{\fs12}and then I'm going to set its rank to be king.
Dialogue: 0,1:04:31.46,1:04:33.40,yin,,0,0,0,,这是我最喜欢的牌 红桃K\N{\fs12}Okay, that's my favorite card, king of hearts.
Dialogue: 0,1:04:33.40,1:04:34.78,yin,,0,0,0,,在这里添加一个心形\N{\fs12}So, let's set this to hearts.
Dialogue: 0,1:04:36.07,1:04:37.31,yin,,0,0,0,,选择特殊字符\N{\fs12}Special characters.
Dialogue: 0,1:04:37.94,1:04:38.84,yin,,0,0,0,,这个心形\N{\fs12}There's a heart.
Dialogue: 0,1:04:40.33,1:04:41.99,yin,,0,0,0,,没选上\N{\fs12}Oop, missed it.
Dialogue: 0,1:04:43.32,1:04:45.64,yin,,0,0,0,,特殊字符 心形在这里\N{\fs12}Characters. There's a heart.
Dialogue: 0,1:04:45.98,1:04:46.79,yin,,0,0,0,,这回选上了吗\N{\fs12}Did I get it that time?
Dialogue: 0,1:04:47.15,1:04:50.33,yin,,0,0,0,,好了 红桃K设好了\N{\fs12}Yeah. Okay, so there's a king of hearts,
Dialogue: 0,1:04:50.35,1:04:51.00,yin,,0,0,0,,我们要显示这张牌\N{\fs12}so we're going to do that.
Dialogue: 0,1:04:51.00,1:04:52.03,yin,,0,0,0,,运行一下\N{\fs12}So, now we run.
Dialogue: 0,1:04:53.42,1:04:55.47,yin,,0,0,0,,希望能显示出红桃K\N{\fs12}And we should hopefully get the king of hearts.
Dialogue: 0,1:04:56.26,1:04:56.91,yin,,0,0,0,,出来了\N{\fs12}There it is.
Dialogue: 0,1:04:57.06,1:04:58.72,yin,,0,0,0,,大小看起来很合适\N{\fs12}And the sizes look pretty good there.
Dialogue: 0,1:04:59.05,1:05:00.94,yin,,0,0,0,,如果对它进行调试\N{\fs12}Okay. Now, if I were debugging this--
Dialogue: 0,1:05:00.96,1:05:02.00,yin,,0,0,0,,我们直接做一下吧\N{\fs12}In fact, let's just do it.
Dialogue: 0,1:05:02.42,1:05:04.57,yin,,0,0,0,,把牌缩到很小 看会怎么样\N{\fs12}Let's make this card really small, see what happens.
Dialogue: 0,1:05:04.77,1:05:05.49,yin,,0,0,0,,试一下\N{\fs12}Let's try this.
Dialogue: 0,1:05:07.71,1:05:08.82,yin,,0,0,0,,看起来也不错\N{\fs12}And that looked good, too.
Dialogue: 0,1:05:09.19,1:05:10.45,yin,,0,0,0,,成功了 我很开心\N{\fs12}Okay, so I'm pretty happy with that.
Dialogue: 0,1:05:10.45,1:05:12.17,yin,,0,0,0,,我还应该再转到设置页面\N{\fs12}And then, I would also want to go to settings
Dialogue: 0,1:05:12.17,1:05:13.73,yin,,0,0,0,,将字体变大和变小\N{\fs12}and set the fonts bigger and smaller,
Dialogue: 0,1:05:13.73,1:05:15.10,yin,,0,0,0,,检查是否能正常显示\N{\fs12}and make sure that still works.
Dialogue: 0,1:05:15.36,1:05:17.94,yin,,0,0,0,,但是现在这样我已经很满意了\N{\fs12}But, you know, I'm so far pretty darn happy with it.
Dialogue: 0,1:05:17.94,1:05:19.83,yin,,0,0,0,,当然了 我来之前检查过了\N{\fs12}Now, of course, I checked this before I came today.
Dialogue: 0,1:05:19.83,1:05:22.17,yin,,0,0,0,,课上就不做了\N{\fs12}I'm not gonna do these on the fly.
Dialogue: 0,1:05:22.18,1:05:22.95,yin,,0,0,0,,好了\N{\fs12}So, there we go.
Dialogue: 0,1:05:24.13,1:05:25.90,yin,,0,0,0,,下面我们要做什么呢\N{\fs12}Now, what do we need to do next?
Dialogue: 0,1:05:25.91,1:05:28.12,yin,,0,0,0,,现在我们要把那个红桃K\N{\fs12}Well, now we need to put that king of hearts
Dialogue: 0,1:05:28.13,1:05:29.92,yin,,0,0,0,,上下颠倒 放在右下角\N{\fs12}in the other corner, upside-down.
Dialogue: 0,1:05:30.77,1:05:33.08,yin,,0,0,0,,你可能会想 太好了 上下颠倒\N{\fs12}Okay, now you might think, "Oh great, upside-down.
Dialogue: 0,1:05:33.08,1:05:34.26,yin,,0,0,0,,怎么做呢\N{\fs12}Well, how are we going to do this?"
Dialogue: 0,1:05:34.49,1:05:37.07,yin,,0,0,0,,在Core Graphics中\N{\fs12}Turns out to be very, very easy to rotate
Dialogue: 0,1:05:37.08,1:05:39.62,yin,,0,0,0,,要旋转绘制内容非常简单\N{\fs12}what you draw in Core Graphics.
Dialogue: 0,1:05:39.84,1:05:41.04,yin,,0,0,0,,我们来做一下\N{\fs12}So, we're just going to do that.
Dialogue: 0,1:05:41.05,1:05:43.02,yin,,0,0,0,,和刚才的操作都一样\N{\fs12}We're just gonna do exactly what we just did
Dialogue: 0,1:05:43.04,1:05:44.70,yin,,0,0,0,,但是要旋转至上下颠倒\N{\fs12}but rotate it upside-down.
Dialogue: 0,1:05:45.32,1:05:46.44,yin,,0,0,0,,回到这里\N{\fs12}So I'm going to go back here.
Dialogue: 0,1:05:46.45,1:05:48.89,yin,,0,0,0,,还要做同样的操作 这个drawInRect\N{\fs12}I'm going to do this same thing, this drawInRect.
Dialogue: 0,1:05:49.25,1:05:52.67,yin,,0,0,0,,但执行这步之前 在这里\N{\fs12}Okay? But before I do it, inside here,
Dialogue: 0,1:05:52.89,1:05:55.15,yin,,0,0,0,,我要将它旋转至上下颠倒\N{\fs12}I'm going to rotate it upside down.
Dialogue: 0,1:05:55.45,1:05:57.59,yin,,0,0,0,,首先移到右下角\N{\fs12}First, I'm going to move down to that corner,
Dialogue: 0,1:05:57.97,1:05:59.34,yin,,0,0,0,,然后旋转至上下颠倒\N{\fs12}then I'm going to rotate upside-down.
Dialogue: 0,1:06:00.02,1:06:02.23,yin,,0,0,0,,如何移到一角呢\N{\fs12}So, how do we move over to a corner?
Dialogue: 0,1:06:02.23,1:06:04.83,yin,,0,0,0,,我们用一个CG函数\N{\fs12}Well, let's use one of these CG functions
Dialogue: 0,1:06:04.83,1:06:06.81,yin,,0,0,0,,这就是我说的用到上下文的地方\N{\fs12}that I told you you needed the context for.
Dialogue: 0,1:06:07.07,1:06:09.46,yin,,0,0,0,,用ContextRef\N{\fs12}So, let's get a contextRef.
Dialogue: 0,1:06:10.11,1:06:14.59,yin,,0,0,0,,context=UIGraphicsGetCurrentContext()\N{\fs12}Context equals UIGraphicsGetCurrentContext.
Dialogue: 0,1:06:14.59,1:06:16.60,yin,,0,0,0,,我讲了 这是得到当前上下文的方法\N{\fs12}I told you that's how you get the current context.
Dialogue: 0,1:06:16.80,1:06:20.53,yin,,0,0,0,,得到它之后 我可以用CGTrans...\N{\fs12}Now that I have it, I can use CGTrans--
Dialogue: 0,1:06:20.54,1:06:22.97,yin,,0,0,0,,叫什么来着 有人记得吗\N{\fs12}What's it called? Anybody remember?
Dialogue: 0,1:06:23.38,1:06:26.31,yin,,0,0,0,,ContextTranslate什么的\N{\fs12}Translate something, ContextTranslate something.
Dialogue: 0,1:06:26.51,1:06:27.14,yin,,0,0,0,,找到了\N{\fs12}There we go.
Dialogue: 0,1:06:27.51,1:06:28.86,yin,,0,0,0,,TranslateCTM\N{\fs12}TranslateCTM.
Dialogue: 0,1:06:28.88,1:06:31.14,yin,,0,0,0,,CTM表示变换矩阵\N{\fs12}CTM is our transformation matrix.
Dialogue: 0,1:06:31.36,1:06:32.65,yin,,0,0,0,,我们要转移它\N{\fs12}Okay, so we're just going to translate,
Dialogue: 0,1:06:32.65,1:06:33.85,yin,,0,0,0,,也就是移动它\N{\fs12}which means move it.
Dialogue: 0,1:06:33.90,1:06:34.79,yin,,0,0,0,,目标位置是\N{\fs12}So I'm going to move it down
Dialogue: 0,1:06:34.79,1:06:38.51,yin,,0,0,0,,self.bounds.width, self.bounds.height\N{\fs12}to self.bounds.width and self.bounds.height.
Dialogue: 0,1:06:39.62,1:06:42.62,yin,,0,0,0,,移动到右下角\N{\fs12}Okay, move down to the corner there.
Dialogue: 0,1:06:42.66,1:06:44.48,yin,,0,0,0,,我输错了吗\N{\fs12}Oops! Did I type something wrong?
Dialogue: 0,1:06:44.98,1:06:48.28,yin,,0,0,0,,忘了size\N{\fs12}Size, oops, size, size.
Dialogue: 0,1:06:48.49,1:06:52.11,yin,,0,0,0,,self.bounds.size.width, self.bounds.size.heigth\N{\fs12}Okay, self.bounds.size.width, self.bounds.size.heigth.
Dialogue: 0,1:06:52.12,1:06:54.06,yin,,0,0,0,,我要移动到右下角\N{\fs12}So, I'm moving down to the bottom corner there
Dialogue: 0,1:06:54.08,1:06:55.83,yin,,0,0,0,,要记住 原点是左上角\N{\fs12}Remember our origin is in the upper left.
Dialogue: 0,1:06:56.29,1:06:57.67,yin,,0,0,0,,现在来旋转\N{\fs12}And now, let's rotate.
Dialogue: 0,1:06:57.81,1:06:59.97,yin,,0,0,0,,用CGContextRotateCTM context\N{\fs12}There's a RotateCTM context
Dialogue: 0,1:07:00.13,1:07:01.43,yin,,0,0,0,,然后是旋转弧度\N{\fs12}and this is radians.
Dialogue: 0,1:07:01.48,1:07:03.16,yin,,0,0,0,,我要旋转半圈\N{\fs12}So, I'm going to go halfway around,
Dialogue: 0,1:07:03.18,1:07:04.12,yin,,0,0,0,,就是要上下颠倒\N{\fs12}in other words, upside-down,
Dialogue: 0,1:07:04.14,1:07:06.42,yin,,0,0,0,,也就是M_PI\N{\fs12}which is m underbar PI.
Dialogue: 0,1:07:07.58,1:07:09.61,yin,,0,0,0,,π弧度是半圈180度\N{\fs12}Pi radians is halfway around a circle.
Dialogue: 0,1:07:09.69,1:07:11.82,yin,,0,0,0,,我想让它上下颠倒\N{\fs12}I want it to be upside-down, directly upside-down,
Dialogue: 0,1:07:11.82,1:07:14.22,yin,,0,0,0,,从开始位置旋转180度\N{\fs12}180 degrees from where it was before.
Dialogue: 0,1:07:14.66,1:07:15.41,yin,,0,0,0,,就是这样\N{\fs12}And, that's it. Okay?
Dialogue: 0,1:07:16.07,1:07:19.99,yin,,0,0,0,,我移动并旋转了要绘制的内容\N{\fs12}So, I've translated and rotated what I wanted to draw.
Dialogue: 0,1:07:19.99,1:07:21.96,yin,,0,0,0,,然后我只要再绘制一遍就行了\N{\fs12}And then, I'm just gonna draw the exact same thing again.
Dialogue: 0,1:07:24.60,1:07:25.56,yin,,0,0,0,,很好 没问题\N{\fs12}Bingo! Okay?
Dialogue: 0,1:07:25.79,1:07:28.69,yin,,0,0,0,,Core Graphics中的某些操作真的很容易实现\N{\fs12}So, some stuff is really, really easy to do in Core Graphics.
Dialogue: 0,1:07:28.90,1:07:31.75,yin,,0,0,0,,旋转 移动 特别容易\N{\fs12}Okay? Rotating, translating things, super-duper easy.
Dialogue: 0,1:07:31.99,1:07:33.09,yin,,0,0,0,,明白吗 这部分做完了\N{\fs12}All right? So, we're good there.
Dialogue: 0,1:07:33.45,1:07:34.91,yin,,0,0,0,,下面我们要做的是\N{\fs12}Okay, the next thing we want to do
Dialogue: 0,1:07:35.07,1:07:37.20,yin,,0,0,0,,绘制牌面\N{\fs12}is draw the face of the card.
Dialogue: 0,1:07:37.85,1:07:40.39,yin,,0,0,0,,红桃K的牌面\N{\fs12}Okay? That king of hearts face.
Dialogue: 0,1:07:40.40,1:07:42.62,yin,,0,0,0,,扑克牌的牌面有两种\N{\fs12}Now, the face of the card is one of two ways,
Dialogue: 0,1:07:42.62,1:07:45.05,yin,,0,0,0,,一种是人头牌 比如K\N{\fs12}either it's a face card, like the king,
Dialogue: 0,1:07:45.21,1:07:47.39,yin,,0,0,0,,另一种就是花色符号组成的\N{\fs12}or it's just the pips, right?
Dialogue: 0,1:07:47.85,1:07:50.32,yin,,0,0,0,,比如红桃4的牌面就是四个小心形图案\N{\fs12}Like the four of hears is four little hearts in there.
Dialogue: 0,1:07:50.32,1:07:51.61,yin,,0,0,0,,两种我们都要做\N{\fs12}Okay, so we have to do both ways.
Dialogue: 0,1:07:51.61,1:07:54.56,yin,,0,0,0,,先做人头牌\N{\fs12}So, let's do the face card one first.
Dialogue: 0,1:07:54.74,1:07:57.07,yin,,0,0,0,,我要在上面这里完成\N{\fs12}Okay, so I'm going to do that up here,
Dialogue: 0,1:07:57.56,1:07:58.35,yin,,0,0,0,,回到drawRect方法\N{\fs12}back in drawRect.
Dialogue: 0,1:07:58.35,1:07:59.38,yin,,0,0,0,,在drawRect方法中\N{\fs12}So, I'm in drawRect.
Dialogue: 0,1:08:00.40,1:08:01.45,yin,,0,0,0,,我要做的是\N{\fs12}And what I'm going to do,
Dialogue: 0,1:08:01.47,1:08:03.87,yin,,0,0,0,,我要在这里添加一组条件判断\N{\fs12}I'm just gonna kind of have a design here
Dialogue: 0,1:08:03.95,1:08:05.98,yin,,0,0,0,,如果能找到\N{\fs12}where if I can find an image
Dialogue: 0,1:08:06.14,1:08:07.72,yin,,0,0,0,,和牌名相同的图像\N{\fs12}that has the name of the card,
Dialogue: 0,1:08:07.98,1:08:08.79,yin,,0,0,0,,就直接用它\N{\fs12}I'll use it.
Dialogue: 0,1:08:08.94,1:08:11.20,yin,,0,0,0,,否则就绘制花色符号\N{\fs12}Otherwise, I'll try and draw pips,
Dialogue: 0,1:08:11.21,1:08:12.34,yin,,0,0,0,,否则就什么都不绘制\N{\fs12}otherwise, I'll draw nothing.
Dialogue: 0,1:08:12.90,1:08:15.92,yin,,0,0,0,,这种方法挺安全的\N{\fs12}Okay, so it's kind of a fairly safe way to go about it.
Dialogue: 0,1:08:16.03,1:08:18.64,yin,,0,0,0,,如果我找不到牌面图像 就不绘制了\N{\fs12}If I can't find the face card image, then it'll just be--
Dialogue: 0,1:08:18.65,1:08:19.83,yin,,0,0,0,,两个角的内容还在\N{\fs12}I'll still have the corners,
Dialogue: 0,1:08:20.09,1:08:21.18,yin,,0,0,0,,但牌面上不会有任何图案\N{\fs12}but I won't have any drawing.
Dialogue: 0,1:08:21.19,1:08:22.79,yin,,0,0,0,,要怎么实现呢\N{\fs12}So, how am I going to do that?
Dialogue: 0,1:08:23.14,1:08:25.30,yin,,0,0,0,,先查找图像\N{\fs12}I'm just going to look up the image.
Dialogue: 0,1:08:25.31,1:08:26.81,yin,,0,0,0,,用UIImage\N{\fs12}I'm going to say UIImage--
Dialogue: 0,1:08:27.32,1:08:28.65,yin,,0,0,0,,再扩大点空间\N{\fs12}Let's make more space again.
Dialogue: 0,1:08:30.63,1:08:32.98,yin,,0,0,0,,UIImage faceImage\N{\fs12}UIImage, faceImage,
Dialogue: 0,1:08:32.99,1:08:38.09,yin,,0,0,0,,UIImage imageNamed:\N{\fs12}and I'm going to say UIImage, imageNamed,
Dialogue: 0,1:08:38.25,1:08:41.67,yin,,0,0,0,,然后创建一个字符串 stringWithFormat\N{\fs12}then I'm going to make a string, stringWithFormat.
Dialogue: 0,1:08:41.76,1:08:44.67,yin,,0,0,0,,占位符分别为rank和suit\N{\fs12}And it's going to have the rank and the suit.
Dialogue: 0,1:08:45.12,1:08:49.84,yin,,0,0,0,,[self rankAsString] self.suit\N{\fs12}Okay, self rankAsString, self.suit.
Dialogue: 0,1:08:50.91,1:08:53.05,yin,,0,0,0,,这就是图像名称\N{\fs12}Okay. So, there's the image name.
Dialogue: 0,1:08:53.05,1:08:54.57,yin,,0,0,0,,我要查找这个名称的图像\N{\fs12}So, I'm going to look that image up,
Dialogue: 0,1:08:54.58,1:08:57.40,yin,,0,0,0,,比如黑桃J\N{\fs12}so that would be like, J spades, right?
Dialogue: 0,1:08:57.41,1:08:59.66,yin,,0,0,0,,红桃10没有对应图像\N{\fs12}10 hearts is not going to find 10 hearts.
Dialogue: 0,1:08:59.67,1:09:00.65,yin,,0,0,0,,没有它的图\N{\fs12}There's not going to be such thing,
Dialogue: 0,1:09:00.66,1:09:02.10,yin,,0,0,0,,但是有梅花K\N{\fs12}but there will be K clubs, right?
Dialogue: 0,1:09:02.11,1:09:02.87,yin,,0,0,0,,可以找到这种的\N{\fs12}It'll find those.
Dialogue: 0,1:09:03.50,1:09:05.35,yin,,0,0,0,,如果找到了牌面图像\N{\fs12}So, if it finds the face image,
Dialogue: 0,1:09:05.83,1:09:08.45,yin,,0,0,0,,我就要把它显示在中间\N{\fs12}then I'm going to display it in the middle,
Dialogue: 0,1:09:08.59,1:09:12.18,yin,,0,0,0,,否则 我就要绘制花色符号\N{\fs12}otherwise, I need to draw the pips, basically,
Dialogue: 0,1:09:12.18,1:09:14.38,yin,,0,0,0,,因为它不是人头牌\N{\fs12}because it's not a face card.
Dialogue: 0,1:09:14.66,1:09:18.00,yin,,0,0,0,,在这里添加一个drawPips方法\N{\fs12}So let's put a little drawPips here.
Dialogue: 0,1:09:19.12,1:09:20.54,yin,,0,0,0,,等会实现它\N{\fs12}Okay, do that later.
Dialogue: 0,1:09:21.50,1:09:22.65,yin,,0,0,0,,牌面图像\N{\fs12}So, the face image.
Dialogue: 0,1:09:22.66,1:09:23.73,yin,,0,0,0,,要怎么显示出来呢\N{\fs12}How do I do this?
Dialogue: 0,1:09:23.81,1:09:27.03,yin,,0,0,0,,我只要告诉UIImage\N{\fs12}Well, really I just need to tell UIImage
Dialogue: 0,1:09:27.04,1:09:28.59,yin,,0,0,0,,将这幅图绘制在卡牌中间\N{\fs12}draw this in the middle of my card.
Dialogue: 0,1:09:28.71,1:09:31.84,yin,,0,0,0,,但我想让它缩进去 离开边缘一点\N{\fs12}But I want to move it in from the edges a little bit, right?
Dialogue: 0,1:09:31.84,1:09:34.29,yin,,0,0,0,,因为我不想让牌面图像\N{\fs12}Because I don't want whatever the face image is,
Dialogue: 0,1:09:34.29,1:09:36.82,yin,,0,0,0,,比如K的国王图像 破坏了两个角的图像\N{\fs12}like a king, to smash my corners.
Dialogue: 0,1:09:37.12,1:09:38.35,yin,,0,0,0,,红桃K上的国王\N{\fs12}Okay? My little king of hearts.
Dialogue: 0,1:09:38.35,1:09:39.58,yin,,0,0,0,,我想让图像缩进去一点\N{\fs12}So, I want to move it in a little bit,
Dialogue: 0,1:09:39.81,1:09:41.35,yin,,0,0,0,,所以我要新建一个矩形\N{\fs12}so I'm going to create a rectangle
Dialogue: 0,1:09:41.41,1:09:44.70,yin,,0,0,0,,让图像在其中进行缩放 叫imageRect\N{\fs12}to scale my image into, imageRect,
Dialogue: 0,1:09:45.19,1:09:51.69,yin,,0,0,0,,基本上是我的bounds\N{\fs12}and it's going to basically be my bounds,
Dialogue: 0,1:09:52.03,1:09:56.06,yin,,0,0,0,,但我要用这个CGRectInset方法\N{\fs12}except for I'm gonna use this CGRectInset method here
Dialogue: 0,1:09:56.16,1:09:58.05,yin,,0,0,0,,让它缩进去进去一点\N{\fs12}to inset it just a little bit.
Dialogue: 0,1:09:58.33,1:09:59.86,yin,,0,0,0,,缩进的距离是\N{\fs12}And I'm going to inset it
Dialogue: 0,1:09:59.88,1:10:03.10,yin,,0,0,0,,self.bounds.size.width\N{\fs12}by self.bounds.size.width
Dialogue: 0,1:10:03.11,1:10:07.54,yin,,0,0,0,,乘以 1减去一个新建属性\N{\fs12}times 1.0 minus a new property that I'm gonna invent,
Dialogue: 0,1:10:07.55,1:10:09.74,yin,,0,0,0,,叫做faceCardScaleFactor\N{\fs12}called faceCardScaleFactor.
Dialogue: 0,1:10:09.74,1:10:13.48,yin,,0,0,0,,faceCardScaleFactor如果是0.9\N{\fs12}So, the faceCardScaleFactor is going to be like .9,
Dialogue: 0,1:10:13.61,1:10:15.60,yin,,0,0,0,,代表卡牌大小的90%\N{\fs12}to be 90% of the size of my card.
Dialogue: 0,1:10:16.21,1:10:19.09,yin,,0,0,0,,0.9表示卡牌大小的90%\N{\fs12}Okay, .9 would be 90% of the size of the card.
Dialogue: 0,1:10:19.38,1:10:21.51,yin,,0,0,0,,size.height也一样\N{\fs12}And then, same thing with size.height.
Dialogue: 0,1:10:23.15,1:10:24.22,yin,,0,0,0,,height 抱歉\N{\fs12}Oops! Height. Sorry.
Dialogue: 0,1:10:25.56,1:10:27.20,yin,,0,0,0,,一样的 用height乘以\N{\fs12}Height times-- same thing,
Dialogue: 0,1:10:27.20,1:10:30.66,yin,,0,0,0,,1.0-self.faceCardScaleFactor\N{\fs12}1.0 minus self.faceCardScaleFactor.
Dialogue: 0,1:10:31.93,1:10:35.79,yin,,0,0,0,,好了 我们要添加这个属性\N{\fs12}All right, and we have to go make this property.
Dialogue: 0,1:10:35.79,1:10:36.61,yin,,0,0,0,,来做一下\N{\fs12}So, let's go do that.
Dialogue: 0,1:10:36.63,1:10:38.67,yin,,0,0,0,,放到上面这里 属性组第二个\N{\fs12}Let's go up here, put it in our properties second.
Dialogue: 0,1:10:38.77,1:10:41.37,yin,,0,0,0,,我又快速地打好了\N{\fs12}And I'll type it really fast, again.
Dialogue: 0,1:10:41.43,1:10:42.43,yin,,0,0,0,,抱歉用这个方式\N{\fs12}Sorry to have to use those,
Dialogue: 0,1:10:42.44,1:10:44.49,yin,,0,0,0,,但有时候打字很无聊\N{\fs12}but somethings are boring to type.
Dialogue: 0,1:10:45.00,1:10:47.59,yin,,0,0,0,,好了 我添加了这个faceCardScaleFactor\N{\fs12}All right, so I have this faceCardScaleFactor.
Dialogue: 0,1:10:47.59,1:10:48.54,yin,,0,0,0,,它是一个浮点数\N{\fs12}It's a float.
Dialogue: 0,1:10:48.89,1:10:51.82,yin,,0,0,0,,我要重写setter和getter\N{\fs12}I'm going to override both the setter and the getter.
Dialogue: 0,1:10:52.52,1:10:54.61,yin,,0,0,0,,在getter中 我要确保\N{\fs12}Okay? In the getter, I'm going to make sure that
Dialogue: 0,1:10:54.63,1:10:56.37,yin,,0,0,0,,它至少有一个默认值\N{\fs12}it's at least a default value.
Dialogue: 0,1:10:56.81,1:10:59.20,yin,,0,0,0,,默认值是90%\N{\fs12}Okay? 90% is going to be my default value,
Dialogue: 0,1:10:59.20,1:11:01.24,yin,,0,0,0,,它至少是这个默认值\N{\fs12}so it's at least going to be that default value.
Dialogue: 0,1:11:01.47,1:11:03.75,yin,,0,0,0,,而在setter中 我要调用setNeedsDisplay\N{\fs12}And in my setter, I'm going to call setNeedsDisplay.
Dialogue: 0,1:11:04.07,1:11:05.97,yin,,0,0,0,,因为如果有人设定了比例系数\N{\fs12}Because if someone sets that scaling,
Dialogue: 0,1:11:05.97,1:11:08.08,yin,,0,0,0,,如果是人头牌 就需要重绘卡牌\N{\fs12}I got it to redraw my card if it's a face card.
Dialogue: 0,1:11:08.83,1:11:10.29,yin,,0,0,0,,大家明白吗\N{\fs12}Okay? Everyone understand this?
Dialogue: 0,1:11:10.39,1:11:12.28,yin,,0,0,0,,因为setter和getter我都要做\N{\fs12}And since I do both the setter and the getter,
Dialogue: 0,1:11:12.28,1:11:14.61,yin,,0,0,0,,那我需要做什么呢 synthesize\N{\fs12}look what I have to do, synthesize.
Dialogue: 0,1:11:15.79,1:11:17.28,yin,,0,0,0,,大家还记得吗\N{\fs12}Okay? Everyone remember that?
Dialogue: 0,1:11:17.29,1:11:18.43,yin,,0,0,0,,如果同时用到了setter和getter\N{\fs12}If you put in both the setter and getter,
Dialogue: 0,1:11:18.44,1:11:19.84,yin,,0,0,0,,你就得synthesize自己\N{\fs12}you've got to synthesize yourself.
Dialogue: 0,1:11:20.96,1:11:22.26,yin,,0,0,0,,好好回想一下\N{\fs12}Okay, good reminder of that.
Dialogue: 0,1:11:23.00,1:11:24.85,yin,,0,0,0,,现在我有了这个imageRect\N{\fs12}Okay, so now I have this imageRect,
Dialogue: 0,1:11:25.01,1:11:28.59,yin,,0,0,0,,按照百分比向内缩小\N{\fs12}and it's inset by that-- whatever that percent is,
Dialogue: 0,1:11:28.60,1:11:31.72,yin,,0,0,0,,如果是90% 就是1-90%\N{\fs12}10% if it's-- you know, 90 would be 1.0 minus that,
Dialogue: 0,1:11:31.73,1:11:33.64,yin,,0,0,0,,也就是宽度的10% 高度的10%\N{\fs12}10% of my width, 10% of my height.
Dialogue: 0,1:11:34.05,1:11:40.16,yin,,0,0,0,,现在我可以直接用faceImage drawInRect:imageRect\N{\fs12}And so, now I just say faceImage, drawInRect: imageRect.
Dialogue: 0,1:11:40.62,1:11:44.60,yin,,0,0,0,,它就将图像缩放到适合那个矩形的大小\N{\fs12}Okay? And it will scale it to fit in that rect.
Dialogue: 0,1:11:45.57,1:11:47.91,yin,,0,0,0,,我需要这些图像 我们来添加一些\N{\fs12}Now, I need these images, so let's go grab those.
Dialogue: 0,1:11:47.92,1:11:49.54,yin,,0,0,0,,我正好有 在这里\N{\fs12}I happen to have them handy right here.
Dialogue: 0,1:11:49.76,1:11:51.60,yin,,0,0,0,,这些图片\N{\fs12}Okay? So, here's a bunch of images
Dialogue: 0,1:11:51.83,1:11:53.42,yin,,0,0,0,,就是人头牌对应的图像\N{\fs12}that I have for face cards.
Dialogue: 0,1:11:53.63,1:11:54.67,yin,,0,0,0,,把它们拖拽到\N{\fs12}Let's just go ahead and drag them
Dialogue: 0,1:11:54.67,1:11:58.74,yin,,0,0,0,,资产库中 图像资产\N{\fs12}into our assets library here, image assets.
Dialogue: 0,1:11:58.74,1:12:00.08,yin,,0,0,0,,这就是我们的图像资产库\N{\fs12}So, here's our image asset library.
Dialogue: 0,1:12:00.08,1:12:00.98,yin,,0,0,0,,还什么都没有\N{\fs12}We don't have any yet.
Dialogue: 0,1:12:01.24,1:12:02.02,yin,,0,0,0,,把它们拖进来\N{\fs12}Drag that in there.
Dialogue: 0,1:12:02.03,1:12:06.97,yin,,0,0,0,,正好在这 顺便再把斯坦福大学图标拖进来\N{\fs12}While I'm here, I'm also gonna drag our famous Stanford one.
Dialogue: 0,1:12:06.97,1:12:09.45,yin,,0,0,0,,这个高分辨率的图标也拖进来\N{\fs12}And, actually, let's get the high-res one, too.
Dialogue: 0,1:12:10.12,1:12:12.18,yin,,0,0,0,,我们还要把它作为卡牌背面图案\N{\fs12}Okay, we'll use that as our card back again.
Dialogue: 0,1:12:13.34,1:12:14.71,yin,,0,0,0,,所有图像都在这里了\N{\fs12}Okay, so we got all our images here.
Dialogue: 0,1:12:14.71,1:12:16.22,yin,,0,0,0,,这些图像 看这个\N{\fs12}So, the images. Look at this.
Dialogue: 0,1:12:16.32,1:12:17.56,yin,,0,0,0,,我们再放一张高分辨率的人头牌图像\N{\fs12}Let's put the high-res one in
Dialogue: 0,1:12:17.57,1:12:18.91,yin,,0,0,0,,至少加一张红桃K的\N{\fs12}for a king of hearts, at least.
Dialogue: 0,1:12:19.82,1:12:20.76,yin,,0,0,0,,现在这是红桃K的\N{\fs12}So here's the king of hearts.
Dialogue: 0,1:12:20.76,1:12:22.12,yin,,0,0,0,,这些图的高分辨率版本我都有\N{\fs12}I have a high-res for all of them,
Dialogue: 0,1:12:22.13,1:12:24.96,yin,,0,0,0,,但时间有限\N{\fs12}but just for time constraints,
Dialogue: 0,1:12:24.99,1:12:27.62,yin,,0,0,0,,我们就只把它放到这里\N{\fs12}let's go ahead and put this guy right here.
Dialogue: 0,1:12:27.89,1:12:29.35,yin,,0,0,0,,至少加上这张\N{\fs12}Okay, so we get that one at least.
Dialogue: 0,1:12:29.79,1:12:30.32,yin,,0,0,0,,好的\N{\fs12}All right.
Dialogue: 0,1:12:30.61,1:12:32.02,yin,,0,0,0,,我想把它们都拖进来\N{\fs12}I'd want to drag them all in for all.
Dialogue: 0,1:12:32.02,1:12:33.76,yin,,0,0,0,,但就这样吧 现在我有了这些图片\N{\fs12}But anyway, so now I have these images.
Dialogue: 0,1:12:33.84,1:12:36.92,yin,,0,0,0,,现在再运行时 它会去查找\N{\fs12}So now, when I run, it's going to go look
Dialogue: 0,1:12:37.03,1:12:39.42,yin,,0,0,0,,这些名称对应的图片\N{\fs12}for the image of these names, you see?
Dialogue: 0,1:12:39.58,1:12:41.21,yin,,0,0,0,,就会找到红桃K这张\N{\fs12}And it's going to find the king of hearts there.
Dialogue: 0,1:12:41.81,1:12:43.39,yin,,0,0,0,,就是这位自杀的国王\N{\fs12}Okay? So, that's the suicide king.
Dialogue: 0,1:12:43.81,1:12:46.45,yin,,0,0,0,,看起来很不错 大小很合适\N{\fs12}Right? Looks pretty decent. Size is pretty good.
Dialogue: 0,1:12:47.06,1:12:51.71,yin,,0,0,0,,现在我们要快速地做两件事情\N{\fs12}Okay. All right, so now we are going to do two quick things.
Dialogue: 0,1:12:51.73,1:12:53.32,yin,,0,0,0,,我知道时间快到了\N{\fs12}I know we're right on the edge of time here.
Dialogue: 0,1:12:53.52,1:12:55.68,yin,,0,0,0,,我们快速地做一下手势识别器\N{\fs12}We're going to do the gesture recognizers really quick.
Dialogue: 0,1:12:55.68,1:12:56.93,yin,,0,0,0,,我要做两件事\N{\fs12}So I'm going to do two things.
Dialogue: 0,1:12:57.68,1:13:02.32,yin,,0,0,0,,一是 让这个PlayingCardView在运行时牌面向下\N{\fs12}One is, let's make this PlayingCardView work facedown.
Dialogue: 0,1:13:02.32,1:13:04.92,yin,,0,0,0,,方法是判断现在是否牌面向上\N{\fs12}And we're just going to do that by saying if we're face up,
Dialogue: 0,1:13:06.11,1:13:08.73,yin,,0,0,0,,如果是的话 就执行这段代码\N{\fs12}then we'll do this, all this stuff.
Dialogue: 0,1:13:09.93,1:13:14.22,yin,,0,0,0,,否则就显示背景图片\N{\fs12}Otherwise, we will just do our background image,
Dialogue: 0,1:13:14.37,1:13:19.36,yin,,0,0,0,,UIImage imageNamed: 最爱的cardback\N{\fs12}UIImage, imageNamed, favorite cardback.
Dialogue: 0,1:13:19.52,1:13:20.57,yin,,0,0,0,,我要把它改名为cardback\N{\fs12}I'm going to change it to that.
Dialogue: 0,1:13:20.95,1:13:24.62,yin,,0,0,0,,然后是drawInRect self.bounds\N{\fs12}And then drawInRect, self.Bounds,
Dialogue: 0,1:13:24.86,1:13:27.21,yin,,0,0,0,,背景图的牌角没有图案\N{\fs12}and then for the back, I don't have the corners.
Dialogue: 0,1:13:27.36,1:13:30.84,yin,,0,0,0,,我可以直接用整张图\N{\fs12}And so, I can just go ahead and use the whole thing,
Dialogue: 0,1:13:30.85,1:13:31.65,yin,,0,0,0,,改成cardback\N{\fs12}so cardback.
Dialogue: 0,1:13:32.26,1:13:35.23,yin,,0,0,0,,这样扑克牌背面图案就设好了\N{\fs12}Okay, so now we have the front-- the back there, rather.
Dialogue: 0,1:13:35.23,1:13:37.87,yin,,0,0,0,,运行时 它是牌面向下的\N{\fs12}So now, since it's face up-- it starts out not face up.
Dialogue: 0,1:13:37.87,1:13:40.14,yin,,0,0,0,,所以是这样的 但我需要把它翻过来\N{\fs12}So, here it is, but I need to flip this over.
Dialogue: 0,1:13:40.42,1:13:43.20,yin,,0,0,0,,我们用滑动手势将卡牌翻过来\N{\fs12}So let's do a swipe gesture to flip that over.
Dialogue: 0,1:13:43.45,1:13:47.16,yin,,0,0,0,,我们用Xcode来添加滑动手势\N{\fs12}Okay, and the swipe gesture we're going to do using Xcode.
Dialogue: 0,1:13:47.50,1:13:49.88,yin,,0,0,0,,方法是这样的\N{\fs12}Okay? So, swipe gestures go like this.
Dialogue: 0,1:13:49.96,1:13:52.79,yin,,0,0,0,,转到右下方的对象面板\N{\fs12}You go down here, you get in the object palette,
Dialogue: 0,1:13:52.79,1:13:54.00,yin,,0,0,0,,按钮所在的地方\N{\fs12}same place buttons are,
Dialogue: 0,1:13:54.02,1:13:55.72,yin,,0,0,0,,可以看到这里有这些手势\N{\fs12}and you'll see that there's these gestures here.
Dialogue: 0,1:13:55.98,1:13:57.49,yin,,0,0,0,,选中滑动手势\N{\fs12}Now, I'm going to take a swipe gesture
Dialogue: 0,1:13:57.64,1:13:58.96,yin,,0,0,0,,将它拖拽到\N{\fs12}and drag it onto the view
Dialogue: 0,1:13:58.97,1:14:00.58,yin,,0,0,0,,要识别这个滑动手势的视图上\N{\fs12}that I want to recognize that swipe,
Dialogue: 0,1:14:00.98,1:14:02.86,yin,,0,0,0,,显然是PlayingCardView\N{\fs12}which is my PlayingCardView, obviously.
Dialogue: 0,1:14:03.29,1:14:06.93,yin,,0,0,0,,然后我只要从这个小图标进行control拖拽\N{\fs12}Then, I simply control-drag from this little icon
Dialogue: 0,1:14:06.93,1:14:07.78,yin,,0,0,0,,下面的这个小图标\N{\fs12}that appears down here.
Dialogue: 0,1:14:07.78,1:14:08.37,yin,,0,0,0,,看到了吗\N{\fs12}You see it?
Dialogue: 0,1:14:08.38,1:14:09.15,yin,,0,0,0,,代表滑动手势\N{\fs12}Swipe gesture.
Dialogue: 0,1:14:09.26,1:14:11.09,yin,,0,0,0,,还可以从这里进行拖拽\N{\fs12}You can also do it from here,
Dialogue: 0,1:14:11.10,1:14:12.05,yin,,0,0,0,,在这个文档大纲中\N{\fs12}this little document outline
Dialogue: 0,1:14:12.05,1:14:13.85,yin,,0,0,0,,今天我们没有时间讲这个了\N{\fs12}which we don't have time to talk about today.
Dialogue: 0,1:14:14.23,1:14:15.64,yin,,0,0,0,,但是可以这样做\N{\fs12}Okay, but you can do that, too.
Dialogue: 0,1:14:16.03,1:14:17.59,yin,,0,0,0,,我要从这里按住control键进行拖拽\N{\fs12}But I'm going to control-drag from here.
Dialogue: 0,1:14:18.24,1:14:21.61,yin,,0,0,0,,选择自动模式下的控制器\N{\fs12}Oops! Go auto in controller.
Dialogue: 0,1:14:21.68,1:14:23.11,yin,,0,0,0,,只要拖拽过来就可以了\N{\fs12}And you just drag that.
Dialogue: 0,1:14:23.11,1:14:25.04,yin,,0,0,0,,非常像目标操作\N{\fs12}It's very much like target-action.
Dialogue: 0,1:14:25.50,1:14:28.97,yin,,0,0,0,,我要加它swipe 比较直观\N{\fs12}Okay. I'll call this a swipe, just to make it clear.
Dialogue: 0,1:14:29.32,1:14:31.10,yin,,0,0,0,,类型参数是UISwipeGestureRecognizer\N{\fs12}And their argument is the swipe gesture recognizer.
Dialogue: 0,1:14:31.10,1:14:32.68,yin,,0,0,0,,不知道为什么默认值不是它\N{\fs12}I'm not sure why it doesn't default to that.
Dialogue: 0,1:14:33.12,1:14:34.18,yin,,0,0,0,,这样就添加了swipe\N{\fs12}And we have the swipe.
Dialogue: 0,1:14:34.32,1:14:36.00,yin,,0,0,0,,在swipe中 我们只要这样做\N{\fs12}And the swipe, all we need to do
Dialogue: 0,1:14:36.01,1:14:38.36,yin,,0,0,0,,self.playingCardView.faceUp\N{\fs12}is say self.playingCardView.faceUp
Dialogue: 0,1:14:38.38,1:14:41.37,yin,,0,0,0,,=!self.playingCardView.faceUp\N{\fs12}equals not self.playingCardView.faceUp.
Dialogue: 0,1:14:44.20,1:14:46.31,yin,,0,0,0,,只要把扑克牌翻过来\N{\fs12}Just flip it over. Okay?
Dialogue: 0,1:14:49.00,1:14:49.49,yin,,0,0,0,,出来了\N{\fs12}Here it is.
Dialogue: 0,1:14:49.50,1:14:51.07,yin,,0,0,0,,我要滑动\N{\fs12}I'm going to swipe, okay.
Dialogue: 0,1:14:51.07,1:14:53.67,yin,,0,0,0,,默认滑动方向是向右的\N{\fs12}The default swipe direction, by the way, is to the right,
Dialogue: 0,1:14:53.99,1:14:55.19,yin,,0,0,0,,随着滑动 大家可以看到\N{\fs12}so I'm swiping and you can see
Dialogue: 0,1:14:55.19,1:14:57.06,yin,,0,0,0,,扑克牌翻过来又翻回去\N{\fs12}that it's flipping the card back and forth.
Dialogue: 0,1:14:57.32,1:15:00.60,yin,,0,0,0,,还可以检查滑动方向\N{\fs12}By the way, you can inspect which direction the swipe is
Dialogue: 0,1:15:00.60,1:15:03.54,yin,,0,0,0,,只要选中它 转到检查器\N{\fs12}by clicking on it and going to the inspector.
Dialogue: 0,1:15:03.70,1:15:05.17,yin,,0,0,0,,列表中有右 左 上 下四个方向\N{\fs12}Then there's right, left, up, down,
Dialogue: 0,1:15:05.17,1:15:06.31,yin,,0,0,0,,回答了刚才的问题\N{\fs12}so that answers your questions,
Dialogue: 0,1:15:06.31,1:15:07.56,yin,,0,0,0,,只有这四个方向\N{\fs12}those are the only four there are.
Dialogue: 0,1:15:07.82,1:15:09.65,yin,,0,0,0,,还有用到几根手指\N{\fs12}And how many fingers have to be involved,
Dialogue: 0,1:15:09.77,1:15:11.37,yin,,0,0,0,,一指 多指等等\N{\fs12}one finger, multiple fingers, etcetera.
Dialogue: 0,1:15:12.46,1:15:16.86,yin,,0,0,0,,最后 我要添加一个捏合手势\N{\fs12}Okay? And lastly, I'm going to do a pinch gesture,
Dialogue: 0,1:15:17.01,1:15:18.51,yin,,0,0,0,,捏合手势的实现部分\N{\fs12}and I'm going to do the implementation,
Dialogue: 0,1:15:18.51,1:15:22.73,yin,,0,0,0,,我要全部在视图中完成\N{\fs12}the pinch gesture, entirely in the view, okay?
Dialogue: 0,1:15:22.94,1:15:25.25,yin,,0,0,0,,所以我要在视图中新建一个方法\N{\fs12}So I'm going to add a new method to the view,
Dialogue: 0,1:15:25.26,1:15:26.65,yin,,0,0,0,,叫做pinch\N{\fs12}which is pinch.
Dialogue: 0,1:15:27.90,1:15:30.76,yin,,0,0,0,,它是一个UIPinchGestureRecognizer\N{\fs12}And it's going to be UIPinchGestureRecognizer.
Dialogue: 0,1:15:32.40,1:15:34.11,yin,,0,0,0,,这个pinch非常简单\N{\fs12}Okay? Now, this pinch is really simple.
Dialogue: 0,1:15:34.12,1:15:34.76,yin,,0,0,0,,它只要判断\N{\fs12}It's just going to say
Dialogue: 0,1:15:34.76,1:15:39.01,yin,,0,0,0,,手势的状态是否为Changed\N{\fs12}if the gesture's state is changed--
Dialogue: 0,1:15:41.07,1:15:42.79,yin,,0,0,0,,不是Began 是Changed\N{\fs12}oops, not Began, Changed,
Dialogue: 0,1:15:43.15,1:15:48.26,yin,,0,0,0,,或者为Ended\N{\fs12}or if the gesture's state is ended.
Dialogue: 0,1:15:50.55,1:15:52.48,yin,,0,0,0,,然后只要\N{\fs12}Okay? Then, I'm simply going to
Dialogue: 0,1:15:52.48,1:15:55.86,yin,,0,0,0,,用我的faceCardScaleFactor\N{\fs12}take this faceCardScaleFactor that I have
Dialogue: 0,1:15:56.00,1:15:58.56,yin,,0,0,0,,乘以gesture的scale\N{\fs12}and multiply it by the gesture scale.
Dialogue: 0,1:15:59.23,1:16:01.27,yin,,0,0,0,,但我不希望结果累积\N{\fs12}But I don't want that to accumulate,
Dialogue: 0,1:16:01.42,1:16:03.82,yin,,0,0,0,,所以每次都要将gesture的scale\N{\fs12}so I'm going to set the gesture's scale
Dialogue: 0,1:16:03.83,1:16:05.32,yin,,0,0,0,,重置为1.0\N{\fs12}back to 1.0 all the time.
Dialogue: 0,1:16:05.70,1:16:07.02,yin,,0,0,0,,下次被调用时\N{\fs12}So, the next time I get called,
Dialogue: 0,1:16:07.03,1:16:08.39,yin,,0,0,0,,得到的是增量的缩放比例\N{\fs12}I'll get the incremental scale.
Dialogue: 0,1:16:09.35,1:16:11.88,yin,,0,0,0,,全部需要的就是这些\N{\fs12}Okay? So, that's all that's necessary there.
Dialogue: 0,1:16:11.89,1:16:13.49,yin,,0,0,0,,我要让它成为公有的\N{\fs12}I'm actually going to make this public,
Dialogue: 0,1:16:13.70,1:16:15.14,yin,,0,0,0,,因为我想将这个手势识别器\N{\fs12}because I want to be able to
Dialogue: 0,1:16:15.15,1:16:17.35,yin,,0,0,0,,添加到控制器中\N{\fs12}add this gesture recognizer in my controller.
Dialogue: 0,1:16:17.35,1:16:19.96,yin,,0,0,0,,我们就加到这里\N{\fs12}So, let's just add this here, just so my gesture--
Dialogue: 0,1:16:19.97,1:16:21.20,yin,,0,0,0,,这样我的控制器就知道\N{\fs12}so my controller knows that
Dialogue: 0,1:16:21.21,1:16:23.46,yin,,0,0,0,,卡牌视图可以识别这个手势\N{\fs12}my card view is capable of this.
Dialogue: 0,1:16:23.97,1:16:25.86,yin,,0,0,0,,然后只要转到viewDidLoad\N{\fs12}Then, I simply go in viewDidLoad,
Dialogue: 0,1:16:26.40,1:16:30.70,yin,,0,0,0,,self.playingCardView addGestureRecognizer\N{\fs12}and say self.PlayingCardView, addGestureRecognizer.
Dialogue: 0,1:16:33.92,1:16:40.20,yin,,0,0,0,,新建一个UIPinchGestureRecognizer\N{\fs12}And I'm just gonna create a new UIPinchGestureRecognizer,
Dialogue: 0,1:16:40.20,1:16:41.56,yin,,0,0,0,,alloc init\N{\fs12}alloc, init.
Dialogue: 0,1:16:41.56,1:16:45.16,yin,,0,0,0,,这是指定初始化方法\N{\fs12}You'll see that this is the designated initializer,
Dialogue: 0,1:16:45.24,1:16:47.07,yin,,0,0,0,,目标是视图\N{\fs12}the target is going to be the view,
Dialogue: 0,1:16:47.55,1:16:50.15,yin,,0,0,0,,操作是pinch\N{\fs12}and the action is going to be pinch.
Dialogue: 0,1:16:53.62,1:16:54.71,yin,,0,0,0,,好了 就是这样\N{\fs12}Okay. Well, that's it.
Dialogue: 0,1:16:54.73,1:16:56.66,yin,,0,0,0,,就是这样在代码中添加手势的\N{\fs12}So, this is how you add this in code.
Dialogue: 0,1:16:59.37,1:17:00.53,yin,,0,0,0,,都明白吗\N{\fs12}Everyone understand this?
Dialogue: 0,1:17:01.42,1:17:04.10,yin,,0,0,0,,我将它添加到这个视图中 创建它\N{\fs12}So, I'm adding it to this view, creating it.
Dialogue: 0,1:17:04.21,1:17:05.00,yin,,0,0,0,,这是目标\N{\fs12}This is the target.
Dialogue: 0,1:17:05.01,1:17:06.18,yin,,0,0,0,,视图会处理它\N{\fs12}The view is going to handle it.
Dialogue: 0,1:17:06.26,1:17:07.14,yin,,0,0,0,,它会处理捏合手势\N{\fs12}It's going to handle the pinch.
Dialogue: 0,1:17:07.15,1:17:08.51,yin,,0,0,0,,我们处理了滑动手势\N{\fs12}We handled the swipe,
Dialogue: 0,1:17:09.15,1:17:10.86,yin,,0,0,0,,但是捏合手势是由视图处理的\N{\fs12}but the view is going to handle the pinch.
Dialogue: 0,1:17:11.30,1:17:12.71,yin,,0,0,0,,我们看一下效果如何\N{\fs12}All right, so let's see, what does that do?
Dialogue: 0,1:17:13.32,1:17:15.66,yin,,0,0,0,,如果这里有张牌 如果进行捏合缩放\N{\fs12}That should allow us, when we have a card here,
Dialogue: 0,1:17:15.69,1:17:18.46,yin,,0,0,0,,可以改变它的大小\N{\fs12}if I pinch, to change the size,
Dialogue: 0,1:17:19.33,1:17:22.47,yin,,0,0,0,,因为它是在调整faceCardScaleFactor\N{\fs12}because it's adjusting that faceCardScaleFactor.
Dialogue: 0,1:17:22.62,1:17:23.15,yin,,0,0,0,,看到了吗\N{\fs12}You see?
Dialogue: 0,1:17:25.06,1:17:25.65,yin,,0,0,0,,明白吗\N{\fs12}Make sense?
Dialogue: 0,1:17:26.68,1:17:29.62,yin,,0,0,0,,要添加deck\N{\fs12}But, all we need to do to add the deck here
Dialogue: 0,1:17:29.88,1:17:33.06,yin,,0,0,0,,我们只要回到控制器\N{\fs12}is to go back to our controller and add --
Dialogue: 0,1:17:33.75,1:17:35.25,yin,,0,0,0,,先把模型拖进来\N{\fs12}Well, first of all, let me drag the model in.
Dialogue: 0,1:17:35.26,1:17:37.47,yin,,0,0,0,,我的模型在这里\N{\fs12}I've got my model right here.
Dialogue: 0,1:17:38.36,1:17:41.01,yin,,0,0,0,,这就是我的模型 和Machismo中用过的一样\N{\fs12}There's my model. Same model we used in Machismo.
Dialogue: 0,1:17:41.86,1:17:45.67,yin,,0,0,0,,我只要在这里添加deck\N{\fs12}And I'm just going to go here and add that deck,
Dialogue: 0,1:17:47.33,1:17:51.34,yin,,0,0,0,,[strong, nonatomic] Deck *deck\N{\fs12}strong nonatomic, Deck star deck.
Dialogue: 0,1:17:51.76,1:17:56.08,yin,,0,0,0,,导入PlayingCardDeck\N{\fs12}Let's go ahead and import PlayingCardDeck,
Dialogue: 0,1:17:56.43,1:17:59.94,yin,,0,0,0,,导入PlayingCard\N{\fs12}let's also import PlayingCard.
Dialogue: 0,1:18:00.57,1:18:02.02,yin,,0,0,0,,deck设好了\N{\fs12}All right, so now we have that deck.
Dialogue: 0,1:18:02.29,1:18:05.51,yin,,0,0,0,,这是deck的延迟实例化\N{\fs12}Here is the lazy instantiation of the deck,
Dialogue: 0,1:18:05.53,1:18:06.32,yin,,0,0,0,,你们知道的\N{\fs12}you know about that.
Dialogue: 0,1:18:06.56,1:18:08.47,yin,,0,0,0,,我还要添加一个方法\N{\fs12}I'm also going to have this method
Dialogue: 0,1:18:08.47,1:18:10.90,yin,,0,0,0,,叫做drawRandomPlayingCard\N{\fs12}I'm going to call drawRandomPlayingCard.
Dialogue: 0,1:18:11.23,1:18:13.06,yin,,0,0,0,,这个方法\N{\fs12}Okay, this method is just gonna
Dialogue: 0,1:18:13.08,1:18:14.51,yin,,0,0,0,,会从deck中绘制一张卡牌\N{\fs12}draw a card from that deck.
Dialogue: 0,1:18:14.79,1:18:16.54,yin,,0,0,0,,判断它是否为一张扑克牌\N{\fs12}It's gonna see if it's a playing card,
Dialogue: 0,1:18:16.66,1:18:18.12,yin,,0,0,0,,如果是的话 就把它放上去\N{\fs12}if it is, it's going to cast it
Dialogue: 0,1:18:18.15,1:18:19.38,yin,,0,0,0,,所以有一个局部变量\N{\fs12}so that we have a local variable.
Dialogue: 0,1:18:19.58,1:18:21.02,yin,,0,0,0,,然后进行赋值\N{\fs12}Then it's going to set that
Dialogue: 0,1:18:21.20,1:18:24.33,yin,,0,0,0,,将PlayingCardView的rank和suit\N{\fs12}in the PlayingCardView's rank and suit
Dialogue: 0,1:18:24.35,1:18:25.75,yin,,0,0,0,,设为card的rank和suit\N{\fs12}to the card's rank and suit.
Dialogue: 0,1:18:26.57,1:18:30.68,yin,,0,0,0,,每次滑动并且牌面向下时\N{\fs12}Okay? And I'm going to do that every time we swipe
Dialogue: 0,1:18:31.07,1:18:32.64,yin,,0,0,0,,都会执行它\N{\fs12}and it's face down.
Dialogue: 0,1:18:38.10,1:18:39.74,yin,,0,0,0,,就是这样\N{\fs12}Okay? So that's that.
Dialogue: 0,1:18:41.88,1:18:42.48,yin,,0,0,0,,出来了\N{\fs12}So, here it is.
Dialogue: 0,1:18:42.49,1:18:44.81,yin,,0,0,0,,现在滑动时 会得到不同的扑克牌\N{\fs12}So now when we swipe over, we get different cards.
Dialogue: 0,1:18:45.07,1:18:46.18,yin,,0,0,0,,我们还没有添加花色符号\N{\fs12}Okay, we have no pips yet.
Dialogue: 0,1:18:46.18,1:18:47.34,yin,,0,0,0,,等会就做\N{\fs12}I'm going to do that in a second.
Dialogue: 0,1:18:48.35,1:18:49.84,yin,,0,0,0,,但是有人头牌\N{\fs12}But we do have the face cards,
Dialogue: 0,1:18:49.86,1:18:51.56,yin,,0,0,0,,这是方块J 分辨率有点低\N{\fs12}the jack of diamonds, kind of low-res,
Dialogue: 0,1:18:51.57,1:18:53.18,yin,,0,0,0,,因为我没有把高分辨率的图片加进来\N{\fs12}because I didn't have the other ones in there.
Dialogue: 0,1:18:54.36,1:18:55.35,yin,,0,0,0,,梅花K 不错\N{\fs12}King of clubs, okay.
Dialogue: 0,1:18:55.73,1:18:57.06,yin,,0,0,0,,现在我们快速做一下花色符号\N{\fs12}Now let's do the pips real quick.
Dialogue: 0,1:18:57.07,1:18:58.41,yin,,0,0,0,,花色符号非常简单\N{\fs12}The pips are super simple,
Dialogue: 0,1:18:58.69,1:19:01.09,yin,,0,0,0,,如果已经有了一小段代码就更好了\N{\fs12}especially if you have a little snippet here.
Dialogue: 0,1:19:01.27,1:19:03.74,yin,,0,0,0,,还记得这个drawPips吧\N{\fs12}So, remember we have this drawPips, okay?
Dialogue: 0,1:19:03.74,1:19:06.83,yin,,0,0,0,,我直接把实现代码粘贴过来\N{\fs12}I'm just gonna paste that with an implementation of that.
Dialogue: 0,1:19:07.33,1:19:10.28,yin,,0,0,0,,大家可以课下再看看花色符号这部分做了什么\N{\fs12}You can go look at this offline, what pips does.
Dialogue: 0,1:19:10.49,1:19:11.06,yin,,0,0,0,,非常简单\N{\fs12}Pretty straightforward.
Dialogue: 0,1:19:11.07,1:19:13.46,yin,,0,0,0,,就是用属性化字符串\N{\fs12}It just uses attributed strings,
Dialogue: 0,1:19:13.46,1:19:16.09,yin,,0,0,0,,甚至只是用普通字符串来绘制\N{\fs12}or maybe even just regular strings, to draw.
Dialogue: 0,1:19:16.10,1:19:17.23,yin,,0,0,0,,我们看看效果如何\N{\fs12}So, let's see what that looks like.
Dialogue: 0,1:19:18.40,1:19:19.26,yin,,0,0,0,,这是我们的扑克牌\N{\fs12}So, there's our card.
Dialogue: 0,1:19:20.10,1:19:22.03,yin,,0,0,0,,出来了 方块6\N{\fs12}And there we go, six of diamonds,
Dialogue: 0,1:19:22.05,1:19:24.10,yin,,0,0,0,,梅花4 黑桃7\N{\fs12}four of clubs, seven spades.
Dialogue: 0,1:19:24.38,1:19:25.55,yin,,0,0,0,,还有最后一件事要做\N{\fs12}And the last thing I'm going to do.
Dialogue: 0,1:19:25.56,1:19:27.06,yin,,0,0,0,,调整视图的大小\N{\fs12}Let's resize this view
Dialogue: 0,1:19:27.06,1:19:28.77,yin,,0,0,0,,看看我们修改了这么多内容之后\N{\fs12}and make sure it still looks good small,
Dialogue: 0,1:19:28.79,1:19:30.43,yin,,0,0,0,,它是否还可以正常显示\N{\fs12}even with all of the changes we made.
Dialogue: 0,1:19:30.43,1:19:32.02,yin,,0,0,0,,我们把它缩小到这么大\N{\fs12}So, we'll make it, like, this big.
Dialogue: 0,1:19:32.99,1:19:33.70,yin,,0,0,0,,运行一下\N{\fs12}And run.
Dialogue: 0,1:19:35.33,1:19:38.00,yin,,0,0,0,,看起来还不错\N{\fs12}And it still looks okay,
Dialogue: 0,1:19:39.00,1:19:40.81,yin,,0,0,0,,花色部分看起来有点挤\N{\fs12}a little squishy with the pips,
Dialogue: 0,1:19:40.81,1:19:43.37,yin,,0,0,0,,出来了一张人头牌 还不错\N{\fs12}but I see a face card, that's not bad.
Dialogue: 0,1:19:44.47,1:19:45.85,yin,,0,0,0,,今天的内容就是这些\N{\fs12}Okay, that's it for today.
Dialogue: 0,1:19:45.85,1:19:47.54,yin,,0,0,0,,抱歉拖堂了这么长时间\N{\fs12}Sorry to keep you so long.
Dialogue: 0,1:19:47.80,1:19:51.28,yin,,0,0,0,,周一见\N{\fs12}And I will see you all on Monday.
Dialogue: 0,1:19:52.72,1:19:56.09,yin,,0,0,0,,更多内容 请访问斯坦福网站\N{\fs12}For more, please visit us at stanford.edu.
